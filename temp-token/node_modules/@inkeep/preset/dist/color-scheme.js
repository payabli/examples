"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/color-scheme.ts
var color_scheme_exports = {};
__export(color_scheme_exports, {
  createColorDict: () => createColorDict,
  createColorScheme: () => createColorScheme,
  defaultColorScheme: () => defaultColorScheme,
  getColorSchemeVars: () => getColorSchemeVars
});
module.exports = __toCommonJS(color_scheme_exports);
var import_colorjs = __toESM(require("colorjs.io"));

// src/color-utils.ts
function getRGB(c) {
  return Number.parseInt(c, 16) || 0;
}
function getsRGB(c) {
  return getRGB(c) / 255 <= 0.03928 ? getRGB(c) / 255 / 12.92 : ((getRGB(c) / 255 + 0.055) / 1.055) ** 2.4;
}
function getLuminance(hexColor) {
  return 0.2126 * getsRGB(hexColor.slice(1, 3)) + 0.7152 * getsRGB(hexColor.slice(3, 5)) + 0.0722 * getsRGB(hexColor.slice(-2));
}
function getContrast(bgColor, textColor) {
  const L1 = getLuminance(bgColor);
  const L2 = getLuminance(textColor);
  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);
}
function getTextColorBasedOnBgColor(bgColor, lightColor, darkColor) {
  const whiteContrast = getContrast(bgColor, lightColor);
  const blackContrast = getContrast(bgColor, darkColor);
  return whiteContrast > blackContrast ? lightColor : darkColor;
}

// src/tokens.ts
var import_dev = require("@pandacss/dev");
var animations = import_dev.defineTokens.animations({
  "backdrop-in": {
    value: "fade-in 250ms {easings.default}"
  },
  "backdrop-out": {
    value: "fade-out 200ms {easings.default}"
  },
  "dialog-in": {
    value: "slide-in 400ms {easings.emphasized-in}"
  },
  "dialog-out": {
    value: "slide-out 200ms {easings.emphasized-out}"
  }
});
var tokens = (0, import_dev.defineTokens)({
  colors: {
    gray: {
      // CURRENT, LOOSELY BASED OFF RADIX SLATE GRAY
      "50": { value: "#f8f9fa" },
      // slate }2
      "100": { value: "#f1f3f5" },
      // slate }3
      "200": { value: "#eceef0" },
      // slate }4
      "300": { value: "#e6e8eb" },
      // slate }5
      "400": { value: "#dfe3e6" },
      // slate }6
      "500": { value: "#BDC2C7" },
      // did not match the slate gra }y
      "600": { value: "#889096" },
      // slate }9
      "700": { value: "#687076" },
      // slate1 }1
      "800": { value: "#36424A" },
      // did not match the slate gra }y
      "900": { value: "#11181c" }
      // slate1 }2
    },
    // alphas based off of grays
    grayAlpha: {
      "50": { value: "rgba(22, 56, 90, 0.03)" },
      "100": { value: "rgba(22, 56, 90, 0.06)" },
      "200": { value: "rgba(18, 43, 68, 0.08)" },
      "300": { value: "rgba(5, 26, 56, 0.1)" },
      "400": { value: "rgba(9, 39, 62, 0.13)" },
      "500": { value: "rgba(1, 20, 40, 0.26)" },
      "600": { value: "rgba(2, 20, 34, 0.47)" },
      "700": { value: "rgba(3, 17, 28, 0.6)" },
      "800": { value: "rgba(1, 15, 25, 0.79)" },
      "900": { value: "rgba(2, 9, 13, 0.94)" }
    },
    // radix neutral gray for dark mode ('grayDark')
    grayDark: {
      // '900': { value: '#161616' },
      "900": { value: "#1c1c1c" },
      // '800': { value: '#0b0a0a' },
      "800": { value: "#282828" },
      "700": { value: "#2e2e2e" },
      "600": { value: "#343434" },
      "500": { value: "#3e3e3e" },
      "400": { value: "#505050" },
      "300": { value: "#707070" },
      "200": { value: "#7e7e7e" },
      "100": { value: "#a0a0a0" },
      "50": { value: "#ededed" }
    }
  },
  fonts: {
    body: {
      value: "'Inter', sans-serif"
    },
    heading: {
      value: "'Inter', sans-serif"
    }
  },
  // https://github.com/cschroeter/park-ui/blob/ff729b25267137a6e5a87a375fe8b647e148dd2b/packages/presets/src/theme/tokens/animations.ts
  easings: {
    default: { value: "cubic-bezier(0.2, 0.0, 0, 1.0)" },
    "emphasized-in": { value: "cubic-bezier(0.05, 0.7, 0.1, 1.0)" },
    "emphasized-out": { value: "cubic-bezier(0.3, 0.0, 0.8, 0.15)" }
  },
  animations: {
    "backdrop-in": {
      value: "fade-in 250ms {easings.default}"
    },
    "backdrop-out": {
      value: "fade-out 200ms {easings.default}"
    },
    "dialog-in": {
      value: "slide-in 400ms {easings.emphasized-in}"
    },
    "dialog-out": {
      value: "slide-out 200ms {easings.emphasized-out}"
    }
  },
  // packages/widgets/src/themes/index.ts
  durations: {
    faster: { value: "100ms" },
    fast: { value: "180ms" },
    medium: { value: "300ms" },
    slow: { value: "500ms" }
  },
  shadows: {
    outline: { value: "none" },
    boxShadow: { value: "none" },
    tooltipShadow: { value: "0 8px 30px rgba(0, 0, 0, 0.12)" }
  }
});

// src/color-vars.ts
var import_shared = require("@inkeep/shared");
var getColorSchemeVars = (colorDict, prefix) => {
  const scheme = createColorScheme(colorDict);
  const vars = {};
  (0, import_shared.traverse)(
    scheme,
    (_key, value, path) => {
      if (typeof value === "string") {
        const cssVarRef = `--${prefix ? prefix + "-" : ""}colors-` + (0, import_shared.dashCase)(path);
        vars[cssVarRef] = value;
      }
    },
    { separator: "-" }
  );
  return vars;
};

// src/color-scheme.ts
var primaryBrandColor = "#000000";
function colorToString(color) {
  return color.to("srgb").toString({ format: "hex" });
}
function interpolateColors(color1, color2, percentage) {
  const c1 = color1.lch;
  const c2 = color2.lch;
  const l = c1.l + (c2.l - c1.l) * percentage;
  const c = c1.c + (c2.c - c1.c) * percentage;
  const h = c1.h + (c2.h - c1.h) * percentage;
  return new import_colorjs.default("lch", [l, c, h]);
}
function lchToRgb(color) {
  return color.to("srgb");
}
var mainColor = new import_colorjs.default(primaryBrandColor);
var createColorDict = (color) => {
  const primary = color instanceof import_colorjs.default ? color : new import_colorjs.default(color);
  const lightSubtleChroma = primary.lch.c < 3 ? primary.lch.c : 3;
  const textSubtleChroma = primary.lch.c < 10 ? primary.lch.c : 10;
  const textBoldChroma = primary.lch.c < 5 ? primary.lch.c : 5;
  return {
    textBold: new import_colorjs.default("lch", [10, textBoldChroma, primary.lch.h]),
    textSubtle: new import_colorjs.default("lch", [30, textSubtleChroma, primary.lch.h]),
    lighter: new import_colorjs.default("lch", [98, primary.lch.c * 1.2, primary.lch.h * 0.96]),
    light: new import_colorjs.default("lch", [89, primary.lch.c * 1.2, primary.lch.h * 0.96]),
    lightSubtle: new import_colorjs.default("lch", [
      98,
      lightSubtleChroma,
      primary.lch.h * 0.98
    ]),
    medium: primary,
    mediumSubtle: new import_colorjs.default("lch", [
      primary.lch.l * 0.5,
      primary.lch.c,
      primary.lch.h
    ], 0.3),
    strong: new import_colorjs.default("lch", [
      primary.lch.l * 0.85,
      primary.lch.c,
      primary.lch.h
    ]),
    stronger: new import_colorjs.default("lch", [
      primary.lch.l * 0.5,
      primary.lch.c,
      primary.lch.h
    ])
  };
};
var defaultColorDict = createColorDict(mainColor);
var createColorScheme = (userScheme, primaryColor) => {
  const merged = Object.assign(
    {},
    primaryColor ? createColorDict(primaryColor) : defaultColorDict,
    userScheme
  );
  Object.keys(merged).forEach((key) => {
    if (merged[key] instanceof import_colorjs.default) {
      return;
    }
    merged[key] = new import_colorjs.default(merged[key]);
  });
  const scheme = Object.assign(
    {
      hitContentPreview: merged.strong,
      hitContentPreviewHover: merged.stronger
    },
    merged
  );
  const userProvidedAutoGenColorSchemeJSToString = Object.keys(scheme).reduce((acc, key) => {
    acc[key] = scheme[key].to("srgb").toString({ format: "hex" });
    return acc;
  }, {});
  const primary = {
    "50": colorToString(lchToRgb(scheme.lighter)),
    "100": colorToString(
      lchToRgb(interpolateColors(scheme.lighter, scheme.light, 0.5))
    ),
    "200": colorToString(lchToRgb(scheme.light)),
    "300": colorToString(
      lchToRgb(interpolateColors(scheme.light, scheme.medium, 0.5))
    ),
    "400": colorToString(
      lchToRgb(interpolateColors(scheme.light, scheme.medium, 0.75))
    ),
    "500": colorToString(lchToRgb(scheme.medium)),
    "600": colorToString(
      lchToRgb(interpolateColors(scheme.medium, scheme.strong, 0.75))
    ),
    "700": colorToString(lchToRgb(scheme.strong)),
    "800": colorToString(
      lchToRgb(interpolateColors(scheme.strong, scheme.stronger, 0.5))
    ),
    "900": colorToString(lchToRgb(scheme.stronger))
  };
  const textColorOnPrimary = userProvidedAutoGenColorSchemeJSToString.textColorOnPrimary || getTextColorBasedOnBgColor(
    userProvidedAutoGenColorSchemeJSToString.medium,
    "#ffffff",
    tokens.colors.gray["900"].value
  );
  const newColors = {
    inkeepPrimary: {
      ...userProvidedAutoGenColorSchemeJSToString,
      textColorOnPrimary
    },
    inkeepExpandedPrimary: primary
  };
  return newColors;
};
var defaultColorScheme = createColorScheme(defaultColorDict);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createColorDict,
  createColorScheme,
  defaultColorScheme,
  getColorSchemeVars
});
