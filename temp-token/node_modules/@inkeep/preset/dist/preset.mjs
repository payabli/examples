import {
  defaultColorScheme,
  tokens
} from "./chunk-3RBVPNH7.mjs";

// src/preset.ts
import { definePreset } from "@pandacss/dev";

// src/global-styles.ts
import { defaultConfig } from "@inkeep/shared";
import { defineGlobalStyles } from "@pandacss/dev";
var globalStyles = defineGlobalStyles({
  // https://github.com/inkeep/widgets/blob/96cc1e97c3c6e5c76605f6c2298f65ff98fc07b7/old/widgets/src/themes/styles.ts
  [`${defaultConfig.cssVarRoot} pre`]: {
    padding: 0,
    background: "transparent"
  },
  [defaultConfig.cssVarRoot]: {
    // https://github.com/inkeep/widgets/blob/87ea3d4017a03c233a1ff56bd144d005a4c2ebe7/packages/widgets/src/components/InkeepInternalProviderWrappers.tsx
    fontFamily: "token(fonts.body, inherit)",
    color: { base: "gray.800", _dark: "whiteAlpha.900" },
    bg: { base: "white", _dark: "grayDark.900" },
    lineHeight: "base"
  },
  [`${defaultConfig.cssVarRoot} *, *::before, &::after`]: {
    borderColor: { base: "gray.200", _dark: "whiteAlpha.300" }
  }
});

// src/recipes/ai-chat-page-wrapper.recipe.ts
import { defineRecipe } from "@pandacss/dev";
var aiChatPageWrapperRecipe = defineRecipe({
  className: "ai-chat-page-wrapper",
  jsx: ["AIChatWrapper"],
  base: {
    maxHeight: {
      base: "100vh",
      md: "100vh"
    },
    maxWidth: {
      base: "100vw",
      md: "100vw"
    },
    position: "relative",
    flexGrow: {
      base: 5
    },
    mx: {
      base: "auto"
    },
    justifySelf: {
      base: "center"
    },
    textAlign: "left"
  },
  variants: {
    size: {
      expand: {
        width: {
          base: "100%"
        },
        height: {
          base: "100%"
        }
      },
      default: {
        width: {
          md: "min( 600px , 100% )",
          lg: "min( 640px , 100% )",
          "2xl": "min( 760px , 100% )"
        },
        maxWidth: {
          base: "100vw"
        },
        height: {
          md: "min( 760px , 100% )",
          lg: "min( 800px , 100% )",
          "2xl": "min( 900px , 100% )"
        },
        maxHeight: {
          base: "100vw"
        },
        margin: "auto",
        alignSelf: "center",
        justifySelf: "center",
        flexGrow: 0
      },
      // shrink: {
      // 	// best used with a fixed-width element. parent must be "display:flex" in order for height to be respected (no overflow)
      // 	width: 'auto',
      // 	height: 'min(auto, 100%)',
      // 	flexGrow: 0,
      // 	flexShrink: 2,
      // 	alignSelf: 'flex-start',
      // },
      "shrink-vertically": {
        width: {
          base: "100%",
          md: "100%"
        },
        height: "auto",
        alignSelf: "flex-start",
        maxHeight: "100%"
      },
      "full-viewport": {
        position: "fixed",
        top: "0",
        left: "0",
        zIndex: "1000",
        width: "100vw",
        height: "100vh"
      }
    },
    variant: {
      "no-shadow": {
        boxShadow: "none"
      },
      "container-with-shadow": {
        boxShadow: "2xl",
        _dark: {
          boxShadow: "none"
        }
      }
    }
  },
  defaultVariants: {
    size: "default",
    variant: "container-with-shadow"
  }
});

// src/recipes/button.recipe.ts
import { chakraRecipes } from "@inkeep/preset-chakra";
import { defineRecipe as defineRecipe2 } from "@pandacss/dev";
var outlineDarkColor = "inkeepPrimary.strong";
var outlineFillColor = outlineDarkColor;
var outlineBorderColor = outlineDarkColor;
var fillColor = "inkeepPrimary.medium";
var fillActiveColor = "inkeepPrimary.medium";
var buttonRecipe = defineRecipe2({
  className: chakraRecipes.button.className,
  variants: {
    variant: {
      // TODO should this be defined as an implicit compoundVariant
      // or is it ok when explicitly used ?
      outlinePrimary: {
        border: "1px solid",
        _light: {
          color: "inkeepPrimary.strong",
          borderColor: "inkeepExpandedPrimary.200",
          _hover: {
            bg: "inkeepPrimary.lightSubtle",
            color: "inkeepPrimary.strong"
          }
        },
        _dark: {
          color: "inkeepExpandedPrimary.300",
          _hover: {
            bg: "whiteAlpha.200",
            color: "inkeepExpandedPrimary.200"
          }
        }
      },
      none: {
        // this is used for multi part slot components that include a button, without this the chakra default button recipes were taking precedence
      },
      outlineFilled: {
        bg: "white",
        border: "1px solid",
        borderColor: outlineBorderColor,
        color: outlineBorderColor,
        // borderColor: 'inkeepPrimary.textSubtle',
        // color: 'inkeepPrimary.textSubtle',
        _hover: {
          bg: outlineFillColor,
          color: "white"
        },
        _active: {
          bg: outlineFillColor
        }
      },
      outlineFilledActive: {
        bg: outlineFillColor,
        color: "white"
      },
      chatButton: {
        bg: "inkeepPrimary.textBold",
        boxShadow: "2xl",
        borderRadius: "lg",
        color: "white",
        fontWeight: "medium",
        _dark: {
          bg: "grayDark.600",
          boxShadow: "none"
        }
      },
      filledCTA: {
        bg: fillColor,
        color: "white",
        border: "none",
        borderRadius: "80px",
        _hover: {
          bg: fillActiveColor
        },
        _active: {
          bg: fillActiveColor
        }
      },
      primaryFilled: {
        bg: "inkeepPrimary.medium",
        color: "inkeepPrimary.textColorOnPrimary",
        _hover: {
          bg: "inkeepPrimary.strong"
        },
        _active: {
          bg: "inkeepPrimary.strong"
        }
      },
      neutralFilled: {
        bg: "gray.900",
        color: "white",
        _hover: {
          bg: "gray.800"
        },
        _active: {
          bg: "gray.800"
        },
        _dark: {
          bg: "inkeepExpandedPrimary.300",
          color: "grayDark.900",
          _hover: {
            bg: "inkeepExpandedPrimary.200"
          },
          _active: {
            bg: "inkeepExpandedPrimary.200"
          }
        }
      },
      outline: {
        _light: {
          color: "gray.700",
          _hover: {
            color: "gray.800"
          }
        },
        _dark: {
          color: "whiteAlpha.700",
          _hover: {
            color: "whiteAlpha.800",
            bg: "whiteAlpha.200"
          }
        }
      },
      iconButton: {
        background: "transparent",
        borderRadius: "0",
        px: 1,
        color: "gray.600",
        _hover: {
          color: "inkeepPrimary.stronger",
          background: "transparent"
        },
        _dark: {
          color: "whiteAlpha.600",
          _hover: {
            color: "inkeepExpandedPrimary.300"
          }
        }
      }
    },
    size: {
      none: {
        // this is used for multi part slot components that include a button, without this the chakra default button recipes were taking precedence
      }
    }
  }
});

// src/recipes/content-parser.recipe.ts
import { defineSlotRecipe } from "@pandacss/dev";
var contentParserRecipe = defineSlotRecipe({
  className: "content-parser",
  slots: [
    "span",
    "sup",
    "text",
    "ol",
    "ul",
    "li",
    "image",
    "link",
    "table",
    "thead",
    "tbody",
    "tr",
    "th",
    "td",
    "code",
    "heading"
  ],
  base: {
    sup: {
      marginLeft: "3px",
      cursor: "pointer",
      a: {
        background: "inkeepPrimary.light",
        px: "4px",
        py: "1px",
        borderRadius: "base",
        textDecoration: "none",
        color: "inkeepPrimary.textSubtle",
        fontWeight: "semibold"
      }
    },
    text: {
      marginBottom: "12px",
      overflowWrap: "break-word",
      whiteSpace: "pre-wrap",
      " + ol": {
        marginTop: "0px"
      },
      "+ li": {
        marginTop: "0px"
      }
    },
    ol: {
      overflowWrap: "break-word",
      paddingBottom: 3,
      paddingLeft: 7,
      position: "relative",
      li: {
        marginBottom: 1,
        counterIncrement: "item",
        "a": {
          display: "inline !important",
          overflowWrap: "break-word"
        }
      }
    },
    ul: {
      overflowWrap: "break-word",
      paddingBottom: 3,
      paddingLeft: 7,
      position: "relative",
      li: {
        marginBottom: 1,
        _before: {
          marginRight: 2
        },
        a: {
          display: "inline !important",
          overflowWrap: "break-word"
        }
      }
    },
    image: {
      objectFit: "cover",
      width: "100%",
      height: "auto"
    },
    link: {
      overflowWrap: "break-word",
      wordWrap: "break-word",
      textDecoration: "underline",
      display: "inline",
      _light: {
        color: "inkeepPrimary.stronger",
        _hover: {
          color: "inkeepPrimary.strong"
        }
      },
      _dark: {
        color: "inkeepExpandedPrimary.100",
        _hover: {
          color: "inkeepExpandedPrimary.300"
        }
      }
    },
    code: {
      overflowWrap: "anywhere",
      minWidth: "0",
      py: ".2rem",
      // changed from 0.1rem, not sure why it's different ?
      my: ".1rem",
      px: ".4rem!",
      borderRadius: "6px!",
      fontSize: "85%!",
      color: "inkeepPrimary.textColorOnPrimary",
      backgroundColor: "inkeepPrimary.medium",
      fontWeight: "semibold",
      display: "inline-block"
    }
  }
});

// src/recipes/heading.recipe.ts
import { chakraRecipes as chakraRecipes2 } from "@inkeep/preset-chakra";
import { defineRecipe as defineRecipe3 } from "@pandacss/dev";
var headingRecipe = defineRecipe3({
  className: chakraRecipes2.heading.className,
  jsx: ["Heading", "PreviewContentHeader"],
  variants: {
    uppercase: {
      true: {
        textStyle: "heading.uppercase",
        color: "gray.600"
      }
    }
  }
});

// src/recipes/icon.recipe.ts
import { chakraRecipes as chakraRecipes3 } from "@inkeep/preset-chakra";
import { defineRecipe as defineRecipe4 } from "@pandacss/dev";
var iconRecipe = defineRecipe4({
  className: chakraRecipes3.icon.className,
  variants: {
    variant: {
      dark: {
        color: "white"
      },
      lightPrimary: {
        color: "inkeepPrimary.textSubtle"
      },
      light: {
        color: "gray.600"
      }
    }
  }
});

// src/recipes/kbd.recipe.ts
import { chakraRecipes as chakraRecipes4 } from "@inkeep/preset-chakra";
import { defineRecipe as defineRecipe5 } from "@pandacss/dev";
var kbdRecipe = defineRecipe5({
  className: chakraRecipes4.kbd.className,
  variants: {
    variant: {
      dark: {
        bg: "primaryDark.9",
        color: "white",
        borderColor: "primaryDark.6",
        borderRadius: 3,
        borderBottom: "2px solid"
        // fontWeight: 'semibold'
      },
      darkOutline: {
        bg: "primary.1",
        color: "white",
        borderColor: "inkeepPrimary.medium",
        borderRadius: 3,
        borderBottom: "2px solid"
        // fontWeight: 'semibold'
      },
      light: {
        bg: "primary.1",
        // color: 'inkeepPrimary.textSubtle',
        // borderColor: 'inkeepPrimary.textSubtle',
        color: "inkeepPrimary.medium",
        borderColor: "inkeepPrimary.medium",
        // fontWeight: 'semibold',
        borderRadius: 3,
        borderBottom: "2px solid"
      },
      grayLight: {
        bg: "gray.400",
        height: "40px",
        padding: "2px 6px",
        color: "gray.600",
        borderColor: "gray.600",
        borderRadius: 3,
        borderBottom: "2px solid gray.700"
        // fontWeight: 'semibold'
      },
      outline: {
        boxShadow: "none"
      }
    }
  }
});

// src/recipes/modal.recipe.ts
import { defineSlotRecipe as defineSlotRecipe2 } from "@pandacss/dev";
import { chakraRecipes as chakraRecipes5 } from "@inkeep/preset-chakra";
var modalRecipe = defineSlotRecipe2({
  className: chakraRecipes5.modal.className,
  slots: chakraRecipes5.modal.slots,
  base: {
    backdrop: {
      _light: { bgColor: "rgb(104 112 118 / 50%)" },
      _dark: { bgColor: "rgb(136 144 150 / 50%)" },
      backdropFilter: "blur(3px)",
      // https://github.com/cschroeter/park-ui/blob/ff729b25267137a6e5a87a375fe8b647e148dd2b/packages/presets/src/theme/recipes/dialog.ts#L10
      _open: { animation: "backdrop-in" },
      _closed: { animation: "backdrop-out" }
    },
    content: {
      _dark: { bg: "grayDark.900" },
      //
      _open: { animation: "backdrop-in" },
      _closed: { animation: "backdrop-out" }
    }
  },
  variants: {
    // just to make TS happy, that variant exists in the chakra recipe
    isCentered: { true: {} },
    variant: {
      clickThrough: {
        container: {
          pointerEvents: "none",
          zIndex: "token(zIndex.modal) - 1"
          // in case there is a modal with overlay version we want this one to be underneath
        },
        content: {
          pointerEvents: "auto"
        }
      }
    }
  },
  defaultVariants: {
    isCentered: true
  }
});

// src/recipes/preview-content.recipe.ts
import { defineRecipe as defineRecipe6 } from "@pandacss/dev";
var previewContentHeaderRecipe = defineRecipe6({
  className: "preview-content-header",
  base: {
    _light: {
      color: "gray.700",
      "a:hover": {
        color: "inkeepPrimary.stronger"
      }
    },
    _dark: {
      color: "whiteAlpha.700",
      "a:hover": {
        color: "inkeepExpandedPrimary.100"
      }
    },
    "a:hover": {
      textDecoration: "none"
    }
  },
  variants: {
    variant: {
      title: {
        _light: {
          color: "inkeepPrimary.textSubtle",
          _hover: {
            color: "inkeepPrimary.stronger"
          }
        },
        _dark: {
          color: "inkeepPrimary.lighter",
          _hover: {
            color: "inkeepExpandedPrimary.100"
          }
        }
      },
      hitContentPreview: {
        _light: {
          color: "inkeepPrimary.hitContentPreview",
          "a:hover": {
            color: "inkeepPrimary.stronger"
          }
        },
        _dark: {
          color: "inkeepExpandedPrimary.300",
          "a:hover": {
            color: "inkeepExpandedPrimary.100"
          }
        }
      }
    }
  }
});

// src/recipes/search-bar-trigger.recipe.ts
import { defineSlotRecipe as defineSlotRecipe3 } from "@pandacss/dev";
var searchBarTriggerRecipe = defineSlotRecipe3({
  className: "search-bar-trigger",
  jsx: ["SearchBarTrigger", /SearchBarTriggerSlots\.+/],
  slots: ["container", "wrapper", "text", "kbd", "icon"],
  base: {
    container: {
      width: "100%",
      height: "100%",
      color: "gray.600 !important",
      background: "none",
      _dark: {
        borderColor: "grayDark.600",
        color: "whiteAlpha.500 !important",
        _hover: {
          bg: "inherit",
          color: "whiteAlpha.600 !important",
          borderColor: "grayDark.500",
          transition: "all .3s ease-in-out"
        }
      },
      _light: {
        _hover: {
          bg: "inherit"
        }
      },
      border: "1px solid",
      display: "flex",
      justifyContent: "space-between!",
      paddingX: 3,
      alignItems: "center",
      borderRadius: "md",
      flexGrow: 5,
      transition: "all .3s ease-in-out"
    },
    text: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      display: "inline-block",
      fontWeight: "normal",
      color: "inherit",
      mr: 4
    },
    kbd: {
      display: "flex",
      alignItems: "center",
      bg: "transparent !important",
      px: 2,
      py: 1,
      boxShadow: "none",
      borderColor: "chakra-border-color",
      color: "gray.600",
      _dark: {
        color: "whiteAlpha.600",
        borderColor: "whiteAlpha.300"
      }
    },
    icon: {
      width: 5
    }
  },
  variants: {
    size: {
      expand: {
        wrapper: {
          width: {
            base: "100%"
          },
          height: {
            base: "100%"
          }
        },
        container: {
          height: "100% !important"
        }
      },
      compact: {
        wrapper: {
          width: {
            md: "min( 340px , 100% )"
          },
          height: {
            md: "min( 40px , 100% )"
          }
        }
      },
      // shrinks to just icon on small screens
      shrink: {
        container: {
          px: {
            base: "2!",
            md: "3!"
          },
          height: {
            base: "9!"
          }
        },
        wrapper: {
          width: {
            md: "min(340px, 100%)"
          },
          height: {
            md: "min(36px, 100%)"
          }
        },
        icon: {
          width: {
            base: "5!",
            sm: "5!"
          },
          mr: {
            base: "0!",
            sm: "2!"
          }
        },
        kbd: {
          display: {
            base: "none",
            sm: "flex"
          }
        },
        text: {
          display: {
            base: "none",
            sm: "inline-block"
          }
        }
      },
      medium: {
        wrapper: {
          width: {
            md: "min( 500px , 100% )"
          },
          height: {
            md: "min( 3rem , 100% )"
          }
        },
        container: {
          height: "100% !important"
        }
      }
    },
    variant: {
      emphasized: {
        container: {
          _light: {
            borderColor: "gray.100",
            boxShadow: "sm",
            _hover: {
              boxShadow: "md",
              bg: "none !important"
            }
          },
          _dark: {
            _hover: {
              bg: "none !important"
            }
          }
        }
      },
      subtle: {
        container: {
          borderColor: "gray.300",
          color: "gray.500 !important",
          _hover: {
            borderColor: "gray.400",
            bg: "none !important"
          },
          _dark: {
            color: "whiteAlpha.500 !important",
            borderColor: "whiteAlpha.300",
            _hover: {
              borderColor: "whiteAlpha.400"
            }
          }
        },
        kbd: {
          border: "none",
          px: 0,
          color: "gray.500",
          _dark: {
            color: "whiteAlpha.500"
          }
        },
        icon: {
          width: "18px"
        }
      }
    }
  },
  defaultVariants: {
    size: "compact",
    variant: "subtle"
  }
});

// src/recipes/select.recipe.ts
import { chakraRecipes as chakraRecipes6 } from "@inkeep/preset-chakra";
import { defineSlotRecipe as defineSlotRecipe4 } from "@pandacss/dev";
var selectRecipe = defineSlotRecipe4({
  className: chakraRecipes6.select.className,
  slots: chakraRecipes6.select.slots,
  base: {
    root: {
      colorPalette: "gray",
      _dark: {
        colorPalette: "grayDark"
      }
    },
    content: {
      colorPalette: "gray",
      _dark: {
        colorPalette: "grayDark"
      }
    },
    positioner: {
      zIndex: "dropdown"
    }
  },
  variants: {
    variant: {
      ikpOutline: {
        trigger: {
          bg: { base: "white", _dark: "colorPalette.900" },
          borderWidth: "1px",
          _hover: {
            borderColor: { base: "gray.300", _dark: "whiteAlpha.400" }
          },
          _focus: {
            borderColor: {
              base: "colorPalette.200",
              _dark: "whiteAlpha.300"
            },
            boxShadow: "accent"
          }
        }
      }
    }
  }
});

// src/recipes/switch.recipe.ts
import { chakraRecipes as chakraRecipes7 } from "@inkeep/preset-chakra";
import { defineSlotRecipe as defineSlotRecipe5 } from "@pandacss/dev";
import { switchAnatomy } from "@ark-ui/anatomy";
var switchRecipe = defineSlotRecipe5({
  className: chakraRecipes7.switchRecipe.className,
  slots: switchAnatomy.keys(),
  variants: {
    size: {
      xss: {
        control: {
          width: "24px",
          height: "12px"
        },
        thumb: {
          width: "12px",
          height: "12px"
        }
      }
    }
  }
});

// src/recipes/tabs.recipe.ts
import { chakraRecipes as chakraRecipes8 } from "@inkeep/preset-chakra";
import { defineSlotRecipe as defineSlotRecipe6 } from "@pandacss/dev";
var tabsRecipe = defineSlotRecipe6({
  className: chakraRecipes8.tabs.className,
  slots: chakraRecipes8.tabs.slots,
  base: {
    indicator: {
      bgColor: "inkeepExpandedPrimary.600",
      _horizontal: {
        bottom: "-2px"
      }
    }
  }
});

// src/recipes/tooltip.recipe.ts
import { chakraRecipes as chakraRecipes9 } from "@inkeep/preset-chakra";
import { cssVariables } from "@inkeep/preset-chakra/vars";
import { defineSlotRecipe as defineSlotRecipe7 } from "@pandacss/dev";
var $arrowBg = cssVariables.tooltip["arrow-bg"];
var tooltipRecipe = defineSlotRecipe7({
  className: chakraRecipes9.tooltip.className,
  slots: chakraRecipes9.tooltip.slots,
  base: {
    content: {
      py: 2,
      px: 3,
      borderRadius: "md"
    }
  },
  variants: {
    variant: {
      default: {
        content: {
          fontWeight: "normal",
          _light: {
            bg: "white",
            // boxShadow: 'tooltipShadow',
            boxShadow: "0 8px 30px rgba(0, 0, 0, 0.12)",
            color: "gray.800",
            [$arrowBg.name]: "white"
          },
          _dark: {
            bg: "grayDark.800",
            color: "whiteAlpha.800",
            [$arrowBg.name]: "colors.grayDark.800"
          }
        }
      }
    }
  },
  defaultVariants: {
    variant: "default"
  }
});

// src/recipes.ts
var inkeepRecipes = {
  aiChatPageWrapper: aiChatPageWrapperRecipe,
  button: buttonRecipe,
  contentParser: contentParserRecipe,
  heading: headingRecipe,
  icon: iconRecipe,
  kbd: kbdRecipe,
  modal: modalRecipe,
  previewContentHeader: previewContentHeaderRecipe,
  searchBarTrigger: searchBarTriggerRecipe,
  select: selectRecipe,
  switchRecipe,
  tabs: tabsRecipe,
  tooltip: tooltipRecipe
};

// src/semantic-tokens.ts
import { wrapValue } from "@inkeep/shared";
import { defineSemanticTokens } from "@pandacss/dev";
var semanticTokens = defineSemanticTokens({
  colors: wrapValue(defaultColorScheme)
});

// src/text-styles.ts
import { defineTextStyles } from "@pandacss/dev";
var textStyles = defineTextStyles({
  // packages/widgets/src/themes/components/heading.tsx
  heading: {
    uppercase: {
      value: {
        textTransform: "uppercase",
        letterSpacing: "1px",
        fontWeight: "600"
      }
    }
  }
});

// src/conditions.ts
var conditions = {
  extend: {
    dark: '.dark &, [data-theme="dark"] &',
    light: '.light &, [data-theme="light"] &'
  }
};

// src/preset.ts
var breakpoints = {
  sm: "33em"
  // ~580px
};
var preset_default = definePreset({
  globalCss: globalStyles,
  conditions,
  theme: {
    extend: {
      breakpoints,
      tokens,
      semanticTokens,
      textStyles,
      recipes: inkeepRecipes
    }
  }
});
export {
  preset_default as default
};
