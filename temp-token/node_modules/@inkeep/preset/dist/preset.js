"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/preset.ts
var preset_exports = {};
__export(preset_exports, {
  default: () => preset_default
});
module.exports = __toCommonJS(preset_exports);
var import_dev18 = require("@pandacss/dev");

// src/global-styles.ts
var import_shared = require("@inkeep/shared");
var import_dev = require("@pandacss/dev");
var globalStyles = (0, import_dev.defineGlobalStyles)({
  // https://github.com/inkeep/widgets/blob/96cc1e97c3c6e5c76605f6c2298f65ff98fc07b7/old/widgets/src/themes/styles.ts
  [`${import_shared.defaultConfig.cssVarRoot} pre`]: {
    padding: 0,
    background: "transparent"
  },
  [import_shared.defaultConfig.cssVarRoot]: {
    // https://github.com/inkeep/widgets/blob/87ea3d4017a03c233a1ff56bd144d005a4c2ebe7/packages/widgets/src/components/InkeepInternalProviderWrappers.tsx
    fontFamily: "token(fonts.body, inherit)",
    color: { base: "gray.800", _dark: "whiteAlpha.900" },
    bg: { base: "white", _dark: "grayDark.900" },
    lineHeight: "base"
  },
  [`${import_shared.defaultConfig.cssVarRoot} *, *::before, &::after`]: {
    borderColor: { base: "gray.200", _dark: "whiteAlpha.300" }
  }
});

// src/recipes/ai-chat-page-wrapper.recipe.ts
var import_dev2 = require("@pandacss/dev");
var aiChatPageWrapperRecipe = (0, import_dev2.defineRecipe)({
  className: "ai-chat-page-wrapper",
  jsx: ["AIChatWrapper"],
  base: {
    maxHeight: {
      base: "100vh",
      md: "100vh"
    },
    maxWidth: {
      base: "100vw",
      md: "100vw"
    },
    position: "relative",
    flexGrow: {
      base: 5
    },
    mx: {
      base: "auto"
    },
    justifySelf: {
      base: "center"
    },
    textAlign: "left"
  },
  variants: {
    size: {
      expand: {
        width: {
          base: "100%"
        },
        height: {
          base: "100%"
        }
      },
      default: {
        width: {
          md: "min( 600px , 100% )",
          lg: "min( 640px , 100% )",
          "2xl": "min( 760px , 100% )"
        },
        maxWidth: {
          base: "100vw"
        },
        height: {
          md: "min( 760px , 100% )",
          lg: "min( 800px , 100% )",
          "2xl": "min( 900px , 100% )"
        },
        maxHeight: {
          base: "100vw"
        },
        margin: "auto",
        alignSelf: "center",
        justifySelf: "center",
        flexGrow: 0
      },
      // shrink: {
      // 	// best used with a fixed-width element. parent must be "display:flex" in order for height to be respected (no overflow)
      // 	width: 'auto',
      // 	height: 'min(auto, 100%)',
      // 	flexGrow: 0,
      // 	flexShrink: 2,
      // 	alignSelf: 'flex-start',
      // },
      "shrink-vertically": {
        width: {
          base: "100%",
          md: "100%"
        },
        height: "auto",
        alignSelf: "flex-start",
        maxHeight: "100%"
      },
      "full-viewport": {
        position: "fixed",
        top: "0",
        left: "0",
        zIndex: "1000",
        width: "100vw",
        height: "100vh"
      }
    },
    variant: {
      "no-shadow": {
        boxShadow: "none"
      },
      "container-with-shadow": {
        boxShadow: "2xl",
        _dark: {
          boxShadow: "none"
        }
      }
    }
  },
  defaultVariants: {
    size: "default",
    variant: "container-with-shadow"
  }
});

// src/recipes/button.recipe.ts
var import_preset_chakra = require("@inkeep/preset-chakra");
var import_dev3 = require("@pandacss/dev");
var outlineDarkColor = "inkeepPrimary.strong";
var outlineFillColor = outlineDarkColor;
var outlineBorderColor = outlineDarkColor;
var fillColor = "inkeepPrimary.medium";
var fillActiveColor = "inkeepPrimary.medium";
var buttonRecipe = (0, import_dev3.defineRecipe)({
  className: import_preset_chakra.chakraRecipes.button.className,
  variants: {
    variant: {
      // TODO should this be defined as an implicit compoundVariant
      // or is it ok when explicitly used ?
      outlinePrimary: {
        border: "1px solid",
        _light: {
          color: "inkeepPrimary.strong",
          borderColor: "inkeepExpandedPrimary.200",
          _hover: {
            bg: "inkeepPrimary.lightSubtle",
            color: "inkeepPrimary.strong"
          }
        },
        _dark: {
          color: "inkeepExpandedPrimary.300",
          _hover: {
            bg: "whiteAlpha.200",
            color: "inkeepExpandedPrimary.200"
          }
        }
      },
      none: {
        // this is used for multi part slot components that include a button, without this the chakra default button recipes were taking precedence
      },
      outlineFilled: {
        bg: "white",
        border: "1px solid",
        borderColor: outlineBorderColor,
        color: outlineBorderColor,
        // borderColor: 'inkeepPrimary.textSubtle',
        // color: 'inkeepPrimary.textSubtle',
        _hover: {
          bg: outlineFillColor,
          color: "white"
        },
        _active: {
          bg: outlineFillColor
        }
      },
      outlineFilledActive: {
        bg: outlineFillColor,
        color: "white"
      },
      chatButton: {
        bg: "inkeepPrimary.textBold",
        boxShadow: "2xl",
        borderRadius: "lg",
        color: "white",
        fontWeight: "medium",
        _dark: {
          bg: "grayDark.600",
          boxShadow: "none"
        }
      },
      filledCTA: {
        bg: fillColor,
        color: "white",
        border: "none",
        borderRadius: "80px",
        _hover: {
          bg: fillActiveColor
        },
        _active: {
          bg: fillActiveColor
        }
      },
      primaryFilled: {
        bg: "inkeepPrimary.medium",
        color: "inkeepPrimary.textColorOnPrimary",
        _hover: {
          bg: "inkeepPrimary.strong"
        },
        _active: {
          bg: "inkeepPrimary.strong"
        }
      },
      neutralFilled: {
        bg: "gray.900",
        color: "white",
        _hover: {
          bg: "gray.800"
        },
        _active: {
          bg: "gray.800"
        },
        _dark: {
          bg: "inkeepExpandedPrimary.300",
          color: "grayDark.900",
          _hover: {
            bg: "inkeepExpandedPrimary.200"
          },
          _active: {
            bg: "inkeepExpandedPrimary.200"
          }
        }
      },
      outline: {
        _light: {
          color: "gray.700",
          _hover: {
            color: "gray.800"
          }
        },
        _dark: {
          color: "whiteAlpha.700",
          _hover: {
            color: "whiteAlpha.800",
            bg: "whiteAlpha.200"
          }
        }
      },
      iconButton: {
        background: "transparent",
        borderRadius: "0",
        px: 1,
        color: "gray.600",
        _hover: {
          color: "inkeepPrimary.stronger",
          background: "transparent"
        },
        _dark: {
          color: "whiteAlpha.600",
          _hover: {
            color: "inkeepExpandedPrimary.300"
          }
        }
      }
    },
    size: {
      none: {
        // this is used for multi part slot components that include a button, without this the chakra default button recipes were taking precedence
      }
    }
  }
});

// src/recipes/content-parser.recipe.ts
var import_dev4 = require("@pandacss/dev");
var contentParserRecipe = (0, import_dev4.defineSlotRecipe)({
  className: "content-parser",
  slots: [
    "span",
    "sup",
    "text",
    "ol",
    "ul",
    "li",
    "image",
    "link",
    "table",
    "thead",
    "tbody",
    "tr",
    "th",
    "td",
    "code",
    "heading"
  ],
  base: {
    sup: {
      marginLeft: "3px",
      cursor: "pointer",
      a: {
        background: "inkeepPrimary.light",
        px: "4px",
        py: "1px",
        borderRadius: "base",
        textDecoration: "none",
        color: "inkeepPrimary.textSubtle",
        fontWeight: "semibold"
      }
    },
    text: {
      marginBottom: "12px",
      overflowWrap: "break-word",
      whiteSpace: "pre-wrap",
      " + ol": {
        marginTop: "0px"
      },
      "+ li": {
        marginTop: "0px"
      }
    },
    ol: {
      overflowWrap: "break-word",
      paddingBottom: 3,
      paddingLeft: 7,
      position: "relative",
      li: {
        marginBottom: 1,
        counterIncrement: "item",
        "a": {
          display: "inline !important",
          overflowWrap: "break-word"
        }
      }
    },
    ul: {
      overflowWrap: "break-word",
      paddingBottom: 3,
      paddingLeft: 7,
      position: "relative",
      li: {
        marginBottom: 1,
        _before: {
          marginRight: 2
        },
        a: {
          display: "inline !important",
          overflowWrap: "break-word"
        }
      }
    },
    image: {
      objectFit: "cover",
      width: "100%",
      height: "auto"
    },
    link: {
      overflowWrap: "break-word",
      wordWrap: "break-word",
      textDecoration: "underline",
      display: "inline",
      _light: {
        color: "inkeepPrimary.stronger",
        _hover: {
          color: "inkeepPrimary.strong"
        }
      },
      _dark: {
        color: "inkeepExpandedPrimary.100",
        _hover: {
          color: "inkeepExpandedPrimary.300"
        }
      }
    },
    code: {
      overflowWrap: "anywhere",
      minWidth: "0",
      py: ".2rem",
      // changed from 0.1rem, not sure why it's different ?
      my: ".1rem",
      px: ".4rem!",
      borderRadius: "6px!",
      fontSize: "85%!",
      color: "inkeepPrimary.textColorOnPrimary",
      backgroundColor: "inkeepPrimary.medium",
      fontWeight: "semibold",
      display: "inline-block"
    }
  }
});

// src/recipes/heading.recipe.ts
var import_preset_chakra2 = require("@inkeep/preset-chakra");
var import_dev5 = require("@pandacss/dev");
var headingRecipe = (0, import_dev5.defineRecipe)({
  className: import_preset_chakra2.chakraRecipes.heading.className,
  jsx: ["Heading", "PreviewContentHeader"],
  variants: {
    uppercase: {
      true: {
        textStyle: "heading.uppercase",
        color: "gray.600"
      }
    }
  }
});

// src/recipes/icon.recipe.ts
var import_preset_chakra3 = require("@inkeep/preset-chakra");
var import_dev6 = require("@pandacss/dev");
var iconRecipe = (0, import_dev6.defineRecipe)({
  className: import_preset_chakra3.chakraRecipes.icon.className,
  variants: {
    variant: {
      dark: {
        color: "white"
      },
      lightPrimary: {
        color: "inkeepPrimary.textSubtle"
      },
      light: {
        color: "gray.600"
      }
    }
  }
});

// src/recipes/kbd.recipe.ts
var import_preset_chakra4 = require("@inkeep/preset-chakra");
var import_dev7 = require("@pandacss/dev");
var kbdRecipe = (0, import_dev7.defineRecipe)({
  className: import_preset_chakra4.chakraRecipes.kbd.className,
  variants: {
    variant: {
      dark: {
        bg: "primaryDark.9",
        color: "white",
        borderColor: "primaryDark.6",
        borderRadius: 3,
        borderBottom: "2px solid"
        // fontWeight: 'semibold'
      },
      darkOutline: {
        bg: "primary.1",
        color: "white",
        borderColor: "inkeepPrimary.medium",
        borderRadius: 3,
        borderBottom: "2px solid"
        // fontWeight: 'semibold'
      },
      light: {
        bg: "primary.1",
        // color: 'inkeepPrimary.textSubtle',
        // borderColor: 'inkeepPrimary.textSubtle',
        color: "inkeepPrimary.medium",
        borderColor: "inkeepPrimary.medium",
        // fontWeight: 'semibold',
        borderRadius: 3,
        borderBottom: "2px solid"
      },
      grayLight: {
        bg: "gray.400",
        height: "40px",
        padding: "2px 6px",
        color: "gray.600",
        borderColor: "gray.600",
        borderRadius: 3,
        borderBottom: "2px solid gray.700"
        // fontWeight: 'semibold'
      },
      outline: {
        boxShadow: "none"
      }
    }
  }
});

// src/recipes/modal.recipe.ts
var import_dev8 = require("@pandacss/dev");
var import_preset_chakra5 = require("@inkeep/preset-chakra");
var modalRecipe = (0, import_dev8.defineSlotRecipe)({
  className: import_preset_chakra5.chakraRecipes.modal.className,
  slots: import_preset_chakra5.chakraRecipes.modal.slots,
  base: {
    backdrop: {
      _light: { bgColor: "rgb(104 112 118 / 50%)" },
      _dark: { bgColor: "rgb(136 144 150 / 50%)" },
      backdropFilter: "blur(3px)",
      // https://github.com/cschroeter/park-ui/blob/ff729b25267137a6e5a87a375fe8b647e148dd2b/packages/presets/src/theme/recipes/dialog.ts#L10
      _open: { animation: "backdrop-in" },
      _closed: { animation: "backdrop-out" }
    },
    content: {
      _dark: { bg: "grayDark.900" },
      //
      _open: { animation: "backdrop-in" },
      _closed: { animation: "backdrop-out" }
    }
  },
  variants: {
    // just to make TS happy, that variant exists in the chakra recipe
    isCentered: { true: {} },
    variant: {
      clickThrough: {
        container: {
          pointerEvents: "none",
          zIndex: "token(zIndex.modal) - 1"
          // in case there is a modal with overlay version we want this one to be underneath
        },
        content: {
          pointerEvents: "auto"
        }
      }
    }
  },
  defaultVariants: {
    isCentered: true
  }
});

// src/recipes/preview-content.recipe.ts
var import_dev9 = require("@pandacss/dev");
var previewContentHeaderRecipe = (0, import_dev9.defineRecipe)({
  className: "preview-content-header",
  base: {
    _light: {
      color: "gray.700",
      "a:hover": {
        color: "inkeepPrimary.stronger"
      }
    },
    _dark: {
      color: "whiteAlpha.700",
      "a:hover": {
        color: "inkeepExpandedPrimary.100"
      }
    },
    "a:hover": {
      textDecoration: "none"
    }
  },
  variants: {
    variant: {
      title: {
        _light: {
          color: "inkeepPrimary.textSubtle",
          _hover: {
            color: "inkeepPrimary.stronger"
          }
        },
        _dark: {
          color: "inkeepPrimary.lighter",
          _hover: {
            color: "inkeepExpandedPrimary.100"
          }
        }
      },
      hitContentPreview: {
        _light: {
          color: "inkeepPrimary.hitContentPreview",
          "a:hover": {
            color: "inkeepPrimary.stronger"
          }
        },
        _dark: {
          color: "inkeepExpandedPrimary.300",
          "a:hover": {
            color: "inkeepExpandedPrimary.100"
          }
        }
      }
    }
  }
});

// src/recipes/search-bar-trigger.recipe.ts
var import_dev10 = require("@pandacss/dev");
var searchBarTriggerRecipe = (0, import_dev10.defineSlotRecipe)({
  className: "search-bar-trigger",
  jsx: ["SearchBarTrigger", /SearchBarTriggerSlots\.+/],
  slots: ["container", "wrapper", "text", "kbd", "icon"],
  base: {
    container: {
      width: "100%",
      height: "100%",
      color: "gray.600 !important",
      background: "none",
      _dark: {
        borderColor: "grayDark.600",
        color: "whiteAlpha.500 !important",
        _hover: {
          bg: "inherit",
          color: "whiteAlpha.600 !important",
          borderColor: "grayDark.500",
          transition: "all .3s ease-in-out"
        }
      },
      _light: {
        _hover: {
          bg: "inherit"
        }
      },
      border: "1px solid",
      display: "flex",
      justifyContent: "space-between!",
      paddingX: 3,
      alignItems: "center",
      borderRadius: "md",
      flexGrow: 5,
      transition: "all .3s ease-in-out"
    },
    text: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      display: "inline-block",
      fontWeight: "normal",
      color: "inherit",
      mr: 4
    },
    kbd: {
      display: "flex",
      alignItems: "center",
      bg: "transparent !important",
      px: 2,
      py: 1,
      boxShadow: "none",
      borderColor: "chakra-border-color",
      color: "gray.600",
      _dark: {
        color: "whiteAlpha.600",
        borderColor: "whiteAlpha.300"
      }
    },
    icon: {
      width: 5
    }
  },
  variants: {
    size: {
      expand: {
        wrapper: {
          width: {
            base: "100%"
          },
          height: {
            base: "100%"
          }
        },
        container: {
          height: "100% !important"
        }
      },
      compact: {
        wrapper: {
          width: {
            md: "min( 340px , 100% )"
          },
          height: {
            md: "min( 40px , 100% )"
          }
        }
      },
      // shrinks to just icon on small screens
      shrink: {
        container: {
          px: {
            base: "2!",
            md: "3!"
          },
          height: {
            base: "9!"
          }
        },
        wrapper: {
          width: {
            md: "min(340px, 100%)"
          },
          height: {
            md: "min(36px, 100%)"
          }
        },
        icon: {
          width: {
            base: "5!",
            sm: "5!"
          },
          mr: {
            base: "0!",
            sm: "2!"
          }
        },
        kbd: {
          display: {
            base: "none",
            sm: "flex"
          }
        },
        text: {
          display: {
            base: "none",
            sm: "inline-block"
          }
        }
      },
      medium: {
        wrapper: {
          width: {
            md: "min( 500px , 100% )"
          },
          height: {
            md: "min( 3rem , 100% )"
          }
        },
        container: {
          height: "100% !important"
        }
      }
    },
    variant: {
      emphasized: {
        container: {
          _light: {
            borderColor: "gray.100",
            boxShadow: "sm",
            _hover: {
              boxShadow: "md",
              bg: "none !important"
            }
          },
          _dark: {
            _hover: {
              bg: "none !important"
            }
          }
        }
      },
      subtle: {
        container: {
          borderColor: "gray.300",
          color: "gray.500 !important",
          _hover: {
            borderColor: "gray.400",
            bg: "none !important"
          },
          _dark: {
            color: "whiteAlpha.500 !important",
            borderColor: "whiteAlpha.300",
            _hover: {
              borderColor: "whiteAlpha.400"
            }
          }
        },
        kbd: {
          border: "none",
          px: 0,
          color: "gray.500",
          _dark: {
            color: "whiteAlpha.500"
          }
        },
        icon: {
          width: "18px"
        }
      }
    }
  },
  defaultVariants: {
    size: "compact",
    variant: "subtle"
  }
});

// src/recipes/select.recipe.ts
var import_preset_chakra6 = require("@inkeep/preset-chakra");
var import_dev11 = require("@pandacss/dev");
var selectRecipe = (0, import_dev11.defineSlotRecipe)({
  className: import_preset_chakra6.chakraRecipes.select.className,
  slots: import_preset_chakra6.chakraRecipes.select.slots,
  base: {
    root: {
      colorPalette: "gray",
      _dark: {
        colorPalette: "grayDark"
      }
    },
    content: {
      colorPalette: "gray",
      _dark: {
        colorPalette: "grayDark"
      }
    },
    positioner: {
      zIndex: "dropdown"
    }
  },
  variants: {
    variant: {
      ikpOutline: {
        trigger: {
          bg: { base: "white", _dark: "colorPalette.900" },
          borderWidth: "1px",
          _hover: {
            borderColor: { base: "gray.300", _dark: "whiteAlpha.400" }
          },
          _focus: {
            borderColor: {
              base: "colorPalette.200",
              _dark: "whiteAlpha.300"
            },
            boxShadow: "accent"
          }
        }
      }
    }
  }
});

// src/recipes/switch.recipe.ts
var import_preset_chakra7 = require("@inkeep/preset-chakra");
var import_dev12 = require("@pandacss/dev");
var import_anatomy = require("@ark-ui/anatomy");
var switchRecipe = (0, import_dev12.defineSlotRecipe)({
  className: import_preset_chakra7.chakraRecipes.switchRecipe.className,
  slots: import_anatomy.switchAnatomy.keys(),
  variants: {
    size: {
      xss: {
        control: {
          width: "24px",
          height: "12px"
        },
        thumb: {
          width: "12px",
          height: "12px"
        }
      }
    }
  }
});

// src/recipes/tabs.recipe.ts
var import_preset_chakra8 = require("@inkeep/preset-chakra");
var import_dev13 = require("@pandacss/dev");
var tabsRecipe = (0, import_dev13.defineSlotRecipe)({
  className: import_preset_chakra8.chakraRecipes.tabs.className,
  slots: import_preset_chakra8.chakraRecipes.tabs.slots,
  base: {
    indicator: {
      bgColor: "inkeepExpandedPrimary.600",
      _horizontal: {
        bottom: "-2px"
      }
    }
  }
});

// src/recipes/tooltip.recipe.ts
var import_preset_chakra9 = require("@inkeep/preset-chakra");
var import_vars = require("@inkeep/preset-chakra/vars");
var import_dev14 = require("@pandacss/dev");
var $arrowBg = import_vars.cssVariables.tooltip["arrow-bg"];
var tooltipRecipe = (0, import_dev14.defineSlotRecipe)({
  className: import_preset_chakra9.chakraRecipes.tooltip.className,
  slots: import_preset_chakra9.chakraRecipes.tooltip.slots,
  base: {
    content: {
      py: 2,
      px: 3,
      borderRadius: "md"
    }
  },
  variants: {
    variant: {
      default: {
        content: {
          fontWeight: "normal",
          _light: {
            bg: "white",
            // boxShadow: 'tooltipShadow',
            boxShadow: "0 8px 30px rgba(0, 0, 0, 0.12)",
            color: "gray.800",
            [$arrowBg.name]: "white"
          },
          _dark: {
            bg: "grayDark.800",
            color: "whiteAlpha.800",
            [$arrowBg.name]: "colors.grayDark.800"
          }
        }
      }
    }
  },
  defaultVariants: {
    variant: "default"
  }
});

// src/recipes.ts
var inkeepRecipes = {
  aiChatPageWrapper: aiChatPageWrapperRecipe,
  button: buttonRecipe,
  contentParser: contentParserRecipe,
  heading: headingRecipe,
  icon: iconRecipe,
  kbd: kbdRecipe,
  modal: modalRecipe,
  previewContentHeader: previewContentHeaderRecipe,
  searchBarTrigger: searchBarTriggerRecipe,
  select: selectRecipe,
  switchRecipe,
  tabs: tabsRecipe,
  tooltip: tooltipRecipe
};

// src/semantic-tokens.ts
var import_shared2 = require("@inkeep/shared");
var import_dev16 = require("@pandacss/dev");

// src/color-scheme.ts
var import_colorjs = __toESM(require("colorjs.io"));

// src/color-utils.ts
function getRGB(c) {
  return Number.parseInt(c, 16) || 0;
}
function getsRGB(c) {
  return getRGB(c) / 255 <= 0.03928 ? getRGB(c) / 255 / 12.92 : ((getRGB(c) / 255 + 0.055) / 1.055) ** 2.4;
}
function getLuminance(hexColor) {
  return 0.2126 * getsRGB(hexColor.slice(1, 3)) + 0.7152 * getsRGB(hexColor.slice(3, 5)) + 0.0722 * getsRGB(hexColor.slice(-2));
}
function getContrast(bgColor, textColor) {
  const L1 = getLuminance(bgColor);
  const L2 = getLuminance(textColor);
  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);
}
function getTextColorBasedOnBgColor(bgColor, lightColor, darkColor) {
  const whiteContrast = getContrast(bgColor, lightColor);
  const blackContrast = getContrast(bgColor, darkColor);
  return whiteContrast > blackContrast ? lightColor : darkColor;
}

// src/tokens.ts
var import_dev15 = require("@pandacss/dev");
var animations = import_dev15.defineTokens.animations({
  "backdrop-in": {
    value: "fade-in 250ms {easings.default}"
  },
  "backdrop-out": {
    value: "fade-out 200ms {easings.default}"
  },
  "dialog-in": {
    value: "slide-in 400ms {easings.emphasized-in}"
  },
  "dialog-out": {
    value: "slide-out 200ms {easings.emphasized-out}"
  }
});
var tokens = (0, import_dev15.defineTokens)({
  colors: {
    gray: {
      // CURRENT, LOOSELY BASED OFF RADIX SLATE GRAY
      "50": { value: "#f8f9fa" },
      // slate }2
      "100": { value: "#f1f3f5" },
      // slate }3
      "200": { value: "#eceef0" },
      // slate }4
      "300": { value: "#e6e8eb" },
      // slate }5
      "400": { value: "#dfe3e6" },
      // slate }6
      "500": { value: "#BDC2C7" },
      // did not match the slate gra }y
      "600": { value: "#889096" },
      // slate }9
      "700": { value: "#687076" },
      // slate1 }1
      "800": { value: "#36424A" },
      // did not match the slate gra }y
      "900": { value: "#11181c" }
      // slate1 }2
    },
    // alphas based off of grays
    grayAlpha: {
      "50": { value: "rgba(22, 56, 90, 0.03)" },
      "100": { value: "rgba(22, 56, 90, 0.06)" },
      "200": { value: "rgba(18, 43, 68, 0.08)" },
      "300": { value: "rgba(5, 26, 56, 0.1)" },
      "400": { value: "rgba(9, 39, 62, 0.13)" },
      "500": { value: "rgba(1, 20, 40, 0.26)" },
      "600": { value: "rgba(2, 20, 34, 0.47)" },
      "700": { value: "rgba(3, 17, 28, 0.6)" },
      "800": { value: "rgba(1, 15, 25, 0.79)" },
      "900": { value: "rgba(2, 9, 13, 0.94)" }
    },
    // radix neutral gray for dark mode ('grayDark')
    grayDark: {
      // '900': { value: '#161616' },
      "900": { value: "#1c1c1c" },
      // '800': { value: '#0b0a0a' },
      "800": { value: "#282828" },
      "700": { value: "#2e2e2e" },
      "600": { value: "#343434" },
      "500": { value: "#3e3e3e" },
      "400": { value: "#505050" },
      "300": { value: "#707070" },
      "200": { value: "#7e7e7e" },
      "100": { value: "#a0a0a0" },
      "50": { value: "#ededed" }
    }
  },
  fonts: {
    body: {
      value: "'Inter', sans-serif"
    },
    heading: {
      value: "'Inter', sans-serif"
    }
  },
  // https://github.com/cschroeter/park-ui/blob/ff729b25267137a6e5a87a375fe8b647e148dd2b/packages/presets/src/theme/tokens/animations.ts
  easings: {
    default: { value: "cubic-bezier(0.2, 0.0, 0, 1.0)" },
    "emphasized-in": { value: "cubic-bezier(0.05, 0.7, 0.1, 1.0)" },
    "emphasized-out": { value: "cubic-bezier(0.3, 0.0, 0.8, 0.15)" }
  },
  animations: {
    "backdrop-in": {
      value: "fade-in 250ms {easings.default}"
    },
    "backdrop-out": {
      value: "fade-out 200ms {easings.default}"
    },
    "dialog-in": {
      value: "slide-in 400ms {easings.emphasized-in}"
    },
    "dialog-out": {
      value: "slide-out 200ms {easings.emphasized-out}"
    }
  },
  // packages/widgets/src/themes/index.ts
  durations: {
    faster: { value: "100ms" },
    fast: { value: "180ms" },
    medium: { value: "300ms" },
    slow: { value: "500ms" }
  },
  shadows: {
    outline: { value: "none" },
    boxShadow: { value: "none" },
    tooltipShadow: { value: "0 8px 30px rgba(0, 0, 0, 0.12)" }
  }
});

// src/color-scheme.ts
var primaryBrandColor = "#000000";
function colorToString(color) {
  return color.to("srgb").toString({ format: "hex" });
}
function interpolateColors(color1, color2, percentage) {
  const c1 = color1.lch;
  const c2 = color2.lch;
  const l = c1.l + (c2.l - c1.l) * percentage;
  const c = c1.c + (c2.c - c1.c) * percentage;
  const h = c1.h + (c2.h - c1.h) * percentage;
  return new import_colorjs.default("lch", [l, c, h]);
}
function lchToRgb(color) {
  return color.to("srgb");
}
var mainColor = new import_colorjs.default(primaryBrandColor);
var createColorDict = (color) => {
  const primary = color instanceof import_colorjs.default ? color : new import_colorjs.default(color);
  const lightSubtleChroma = primary.lch.c < 3 ? primary.lch.c : 3;
  const textSubtleChroma = primary.lch.c < 10 ? primary.lch.c : 10;
  const textBoldChroma = primary.lch.c < 5 ? primary.lch.c : 5;
  return {
    textBold: new import_colorjs.default("lch", [10, textBoldChroma, primary.lch.h]),
    textSubtle: new import_colorjs.default("lch", [30, textSubtleChroma, primary.lch.h]),
    lighter: new import_colorjs.default("lch", [98, primary.lch.c * 1.2, primary.lch.h * 0.96]),
    light: new import_colorjs.default("lch", [89, primary.lch.c * 1.2, primary.lch.h * 0.96]),
    lightSubtle: new import_colorjs.default("lch", [
      98,
      lightSubtleChroma,
      primary.lch.h * 0.98
    ]),
    medium: primary,
    mediumSubtle: new import_colorjs.default("lch", [
      primary.lch.l * 0.5,
      primary.lch.c,
      primary.lch.h
    ], 0.3),
    strong: new import_colorjs.default("lch", [
      primary.lch.l * 0.85,
      primary.lch.c,
      primary.lch.h
    ]),
    stronger: new import_colorjs.default("lch", [
      primary.lch.l * 0.5,
      primary.lch.c,
      primary.lch.h
    ])
  };
};
var defaultColorDict = createColorDict(mainColor);
var createColorScheme = (userScheme, primaryColor) => {
  const merged = Object.assign(
    {},
    primaryColor ? createColorDict(primaryColor) : defaultColorDict,
    userScheme
  );
  Object.keys(merged).forEach((key) => {
    if (merged[key] instanceof import_colorjs.default) {
      return;
    }
    merged[key] = new import_colorjs.default(merged[key]);
  });
  const scheme = Object.assign(
    {
      hitContentPreview: merged.strong,
      hitContentPreviewHover: merged.stronger
    },
    merged
  );
  const userProvidedAutoGenColorSchemeJSToString = Object.keys(scheme).reduce((acc, key) => {
    acc[key] = scheme[key].to("srgb").toString({ format: "hex" });
    return acc;
  }, {});
  const primary = {
    "50": colorToString(lchToRgb(scheme.lighter)),
    "100": colorToString(
      lchToRgb(interpolateColors(scheme.lighter, scheme.light, 0.5))
    ),
    "200": colorToString(lchToRgb(scheme.light)),
    "300": colorToString(
      lchToRgb(interpolateColors(scheme.light, scheme.medium, 0.5))
    ),
    "400": colorToString(
      lchToRgb(interpolateColors(scheme.light, scheme.medium, 0.75))
    ),
    "500": colorToString(lchToRgb(scheme.medium)),
    "600": colorToString(
      lchToRgb(interpolateColors(scheme.medium, scheme.strong, 0.75))
    ),
    "700": colorToString(lchToRgb(scheme.strong)),
    "800": colorToString(
      lchToRgb(interpolateColors(scheme.strong, scheme.stronger, 0.5))
    ),
    "900": colorToString(lchToRgb(scheme.stronger))
  };
  const textColorOnPrimary = userProvidedAutoGenColorSchemeJSToString.textColorOnPrimary || getTextColorBasedOnBgColor(
    userProvidedAutoGenColorSchemeJSToString.medium,
    "#ffffff",
    tokens.colors.gray["900"].value
  );
  const newColors = {
    inkeepPrimary: {
      ...userProvidedAutoGenColorSchemeJSToString,
      textColorOnPrimary
    },
    inkeepExpandedPrimary: primary
  };
  return newColors;
};
var defaultColorScheme = createColorScheme(defaultColorDict);

// src/semantic-tokens.ts
var semanticTokens = (0, import_dev16.defineSemanticTokens)({
  colors: (0, import_shared2.wrapValue)(defaultColorScheme)
});

// src/text-styles.ts
var import_dev17 = require("@pandacss/dev");
var textStyles = (0, import_dev17.defineTextStyles)({
  // packages/widgets/src/themes/components/heading.tsx
  heading: {
    uppercase: {
      value: {
        textTransform: "uppercase",
        letterSpacing: "1px",
        fontWeight: "600"
      }
    }
  }
});

// src/conditions.ts
var conditions = {
  extend: {
    dark: '.dark &, [data-theme="dark"] &',
    light: '.light &, [data-theme="light"] &'
  }
};

// src/preset.ts
var breakpoints = {
  sm: "33em"
  // ~580px
};
var preset_default = (0, import_dev18.definePreset)({
  globalCss: globalStyles,
  conditions,
  theme: {
    extend: {
      breakpoints,
      tokens,
      semanticTokens,
      textStyles,
      recipes: inkeepRecipes
    }
  }
});
