import Color from 'colorjs.io';

declare const getColorSchemeVars: (colorDict?: UserProvidedColorScheme, prefix?: string) => Record<"--colors-medium" | "--colors-light" | "--colors-lighter" | "--colors-hitContentPreview" | "--colors-textBold" | "--colors-textSubtle" | "--colors-lightSubtle" | "--colors-mediumSubtle" | "--colors-strong" | "--colors-stronger" | "--colors-hitContentPreviewHover" | "--colors-textColorOnPrimary", string>;

type ColorDict = Record<string, Color>;
declare const createColorDict: (color: Color | string) => Record<string, Color>;
interface UserProvidedColorScheme {
    textBold?: Color | string;
    textSubtle?: Color | string;
    lighter?: Color | string;
    light?: Color | string;
    lightSubtle?: Color | string;
    medium?: Color | string;
    mediumSubtle?: Color | string;
    strong?: Color | string;
    stronger?: Color | string;
    hitContentPreview?: Color | string;
    hitContentPreviewHover?: Color | string;
    textColorOnPrimary?: Color | string;
}
declare const createColorScheme: (userScheme?: UserProvidedColorScheme, primaryColor?: Color | string) => InkeepColorScheme;
interface InkeepColorScheme {
    inkeepPrimary: {
        textColorOnPrimary: string;
    };
    inkeepExpandedPrimary: {
        '50': string;
        '100': string;
        '200': string;
        '300': string;
        '400': string;
        '500': string;
        '600': string;
        '700': string;
        '800': string;
        '900': string;
    };
}
declare const defaultColorScheme: InkeepColorScheme;

export { type ColorDict, type InkeepColorScheme, type UserProvidedColorScheme, createColorDict, createColorScheme, defaultColorScheme, getColorSchemeVars };
