import { PropertyTransform, StaticCssOptions } from '@pandacss/types';

type CssVar<Name extends string> = {
    name: `--${Name}`;
    ref: `var(--${Name})`;
};
type ToCssVar<Cat extends string, T extends string> = `--${Cat}-${T}`;
declare function defineCssVars<K extends string>(scope: string, keys: Array<K | [K, string]>): { [Var in K]: CssVar<Var>; };
declare const cssVar: {
    ref: <Value extends string>(value: Value, fallback?: string) => `var(--${Value}${string})`;
    name: <Value_1 extends string>(value: Value_1) => `--${Value_1}`;
    create: <Value_2 extends string>(value: Value_2, fallback?: string) => CssVar<Value_2>;
    scope: typeof defineCssVars;
};

declare const colorMix: (...args: Parameters<PropertyTransform>) => {
    color: string;
    amount: string | number;
    value: string;
};
/**
 * @example tokenValue: `colorPalette.200` = `var(--colors-color-palette-200)`
 * @example tokenValue: `colorPalette.200/16` = `color-mix(in srgb, transparent var(--colors-color-palette-200)`
 */
declare const colorMixVar: (tokenValue: string, fallbackVar: CssVar<string>) => {
    ref: `var(--colors-${string})`;
    colorMixValue: `color-mix(in srgb, transparent ${number}%, var(--colors-${string}))`;
    value: `var(--${string}, var(--colors-${string}))`;
    fallbackVar: CssVar<string>;
};

type Operand = string | number | CssVar<string>;
type Operands = Operand[];
interface CalcChain {
    add: (...operands: Operands) => CalcChain;
    subtract: (...operands: Operands) => CalcChain;
    multiply: (...operands: Operands) => CalcChain;
    divide: (...operands: Operands) => CalcChain;
    negate: () => CalcChain;
    toString: () => string;
}
declare const calc: ((x: Operand) => CalcChain) & {
    add: (...operands: Operands) => string;
    subtract: (...operands: Operands) => string;
    multiply: (...operands: Operands) => string;
    divide: (...operands: Operands) => string;
    negate: (x: Operand) => string;
};

declare const prefix = "ikp";
declare const defaultConfig: {
    themeVarsClass: string;
    prefix: string;
    cssVarRoot: string;
    extendCssVarRoot: (root: string) => string;
    staticCss: StaticCssOptions;
    presets: string[];
};

type AnyRecord = Record<string, any>;
type CallbackFn = (key: string, value: AnyRecord, path: string) => void;
declare function traverse(obj: AnyRecord, callback: CallbackFn, options?: {
    separator: string;
}, path?: string): void;

type PreferRight<BaseProps, OverrideProps> = Omit<BaseProps, keyof OverrideProps> & OverrideProps;

declare function dashCase(string: string): string;
declare const ariaAttr: (condition: boolean | undefined) => true | undefined;
type Booleanish = boolean | 'true' | 'false';
declare const dataAttr: (condition: boolean | undefined) => Booleanish;
type Args<T extends Function> = T extends (...args: infer R) => any ? R : never;
declare function callAllHandlers<T extends (event: any) => void>(...fns: (T | undefined)[]): (event: Args<T>[0]) => void;
declare function getInitials(name: string): string;

/**
 * Recursively wraps each value in a { value: xxx } object
 */
declare const wrapValue: (obj: Record<string, any>) => Record<string, any>;

export { type CalcChain, type CssVar, type Operand, type PreferRight, type ToCssVar, ariaAttr, calc, callAllHandlers, colorMix, colorMixVar, cssVar, dashCase, dataAttr, defaultConfig, getInitials, prefix, traverse, wrapValue };
