// src/css-var.ts
var cssVarRef = (value, fallback) => `var(--${value}${fallback ? ", " + fallback : ""})`;
var cssVarName = (value) => `--${value}`;
var createCssVar = (value, fallback) => ({
  name: cssVarName(value),
  ref: cssVarRef(value, fallback)
});
function defineCssVars(scope, keys) {
  const vars = {};
  for (const key of keys) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars[name] = cssVar.create(`${scope}-${name}`, fallback);
      continue;
    }
    vars[key] = cssVar.create(`${scope}-${key}`);
  }
  return vars;
}
var cssVar = {
  ref: cssVarRef,
  name: cssVarName,
  create: createCssVar,
  scope: defineCssVars
};

// src/utils.ts
var dashCaseRegex = /[A-Z]/g;
function dashCase(string) {
  return string.replace(dashCaseRegex, (match) => `-${match.toLowerCase()}`);
}
var ariaAttr = (condition) => condition ? true : void 0;
var dataAttr = (condition) => condition ? "" : void 0;
function callAllHandlers(...fns) {
  return function func(event) {
    fns.some((fn) => {
      fn?.(event);
      return event?.defaultPrevented;
    });
  };
}
function getInitials(name) {
  const names = name.split(" ");
  const firstName = names[0] ?? "";
  const lastName = names.length > 1 ? names[names.length - 1] : "";
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}

// src/color-mix.ts
var colorMix = (value, { token }) => {
  const [color, opacityAmount] = value.split("/");
  const amount = !isNaN(Number(opacityAmount)) ? Number(opacityAmount) : 100;
  const colorValue = token(`colors.${color}`);
  const opacityValue = token(`opacity.${amount}`);
  const amountValue = opacityValue ? Number(opacityValue) * 100 : `${100 - amount}%`;
  return {
    color: colorValue ?? color,
    amount: amountValue,
    value: `color-mix(in srgb, transparent ${amountValue}, ${colorValue})`
  };
};
var colorMixVar = (tokenValue, fallbackVar) => {
  const [color, opacityAmount] = tokenValue.split("/");
  const amount = !isNaN(Number(opacityAmount)) ? Number(opacityAmount) : 100;
  const amountValue = 100 - amount;
  const colorName = dashCase(color).replace(".", "-");
  const colorVar = cssVar.create(`colors-${colorName}`);
  return {
    ref: colorVar.ref,
    colorMixValue: `color-mix(in srgb, transparent ${amountValue}%, ${colorVar.ref})`,
    value: `var(${fallbackVar?.name}, ${colorVar.ref})`,
    fallbackVar
  };
};

// src/css-calc.ts
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
function toRef(operand) {
  if (isObject(operand) && operand.ref) {
    return operand.ref;
  }
  return String(operand);
}
var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpr("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpr("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpr("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpr("/", ...operands)})`;
var negate = (x) => {
  const value = toRef(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);

// src/default-config.ts
var staticCss = {
  recipes: {
    alert: ["*"],
    avatar: ["*"],
    button: ["*"],
    card: ["*"],
    checkbox: ["*"],
    closeButton: ["*"],
    code: ["*"],
    badge: ["*"],
    formControl: ["*"],
    heading: ["*"],
    icon: ["*"],
    input: ["*"],
    kbd: ["*"],
    link: ["*"],
    modal: ["*"],
    popover: ["*"],
    select: ["*"],
    skeleton: ["*"],
    switchRecipe: ["*"],
    tabs: ["*"],
    table: ["*"],
    tag: ["*"],
    textarea: ["*"],
    tooltip: ["*"],
    //
    aiChatPageWrapper: ["*"],
    contentParser: ["*"],
    previewContentHeader: ["*"],
    searchBarTrigger: ["*"]
  }
};
var themeVarsClass = "inkeep-widget-vars";
var cssVarRoot = `:where(.${themeVarsClass})`;
var prefix = "ikp";
var defaultConfig = {
  themeVarsClass,
  prefix,
  cssVarRoot,
  extendCssVarRoot: (root) => cssVarRoot.replace(")", `, ${root})`),
  staticCss,
  presets: [
    "@pandacss/preset-panda",
    "@inkeep/preset-chakra",
    "@inkeep/preset"
  ]
};

// src/traverse.ts
var isObjectOrArray = (obj) => typeof obj === "object" && obj !== null;
var defaultOptions = { separator: "." };
function traverse(obj, callback, options = defaultOptions, path = "") {
  const separator = options.separator ?? defaultOptions.separator;
  if (obj === null || typeof obj !== "object") {
    return;
  }
  const keys = Object.keys(obj);
  for (let i = 0, len = keys.length; i < len; i++) {
    const key = keys[i];
    const value = obj[key];
    const isObj = isObjectOrArray(value);
    const newPath = path ? `${path}${separator}${key}` : key;
    callback(key, value, newPath);
    if (isObj) {
      traverse(value, callback, options, newPath);
    }
  }
}

// src/wrap-value.ts
var wrapValue = (obj) => {
  const newObj = {};
  for (const key in obj) {
    if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
      newObj[key] = wrapValue(obj[key]);
    } else {
      newObj[key] = { value: obj[key] };
    }
  }
  return newObj;
};
export {
  ariaAttr,
  calc,
  callAllHandlers,
  colorMix,
  colorMixVar,
  cssVar,
  dashCase,
  dataAttr,
  defaultConfig,
  getInitials,
  prefix,
  traverse,
  wrapValue
};
