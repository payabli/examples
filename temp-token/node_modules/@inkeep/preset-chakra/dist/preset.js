"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/preset.ts
var preset_exports = {};
__export(preset_exports, {
  chakraRecipes: () => chakraRecipes,
  default: () => preset_default,
  generatePreflight: () => generatePreflight
});
module.exports = __toCommonJS(preset_exports);
var import_dev31 = require("@pandacss/dev");

// src/global-styles.ts
var import_shared = require("@inkeep/shared");
var import_dev = require("@pandacss/dev");
var globalStyles = (0, import_dev.defineGlobalStyles)({
  [`${import_shared.defaultConfig.cssVarRoot} body`]: {
    fontFamily: "body",
    // TODO
    color: "chakra-body-text",
    bg: "chakra-body-bg",
    transitionProperty: "background-color",
    transitionDuration: "normal",
    lineHeight: "base"
  },
  [`${import_shared.defaultConfig.cssVarRoot} *::placeholder`]: {
    color: "chakra-placeholder-color"
  },
  [`${import_shared.defaultConfig.cssVarRoot} *, *::before, &::after`]: {
    borderColor: "chakra-border-color"
  }
});

// src/recipes/alert.recipe.ts
var import_dev2 = require("@pandacss/dev");
var import_shared2 = require("@inkeep/shared");
var import_shared3 = require("@inkeep/shared");
var vars = import_shared2.cssVar.scope("alert", ["fg", "bg", "bg-alpha"]);
var bgDark = (0, import_shared3.colorMixVar)("colorPalette.200/16", vars["bg-alpha"]);
var alertRecipe = (0, import_dev2.defineSlotRecipe)({
  className: "alert",
  slots: ["container", "icon", "spinner", "title", "description"],
  base: {
    container: {
      colorPalette: "blue",
      bg: vars.bg.ref,
      px: "4",
      py: "3",
      //
      width: "100%",
      display: "flex",
      alignItems: "center",
      position: "relative",
      overflow: "hidden"
    },
    title: {
      fontWeight: "bold",
      lineHeight: "6",
      marginEnd: "2"
    },
    description: {
      lineHeight: "6"
    },
    icon: {
      color: vars.fg.ref,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "6",
      //
      display: "inherit"
    },
    spinner: {
      color: vars.fg.ref,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "5"
    }
  },
  variants: {
    variant: {
      subtle: {
        container: {
          [vars.fg.name]: "colors.colorPalette.500",
          [vars.bg.name]: "colors.colorPalette.100",
          _dark: {
            [vars.fg.name]: "colors.colorPalette.200",
            [vars["bg-alpha"].name]: bgDark.colorMixValue,
            [vars.bg.name]: bgDark.value
          }
        }
      },
      "left-accent": {
        container: {
          [vars.fg.name]: "colors.colorPalette.500",
          [vars.bg.name]: "colors.colorPalette.100",
          _dark: {
            [vars.fg.name]: "colors.colorPalette.200",
            [vars["bg-alpha"].name]: bgDark.colorMixValue
          },
          paddingStart: "3",
          borderStartWidth: "4px",
          borderStartColor: vars.fg.ref
        }
      },
      "top-accent": {
        container: {
          [vars.fg.name]: "colors.colorPalette.500",
          [vars.bg.name]: "colors.colorPalette.100",
          _dark: {
            [vars.fg.name]: "colors.colorPalette.200",
            [vars.bg.name]: bgDark.value
          },
          pt: "2",
          borderTopWidth: "4px",
          borderTopColor: vars.fg.ref
        }
      },
      solid: {
        container: {
          [vars.fg.name]: "colors.white",
          [vars.bg.name]: "colors.colorPalette.500",
          _dark: {
            [vars.fg.name]: "colors.gray.900",
            [vars.bg.name]: "colors.colorPalette.200"
          },
          color: vars.fg.ref
        }
      }
    }
  },
  defaultVariants: {
    variant: "subtle"
  }
});

// src/recipes/avatar.recipe.ts
var import_dev3 = require("@pandacss/dev");
var import_shared4 = require("@inkeep/shared");
var vars2 = import_shared4.cssVar.scope("avatar", [
  "border-color",
  ["border-radius", "token(sizes.full)"],
  "bg",
  "font-size",
  "size"
]);
function getSize(size, fontSize) {
  return {
    root: {
      [vars2.size.name]: size,
      [vars2["font-size"].name]: fontSize
    }
  };
}
var avatarRecipe = (0, import_dev3.defineSlotRecipe)({
  className: "avatar",
  slots: ["root", "fallback", "image"],
  base: {
    root: {
      bg: vars2.bg.ref,
      fontSize: vars2["font-size"].ref,
      color: { base: "white", "&[data-is-bg-dark]": "gray.800" },
      borderColor: vars2["border-color"].ref,
      verticalAlign: "top",
      width: vars2.size.ref,
      height: vars2.size.ref,
      "&:not([data-loaded])": {
        [vars2.bg.name]: "colors.gray.400"
      },
      [vars2["border-color"].name]: "colors.white",
      _dark: {
        [vars2["border-color"].name]: "colors.gray.800"
      },
      //
      display: "inline-flex",
      // alignItems: 'center',
      justifyContent: "center",
      textAlign: "center",
      textTransform: "uppercase",
      fontWeight: "medium",
      position: "relative",
      flexShrink: 0,
      borderRadius: vars2["border-radius"].ref
    },
    fallback: {
      alignItems: "center",
      // background: 'gray.300',
      // borderWidth: '1px',
      display: "flex",
      fontWeight: "semibold",
      height: "inherit",
      justifyContent: "center"
    },
    image: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius: vars2["border-radius"].ref
    }
  },
  variants: {
    size: {
      "2xs": getSize("sizes.4", "fontSizes.3xs"),
      xs: getSize("sizes.6", "fontSizes.2xs"),
      sm: getSize("sizes.8", "fontSizes.xs"),
      md: getSize("sizes.12", "fontSizes.md"),
      lg: getSize("sizes.16", "fontSizes.lg"),
      xl: getSize("sizes.24", "fontSizes.3xl"),
      "2xl": getSize("sizes.32", "fontSizes.4xl")
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// src/recipes/badge.recipe.ts
var import_dev4 = require("@pandacss/dev");
var import_shared5 = require("@inkeep/shared");
var vars3 = import_shared5.cssVar.scope("badge", [
  ["bg", "inherit"],
  ["bg-alpha", "inherit"],
  ["color", "inherit"],
  "shadow"
]);
var bgDark2 = {
  solid: (0, import_shared5.colorMixVar)("colorPalette.500/40", vars3["bg-alpha"]),
  subtle: (0, import_shared5.colorMixVar)("colorPalette.200/16", vars3["bg-alpha"]),
  outline: (0, import_shared5.colorMixVar)("colorPalette.200/20", vars3["bg-alpha"])
};
var badgeRecipe = (0, import_dev4.defineRecipe)({
  className: "badge",
  base: {
    colorPalette: "gray",
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold",
    bg: vars3.bg.ref,
    color: vars3.color.ref,
    boxShadow: vars3.shadow.ref,
    //
    display: "inline-block",
    whiteSpace: "nowrap",
    verticalAlign: "middle"
  },
  variants: {
    variant: {
      solid: {
        [vars3.bg.name]: "colors.colorPalette.500",
        [vars3.color.name]: "colors.white",
        _dark: {
          [vars3["bg-alpha"].name]: bgDark2.solid.colorMixValue,
          [vars3.bg.name]: bgDark2.solid.value,
          [vars3.color.name]: "colors.whiteAlpha.800"
        }
      },
      subtle: {
        [vars3.bg.name]: "colorPalette.100",
        [vars3.color.name]: "colors.colorPalette.800",
        _dark: {
          [vars3["bg-alpha"].name]: bgDark2.subtle.colorMixValue,
          [vars3.bg.name]: bgDark2.subtle.value,
          [vars3.color.name]: "colors.colorPalette.200"
        }
      },
      outline: {
        [vars3.color.name]: "colors.colorPalette.500",
        _dark: {
          [vars3["bg-alpha"].name]: bgDark2.outline.colorMixValue,
          [vars3.bg.name]: bgDark2.outline.value
        },
        [vars3.shadow.name]: `inset 0 0 0px 1px ${vars3.color.ref}`
      }
    }
  },
  defaultVariants: {
    variant: "subtle"
  }
});

// src/recipes/button.recipe.ts
var import_dev5 = require("@pandacss/dev");
var variantGhostStyles = (0, import_dev5.defineStyles)({
  color: { base: `colorPalette.600`, _dark: `colorPalette.200` },
  bg: "transparent",
  _hover: {
    backgroundAlpha: { base: `colorPalette.50`, _dark: "colorPalette.200/12" }
  },
  _active: {
    backgroundAlpha: { base: `colorPalette.100`, _dark: "colorPalette.200/24" }
  }
});
var buttonRecipe = (0, import_dev5.defineRecipe)({
  className: "btn",
  base: {
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: { boxShadow: "outline" },
    _disabled: { opacity: 0.4, cursor: "not-allowed", boxShadow: "none" },
    _hover: { _disabled: { bg: "initial" } },
    // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/button/button.tsx#L60
    display: "inline-flex",
    appearance: "none",
    alignItems: "center",
    justifyContent: "center",
    userSelect: "none",
    position: "relative",
    whiteSpace: "nowrap",
    verticalAlign: "middle",
    outline: "none",
    _focus: {
      zIndex: 1
    }
  },
  variants: {
    variant: {
      ghost: variantGhostStyles,
      outline: {
        border: "1px solid",
        borderColor: {
          base: "currentColor"
        },
        ...variantGhostStyles
        // Since outline uses ghost styles as well
      },
      solid: {
        bg: { base: "colorPalette.500", _dark: "colorPalette.200" },
        color: { base: "white", _dark: "gray.800" },
        _hover: {
          bg: { base: "colorPalette.600", _dark: "colorPalette.300" },
          _disabled: {
            bg: { base: "colorPalette.500", _dark: "colorPalette.200" }
          }
        },
        _active: {
          bg: { base: "colorPalette.700", _dark: "colorPalette.400" }
        }
      },
      link: {
        padding: "0!",
        height: "auto!",
        lineHeight: "base",
        verticalAlign: "baseline",
        fontWeight: "normal",
        color: { base: "colorPalette.500", _dark: "colorPalette.200" },
        _hover: {
          textDecoration: "underline",
          _disabled: { textDecoration: "none" }
        },
        _active: {
          color: { base: "colorPalette.700", _dark: "colorPalette.500" }
        }
      },
      unstyled: {
        bg: "none",
        color: "inherit",
        display: "inline",
        lineHeight: "inherit",
        m: "0",
        p: "0",
        borderRadius: "unset"
      }
    },
    colorPalette: {
      gray: { colorPalette: "gray" },
      blue: { colorPalette: "blue" },
      teal: { colorPalette: "teal" },
      inkeepPrimary: { colorPalette: "inkeepPrimary" }
    },
    size: {
      lg: { h: "12", minW: "12", fontSize: "lg", px: "6" },
      md: { h: "10", minW: "10", fontSize: "md", px: "4" },
      sm: { h: "8", minW: "8", fontSize: "sm", px: "3" },
      xs: { h: "6", minW: "6", fontSize: "xs", px: "2" }
    }
  },
  compoundVariants: [
    {
      variant: "ghost",
      colorPalette: "gray",
      css: {
        color: { base: "gray.800", _dark: "whiteAlpha.900" },
        _hover: { bg: { base: "gray.100", _dark: "whiteAlpha.200" } },
        _active: { bg: { base: "gray.200", _dark: "whiteAlpha.300" } }
      }
    },
    {
      variant: "outline",
      colorPalette: "gray",
      css: {
        borderColor: { base: "gray.200", _dark: "whiteAlpha.300" }
      }
    },
    {
      variant: "solid",
      colorPalette: "gray",
      css: {
        bg: { base: "gray.100", _dark: "whiteAlpha.200" },
        color: { base: "gray.800", _dark: "whiteAlpha.900" },
        _hover: {
          bg: { base: "gray.200", _dark: "whiteAlpha.300" },
          _disabled: {
            bg: { base: "gray.100", _dark: "whiteAlpha.200" }
          }
        },
        _active: { bg: { base: "gray.300", _dark: "whiteAlpha.400" } }
      }
    }
  ],
  defaultVariants: {
    colorPalette: "gray",
    variant: "solid",
    size: "md"
  }
});

// src/recipes/card.recipe.ts
var import_shared6 = require("@inkeep/shared");
var import_dev6 = require("@pandacss/dev");
var vars4 = import_shared6.cssVar.scope("card", [
  "bg",
  "padding",
  "shadow",
  "radius",
  ["border-width", "0"],
  "border-color"
]);
var cardRecipe = (0, import_dev6.defineSlotRecipe)({
  className: "card",
  slots: ["container", "body", "header", "footer"],
  base: {
    container: {
      [vars4.bg.name]: "colors.chakra-body-bg",
      backgroundColor: vars4.bg.ref,
      boxShadow: vars4.shadow.ref,
      borderRadius: vars4.radius.ref,
      color: "chakra-body-text",
      borderWidth: vars4["border-width"].ref,
      borderColor: vars4["border-color"].ref
    },
    body: {
      padding: vars4.padding.ref,
      flex: "1 1 0%"
    },
    header: {
      padding: vars4.padding.ref
    },
    footer: {
      padding: vars4.padding.ref
    }
  },
  variants: {
    variant: {
      elevated: {
        container: {
          [vars4.shadow.name]: "shadows.base",
          _dark: {
            [vars4.bg.name]: "colors.gray.700"
          }
        }
      },
      outline: {
        container: {
          [vars4["border-width"].name]: "1px",
          [vars4["border-color"].name]: "colors.chakra-border-color",
          _dark: {
            [vars4["border-color"].name]: "colors.whiteAlpha.300"
          }
        }
      },
      filled: {
        container: {
          [vars4.bg.name]: "colors.chakra-subtle-bg"
        }
      },
      unstyled: {
        body: {
          [vars4.padding.name]: 0
        },
        header: {
          [vars4.padding.name]: 0
        },
        footer: {
          [vars4.padding.name]: 0
        }
      }
    },
    size: {
      sm: {
        container: {
          [vars4.radius.name]: "radii.base",
          [vars4.padding.name]: "space.3"
        }
      },
      md: {
        container: {
          [vars4.radius.name]: "radii.md",
          [vars4.padding.name]: "space.5"
        }
      },
      lg: {
        container: {
          [vars4.radius.name]: "radii.xl",
          [vars4.padding.name]: "space.7"
        }
      }
    }
  },
  defaultVariants: {
    variant: "elevated",
    size: "md"
  }
});

// src/recipes/checkbox.recipe.ts
var import_shared7 = require("@inkeep/shared");
var import_dev7 = require("@pandacss/dev");
var $size = import_shared7.cssVar.create("checkbox-size", "1em");
var checkboxRecipe = (0, import_dev7.defineSlotRecipe)({
  className: "checkbox",
  slots: ["container", "control", "label", "icon"],
  base: {
    container: {
      cursor: "pointer",
      display: "inline-flex",
      alignItems: "center",
      verticalAlign: "top",
      position: "relative",
      //
      _disabled: { cursor: "not-allowed" },
      //
      colorPalette: "blue"
    },
    control: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      verticalAlign: "top",
      userSelect: "none",
      flexShrink: 0,
      //
      w: $size.ref,
      h: $size.ref,
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderRadius: "sm",
      borderColor: "inherit",
      color: "white",
      _checked: {
        bg: { base: "colorPalette.500", _dark: "colorPalette.200" },
        borderColor: { base: "colorPalette.500", _dark: "colorPalette.200" },
        color: { base: "white", _dark: "gray.900" },
        _hover: {
          bg: { base: "colorPalette.600", _dark: "colorPalette.300" },
          borderColor: {
            base: "colorPalette.600",
            _dark: "colorPalette.300"
          }
        },
        _disabled: {
          borderColor: { base: "gray.200", _dark: "transparent" },
          bg: { base: "gray.200", _dark: "whiteAlpha.300" },
          color: { base: "gray.500", _dark: "whiteAlpha.500" }
        }
      },
      _indeterminate: {
        bg: { base: "colorPalette.500", _dark: "colorPalette.200" },
        borderColor: { base: "colorPalette.500", _dark: "colorPalette.200" },
        color: { base: "white", _dark: "gray.900" }
      },
      _disabled: {
        bg: { base: "gray.100", _dark: "whiteAlpha.100" },
        borderColor: { base: "gray.100", _dark: "transparent" }
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: { base: "red.500", _dark: "red.300" }
      }
    },
    label: {
      ml: "0.5rem",
      userSelect: "none",
      _disabled: { opacity: 0.4 }
    },
    icon: {
      animation: "checkAnim 200ms linear",
      fontSize: $size.ref,
      color: "var(--checkbox-icon-color, unset)",
      _indeterminate: {
        animation: "indeterminateOpacityAnim 20ms linear, indeterminateScaleAnim 200ms linear"
      },
      //
      transitionProperty: "transform",
      transitionDuration: "normal"
    }
  },
  variants: {
    size: {
      sm: {
        control: { [$size.name]: "sizes.3" },
        label: { fontSize: "sm" },
        icon: { fontSize: "3xs" }
      },
      md: {
        control: { [$size.name]: "sizes.4" },
        label: { fontSize: "md" },
        icon: { fontSize: "2xs" }
      },
      lg: {
        control: { [$size.name]: "sizes.5" },
        label: { fontSize: "lg" },
        icon: { fontSize: "2xs" }
      }
    },
    shape: {
      circular: { control: { rounded: "full" } }
    },
    variant: {
      neutral: {
        control: {
          _checked: {
            bg: {
              base: "gray.900",
              _dark: "whiteAlpha.900"
            },
            borderColor: {
              base: "gray.900",
              _dark: "whiteAlpha.900"
            }
          },
          _indeterminate: {
            bg: {
              base: "gray.900",
              _dark: "whiteAlpha.900"
            },
            borderColor: {
              base: "gray.900",
              _dark: "whiteAlpha.900"
            }
          }
        }
      }
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// src/recipes/close-button.recipe.ts
var import_dev8 = require("@pandacss/dev");
var import_shared8 = require("@inkeep/shared");
var $size2 = import_shared8.cssVar.create("btn-bg");
var $bg = import_shared8.cssVar.create("btn-size");
var closeButtonRecipe = (0, import_dev8.defineRecipe)({
  className: "close-btn",
  base: {
    w: $size2.ref,
    h: $size2.ref,
    borderRadius: "md",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      [$bg.name]: "colors.blackAlpha.100",
      _dark: {
        [$bg.name]: "colors.whiteAlpha.100"
      }
    },
    _active: {
      [$bg.name]: "colors.blackAlpha.200",
      _dark: {
        [$bg.name]: "colors.whiteAlpha.200"
      }
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    bg: $bg.ref
  },
  variants: {
    size: {
      lg: {
        [$size2.name]: "sizes.10",
        fontSize: "md"
      },
      md: {
        [$size2.name]: "sizes.8",
        fontSize: "xs"
      },
      sm: {
        [$size2.name]: "sizes.6",
        fontSize: "2xs"
      }
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// src/recipes/code.recipe.ts
var import_dev9 = require("@pandacss/dev");
var codeRecipe = (0, import_dev9.defineRecipe)({
  className: "code",
  base: {
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm",
    bg: vars3.bg.ref,
    color: vars3.color.ref,
    boxShadow: vars3.shadow.ref
  },
  variants: badgeRecipe.variants,
  defaultVariants: badgeRecipe.defaultVariants
});

// src/recipes/form-control.recipe.ts
var import_shared9 = require("@inkeep/shared");
var import_dev10 = require("@pandacss/dev");
var vars5 = import_shared9.cssVar.scope("form", ["control-color", "error-color"]);
var formControlRecipe = (0, import_dev10.defineSlotRecipe)({
  className: "form-control",
  slots: [
    "container",
    "required-indicator",
    "helper",
    "label",
    "error",
    "error-icon"
  ],
  base: {
    container: {
      width: "100%",
      position: "relative"
    },
    "required-indicator": {
      marginStart: "1",
      [vars5["control-color"].name]: "colors.red.500",
      _dark: {
        [vars5["control-color"].name]: "colors.red.300"
      },
      color: vars5["control-color"].ref
    },
    helper: {
      mt: "2",
      [vars5["control-color"].name]: "colors.gray.600",
      _dark: {
        [vars5["control-color"].name]: "colors.whiteAlpha.600"
      },
      color: vars5["control-color"].ref,
      lineHeight: "normal",
      fontSize: "sm"
    },
    label: {
      display: "block",
      textAlign: "start",
      //
      fontSize: "md",
      marginEnd: "3",
      mb: "2",
      fontWeight: "medium",
      transitionProperty: "common",
      transitionDuration: "normal",
      opacity: 1,
      _disabled: {
        opacity: 0.4
      }
    },
    error: {
      display: "flex",
      alignItems: "center",
      //
      [vars5["error-color"].name]: `colors.red.500`,
      _dark: {
        [vars5["error-color"].name]: `colors.red.300`
      },
      color: vars5["error-color"].ref,
      mt: "2",
      fontSize: "sm",
      lineHeight: "normal"
    },
    "error-icon": {
      marginEnd: "0.5em",
      [vars5["error-color"].name]: `colors.red.500`,
      _dark: {
        [vars5["error-color"].name]: `colors.red.300`
      },
      color: vars5["error-color"].ref
    }
  }
});

// src/recipes/heading.recipe.ts
var import_dev11 = require("@pandacss/dev");
var headingRecipe = (0, import_dev11.defineRecipe)({
  className: "heading",
  base: {
    fontFamily: "heading",
    fontWeight: "bold"
  },
  variants: {
    size: {
      "4xl": { textStyle: "heading.4xl" },
      "3xl": { textStyle: "heading.3xl" },
      "2xl": { textStyle: "heading.2xl" },
      xl: { textStyle: "heading.xl" },
      lg: { textStyle: "heading.lg" },
      md: { textStyle: "heading.md" },
      sm: { textStyle: "heading.sm" },
      xs: { textStyle: "heading.xs" }
    }
  },
  defaultVariants: {
    size: "xl"
  }
});

// src/recipes/icon.recipe.ts
var import_dev12 = require("@pandacss/dev");
var iconRecipe = (0, import_dev12.defineRecipe)({
  className: "icon",
  base: {
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color: "currentColor",
    verticalAlign: "middle"
  }
});

// src/recipes/input.recipe.ts
var import_shared10 = require("@inkeep/shared");
var import_dev13 = require("@pandacss/dev");
var vars6 = import_shared10.cssVar.scope("input", [
  "focus-border-color",
  "error-border-color",
  "height",
  "font-size",
  "padding",
  "border-radius"
]);
var sizes = {
  lg: {
    [vars6["font-size"].name]: "fontSizes.lg",
    [vars6.padding.name]: "space.4",
    [vars6["border-radius"].name]: "radii.md",
    [vars6.height.name]: "sizes.12"
  },
  md: {
    [vars6["font-size"].name]: "fontSizes.md",
    [vars6.padding.name]: "space.4",
    [vars6["border-radius"].name]: "radii.md",
    [vars6.height.name]: "sizes.10"
  },
  sm: {
    [vars6["font-size"].name]: "fontSizes.sm",
    [vars6.padding.name]: "space.3",
    [vars6["border-radius"].name]: "radii.sm",
    [vars6.height.name]: "sizes.8"
  },
  xs: {
    [vars6["font-size"].name]: "fontSizes.xs",
    [vars6.padding.name]: "space.2",
    [vars6["border-radius"].name]: "radii.sm",
    [vars6.height.name]: "sizes.6"
  }
};
var withVars = {
  height: vars6.height.ref,
  fontSize: vars6["font-size"].ref,
  px: vars6.padding.ref,
  borderRadius: vars6["border-radius"].ref
};
var inputRecipe = (0, import_dev13.defineSlotRecipe)({
  className: "input",
  jsx: ["Input", "Input.Group"],
  slots: ["group", "field", "addon"],
  base: {
    // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/input/input-group.tsx
    group: {
      width: "100%",
      display: "flex",
      position: "relative",
      // Parts of inputs override z-index to ensure that they stack correctly on each other
      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes
      isolation: "isolate",
      //
      '& > [data-placement="left"]': {
        borderStartRadius: 0
      },
      '& > [data-placement="right"]': {
        borderEndRadius: 0
      },
      '&:has([data-placement="right"]) > input': {
        borderEndRadius: 0
      },
      [vars6["border-radius"].name]: "0"
    },
    addon: {
      ...withVars,
      "& + input": {
        borderStartRadius: 0
      }
    },
    field: {
      ...withVars,
      //
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      [vars6["focus-border-color"].name]: {},
      base: {
        // TODO check ok
        [vars6["focus-border-color"].name]: "colors.blue.500",
        [vars6["error-border-color"].name]: "colors.red.500"
      },
      _dark: {
        [vars6["focus-border-color"].name]: "colors.blue.300",
        [vars6["error-border-color"].name]: "colors.red.300"
      }
    }
  },
  variants: {
    size: {
      lg: { field: sizes.lg, addon: sizes.lg, group: sizes.lg },
      md: { field: sizes.md, addon: sizes.md, group: sizes.md },
      sm: { field: sizes.sm, addon: sizes.sm, group: sizes.sm },
      xs: { field: sizes.xs, addon: sizes.xs, group: sizes.xs }
    },
    variant: {
      outline: {
        field: {
          border: "1px solid",
          borderColor: "inherit",
          bg: "inherit",
          _hover: {
            borderColor: { base: "gray.300", _dark: "whiteAlpha.400" }
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: vars6["error-border-color"].ref,
            boxShadow: `0 0 0 1px ${vars6["error-border-color"].ref}`
          },
          _focusVisible: {
            zIndex: 1,
            borderColor: vars6["focus-border-color"].ref,
            boxShadow: `0 0 0 1px ${vars6["focus-border-color"].ref}`
          }
        },
        addon: {
          border: "1px solid",
          borderColor: { base: "inherit", _dark: "whiteAlpha.50" },
          bg: { base: "gray.100", _dark: "whiteAlpha.300" }
        }
      },
      filled: {
        field: {
          border: "2px solid",
          borderColor: "transparent",
          bg: { base: "gray.100", _dark: "whiteAlpha.50" },
          _hover: {
            bg: { base: "gray.200", _dark: "whiteAlpha.100" }
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: vars6["error-border-color"].ref
          },
          _focusVisible: {
            bg: "transparent",
            borderColor: vars6["focus-border-color"].ref
          }
        },
        addon: {
          border: "2px solid",
          borderColor: "transparent",
          bg: { base: "gray.100", _dark: "whiteAlpha.50" }
        }
      },
      flushed: {
        field: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          borderRadius: "0",
          px: "0",
          bg: "transparent",
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: vars6["error-border-color"].ref,
            boxShadow: `0px 1px 0px 0px ${vars6["error-border-color"].ref}`
          },
          _focusVisible: {
            borderColor: vars6["focus-border-color"].ref,
            boxShadow: `0px 1px 0px 0px ${vars6["focus-border-color"].ref}`
          }
        },
        addon: {
          borderBottom: "2px solid",
          borderColor: "inherit",
          borderRadius: "0",
          px: "0",
          bg: "transparent"
        }
      },
      unstyled: {
        field: {
          bg: "transparent",
          px: "0",
          height: "auto"
        },
        addon: {
          bg: "transparent",
          px: "0",
          height: "auto"
        }
      }
    }
  },
  defaultVariants: {
    size: "md",
    variant: "outline"
  }
});

// src/recipes/kbd.recipe.ts
var import_dev14 = require("@pandacss/dev");
var import_shared11 = require("@inkeep/shared");
var $bg2 = import_shared11.cssVar.create("kbd-bg");
var kbdRecipe = (0, import_dev14.defineRecipe)({
  className: "kbd",
  base: {
    [$bg2.name]: "gray.100",
    _dark: {
      [$bg2.name]: "whiteAlpha.100"
    },
    bg: $bg2.ref,
    borderRadius: "md",
    borderWidth: "1px",
    borderBottomWidth: "3px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "normal",
    px: "0.4em",
    whiteSpace: "nowrap"
  }
});

// src/recipes/link.recipe.ts
var import_dev15 = require("@pandacss/dev");
var linkRecipe = (0, import_dev15.defineRecipe)({
  className: "link",
  base: {
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});

// src/recipes/modal.recipe.ts
var import_anatomy = require("@ark-ui/anatomy");
var import_dev16 = require("@pandacss/dev");
var import_shared12 = require("@inkeep/shared");
var $bg3 = import_shared12.cssVar.create("modal-bg");
var $shadow = import_shared12.cssVar.create("modal-shadow");
function getSize2(value) {
  if (value === "full") {
    return {
      content: {
        maxW: "100vw",
        minH: "100vh",
        my: "0",
        borderRadius: "0"
      }
    };
  }
  return {
    content: { maxW: value }
  };
}
var modalRecipe = (0, import_dev16.defineSlotRecipe)({
  className: "modal",
  slots: import_anatomy.dialogAnatomy.extendWith("root", "footer").keys(),
  base: {
    backdrop: {
      bg: "blackAlpha.600",
      zIndex: "modal",
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/modal/modal-overlay.tsx
      pos: "fixed",
      left: "0",
      top: "0",
      w: "100vw",
      h: "100vh"
    },
    container: {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      overscrollBehaviorY: "none",
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/modal/modal-content.tsx
      width: "100vw",
      height: "100vh",
      position: "fixed",
      left: 0,
      top: 0
    },
    content: {
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/modal/modal-content.tsx
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/theme/src/components/modal.ts#L36
      borderRadius: "md",
      color: "inherit",
      zIndex: "modal",
      [$bg3.name]: "colors.white",
      // TODO check
      [$shadow.name]: "shadows.lg",
      _dark: {
        [$bg3.name]: "colors.gray.700",
        [$shadow.name]: "shadows.dark-lg"
      },
      bg: $bg3.ref,
      boxShadow: $shadow.ref,
      px: "6",
      py: "2",
      flex: "1"
    },
    description: {
      px: "6",
      py: "2",
      flex: "1"
    },
    title: {
      px: "6",
      py: "4",
      fontSize: "xl",
      fontWeight: "semibold",
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/modal/modal-header.tsx
      flex: 0
    },
    closeTrigger: {
      position: "absolute",
      top: "2",
      insetEnd: "3"
    },
    footer: {
      px: "6",
      py: "4",
      // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/modal/modal-footer.tsx
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end"
    }
  },
  variants: {
    size: {
      xs: getSize2("xs"),
      sm: getSize2("sm"),
      md: getSize2("md"),
      lg: getSize2("lg"),
      xl: getSize2("xl"),
      "2xl": getSize2("2xl"),
      "3xl": getSize2("3xl"),
      "4xl": getSize2("4xl"),
      "5xl": getSize2("5xl"),
      "6xl": getSize2("6xl"),
      full: getSize2("full")
    },
    isCentered: {
      true: {
        content: {
          my: "auto",
          mx: "auto"
        },
        container: {
          alignItems: "center"
        }
      },
      false: {
        content: {
          my: "16",
          mx: void 0
        },
        container: {
          alignItems: "flex-start"
        }
      }
    },
    scrollOverflowBehavior: {
      inside: {
        content: {
          maxH: "calc(100% - 7.5rem)"
        },
        container: {
          overflow: "hidden"
        },
        body: {
          overflow: "auto"
        }
      },
      outside: {
        content: {
          maxH: void 0
          // TODO unset ?
        },
        container: {
          overflow: "auto"
        },
        body: {
          overflow: void 0
          // TODO unset ?
        }
      }
    }
  },
  // https://chakra-ui.com/docs/components/modal/props
  defaultVariants: {
    size: "md",
    isCentered: false,
    scrollOverflowBehavior: "outside"
  }
});

// src/recipes/popover.recipe.ts
var import_anatomy2 = require("@ark-ui/anatomy");
var import_shared13 = require("@inkeep/shared");
var import_dev17 = require("@pandacss/dev");
var vars7 = import_shared13.cssVar.scope("popper", ["bg", "arrow-bg", "arrow-shadow-color"]);
var arrow = import_shared13.cssVar.scope("arrow", [
  "size",
  "size-half",
  "background",
  "offset"
]);
var popoverRecipe = (0, import_dev17.defineSlotRecipe)({
  className: "popover",
  slots: import_anatomy2.popoverAnatomy.extendWith("footer").keys(),
  base: {
    positioner: {
      position: "relative",
      zIndex: "popover"
    },
    content: {
      position: "relative",
      display: "flex",
      flexDirection: "column",
      //
      [vars7.bg.name]: `colors.white`,
      bg: vars7.bg.ref,
      [vars7["arrow-bg"].name]: vars7.bg.ref,
      [vars7["arrow-shadow-color"].name]: `colors.gray.200`,
      _dark: {
        [vars7.bg.name]: `colors.grayDark.800`,
        [vars7["arrow-shadow-color"].name]: `colors.whiteAlpha.300`
      },
      width: "xs",
      border: "1px solid",
      borderColor: "inherit",
      borderRadius: "md",
      boxShadow: "sm",
      zIndex: "inherit",
      _focusVisible: {
        outline: 0,
        boxShadow: "outline"
      },
      // |
      // v from Park-UI
      _open: {
        animation: "fade-in 0.25s ease-out"
      },
      _closed: {
        animation: "fade-out 0.2s ease-out"
      }
    },
    title: {
      px: 3,
      py: 2,
      borderBottomWidth: "1px"
    },
    description: {
      px: 3,
      py: 2
    },
    footer: {
      px: 3,
      py: 2,
      borderTopWidth: "1px"
    },
    closeTrigger: {
      position: "absolute",
      borderRadius: "md",
      top: 1,
      insetEnd: 2,
      padding: 2
    },
    arrow: {
      // this is from Ark-UI/ZagJS
      // https://github.com/chakra-ui/zag/blob/9a3a82f0b3738beda59c313fafd51360e6b0322f/website/data/components/popover.mdx#L246
      // https://github.com/chakra-ui/zag/blob/3765f9d6e75465475a4823a3b36d771796fc901a/packages/utilities/popper/src/middleware.ts#L10
      // https://github.com/chakra-ui/zag/blob/9a3a82f0b3738beda59c313fafd51360e6b0322f/website/data/components/tooltip.mdx#L261
      [arrow.size.name]: "sizes.3",
      [arrow.background.name]: vars7["arrow-bg"].ref
    },
    arrowTip: {
      borderTopWidth: "1px",
      borderLeftWidth: "1px"
    }
  }
});

// src/recipes/select.recipe.ts
var import_anatomy3 = require("@ark-ui/anatomy");
var import_dev18 = require("@pandacss/dev");
var import_shared14 = require("@inkeep/shared");
var vars8 = import_shared14.cssVar.scope("select", ["bg"]);
var $bg4 = vars8.bg;
var selectRecipe = (0, import_dev18.defineSlotRecipe)({
  className: "select",
  description: "A select style",
  slots: import_anatomy3.selectAnatomy.keys(),
  base: {
    root: {
      colorPalette: "gray",
      display: "flex",
      flexDirection: "column",
      gap: "1.5",
      width: "full"
    },
    content: {
      // also need this one since the content will be inside a Portal
      colorPalette: "gray",
      bg: { base: "white", _dark: "colorPalette.900" },
      borderRadius: "md",
      borderWidth: "1px",
      boxShadow: "sm",
      display: "flex",
      flexDirection: "column",
      _hidden: {
        display: "none"
      },
      _open: {
        animation: "fade-in 0.25s ease-out"
      },
      _closed: {
        animation: "fade-out 0.2s ease-out"
      },
      _focusVisible: {
        outlineOffset: "2px",
        outline: "2px solid",
        outlineColor: { base: "colorPalette.600", _dark: "colorPalette.400" }
      }
    },
    item: {
      alignItems: "center",
      borderRadius: "xs",
      cursor: "pointer",
      display: "flex",
      justifyContent: "space-between",
      transitionDuration: "fast",
      transitionProperty: "background, color",
      transitionTimingFunction: "default",
      _hover: {
        background: { base: "colorPalette.100", _dark: "colorPalette.800" }
      },
      _highlighted: {
        background: { base: "colorPalette.100", _dark: "colorPalette.800" }
      },
      _disabled: {
        colorAlpha: { base: "gray.300", _dark: "gray.300/50" },
        cursor: "not-allowed",
        _hover: {
          background: "transparent"
        }
      }
    },
    itemGroupLabel: {
      fontWeight: "semibold",
      textStyle: "sm"
    },
    itemIndicator: {
      color: "accent.default"
    },
    label: {
      color: { base: "colorPalette.700", _dark: "colorPalette.200" },
      fontWeight: "medium"
    },
    trigger: {
      // the only part that is from Chakra-UI
      ...inputRecipe.base?.field,
      appearance: "none",
      paddingBottom: "1px",
      lineHeight: "normal",
      bg: $bg4.ref,
      [$bg4.name]: "colors.white",
      _dark: {
        [$bg4.name]: "colors.colorPalette.700"
      },
      alignItems: "center",
      borderColor: { base: "colorPalette.300", _dark: "colorPalette.700" },
      borderRadius: "md",
      cursor: "pointer",
      display: "inline-flex",
      justifyContent: "space-between",
      outline: 0,
      position: "relative",
      transitionDuration: "normal",
      transitionProperty: "background, box-shadow, border-color",
      transitionTimingFunction: "default",
      width: "full",
      _placeholderShown: {
        color: { base: "colorPalette.500", _dark: "colorPalette.400" }
      },
      "& :where(svg)": {
        color: { base: "colorPalette.500", _dark: "colorPalette.400" }
      }
    }
  },
  variants: {
    variant: {
      outline: {
        trigger: {
          bg: { base: "white", _dark: "colorPalette.800" },
          borderWidth: "1px",
          _focus: {
            borderColor: {
              base: "colorPalette.200",
              _dark: "colorPalette.800"
            },
            boxShadow: "accent"
          }
        }
      },
      ghost: {
        trigger: {
          _hover: {
            background: { base: "colorPalette.100", _dark: "colorPalette.900" }
          },
          _focus: {
            background: { base: "colorPalette.100", _dark: "colorPalette.900" }
          }
        }
      }
    },
    size: {
      sm: {
        content: { p: "0.5", gap: "1" },
        item: { textStyle: "sm", px: "2", height: "9" },
        itemIndicator: {
          "& :where(svg)": {
            width: "4",
            height: "4"
          }
        },
        itemGroupLabel: {
          px: "2",
          py: "1.5"
        },
        label: { textStyle: "sm" },
        trigger: {
          px: "2.5",
          h: "9",
          minW: "9",
          fontSize: "sm",
          gap: "2",
          "& :where(svg)": {
            width: "4",
            height: "4"
          }
        }
      },
      md: {
        content: { p: "1", gap: "1" },
        item: { textStyle: "md", px: "2", height: "10" },
        itemIndicator: {
          "& :where(svg)": {
            width: "4",
            height: "4"
          }
        },
        itemGroupLabel: {
          px: "2",
          py: "1.5"
        },
        label: { textStyle: "sm" },
        trigger: {
          px: "3",
          h: "10",
          minW: "10",
          fontSize: "md",
          gap: "2",
          "& :where(svg)": {
            width: "4",
            height: "4"
          }
        }
      },
      lg: {
        content: { p: "1.5", gap: "1" },
        item: { textStyle: "md", px: "2", height: "11" },
        itemIndicator: {
          "& :where(svg)": {
            width: "5",
            height: "5"
          }
        },
        itemGroupLabel: {
          px: "2",
          py: "1.5"
        },
        label: { textStyle: "sm" },
        trigger: {
          px: "3.5",
          h: "11",
          minW: "11",
          fontSize: "md",
          gap: "2",
          "& :where(svg)": {
            width: "5",
            height: "5"
          }
        }
      }
    }
  },
  defaultVariants: {
    size: "md",
    variant: "outline"
  }
});

// src/recipes/skeleton.recipe.tsx
var import_dev20 = require("@pandacss/dev");
var import_shared17 = require("@inkeep/shared");

// src/vars.ts
var import_shared16 = require("@inkeep/shared");

// src/recipes/tooltip.recipe.ts
var import_anatomy4 = require("@ark-ui/anatomy");
var import_shared15 = require("@inkeep/shared");
var import_dev19 = require("@pandacss/dev");
var vars9 = import_shared15.cssVar.scope("tooltip", ["bg", "fg", "arrow-bg"]);
var arrow2 = import_shared15.cssVar.scope("arrow", [
  "size",
  "size-half",
  "background",
  "offset"
]);
var tooltipRecipe = (0, import_dev19.defineSlotRecipe)({
  className: "tooltip",
  slots: import_anatomy4.tooltipAnatomy.keys(),
  base: {
    positioner: {
      [vars9["arrow-bg"].name]: vars9.bg.ref,
      [vars9.bg.name]: "colors.gray.700",
      [vars9.fg.name]: "colors.whiteAlpha.900",
      _dark: {
        [vars9.bg.name]: "colors.gray.300",
        [vars9.fg.name]: "colors.gray.900"
      }
    },
    content: {
      bg: vars9.bg.ref,
      color: vars9.fg.ref,
      px: "2",
      py: "0.5",
      borderRadius: "sm",
      fontWeight: "medium",
      fontSize: "sm",
      boxShadow: "md",
      maxW: "xs",
      zIndex: "tooltip",
      _open: {
        animation: "fade-in 0.25s ease-out"
      },
      _closed: {
        animation: "fade-out 0.2s ease-out"
      }
    },
    arrow: {
      // this is from Ark-UI/ZagJS
      // https://github.com/chakra-ui/zag/blob/9a3a82f0b3738beda59c313fafd51360e6b0322f/website/data/components/tooltip.mdx#L261
      [arrow2.size.name]: "sizes.3",
      [arrow2.background.name]: vars9["arrow-bg"].ref
    },
    arrowTip: {
      _open: {
        animation: "fade-in 0.25s ease-out"
      },
      _closed: {
        animation: "fade-out 0.2s ease-out"
      }
    }
  }
});

// src/vars.ts
var cssVariables = {
  skeleton: import_shared16.cssVar.scope("skeleton", ["start-color", "end-color"]),
  tooltip: vars9
};

// src/recipes/skeleton.recipe.tsx
var $speed = import_shared17.cssVar.create("skeleton-speed", "0.8s");
var skeletonRecipe = (0, import_dev20.defineRecipe)({
  className: "skeleton",
  base: {
    // https://github.com/chakra-ui/chakra-ui-docs/blob/7e0869341db671880ea08ec74b84a93817f32845/configs/sandpack-contents/component-theming/skeleton.js#L116
    h: "20px",
    //
    [cssVariables.skeleton["start-color"].name]: "colors.gray.100",
    [cssVariables.skeleton["end-color"].name]: "colors.gray.400",
    _dark: {
      [cssVariables.skeleton["start-color"].name]: "colors.gray.800",
      [cssVariables.skeleton["end-color"].name]: "colors.gray.600"
    },
    background: cssVariables.skeleton["start-color"].ref,
    borderColor: cssVariables.skeleton["end-color"].ref,
    opacity: 0.7,
    borderRadius: "sm",
    //
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    },
    //
    animation: `${$speed.ref} linear infinite alternate skeleton-bg-fade`
  }
});

// src/recipes/switch.recipe.tsx
var import_shared18 = require("@inkeep/shared");
var import_dev21 = require("@pandacss/dev");
var import_anatomy5 = require("@ark-ui/anatomy");
var vars10 = import_shared18.cssVar.scope("switch", [
  "track-width",
  "track-height",
  "track-diff",
  "thumb-x",
  "bg"
]);
var diffValue = import_shared18.calc.subtract(vars10["track-width"], vars10["track-height"]);
var switchRecipe = (0, import_dev21.defineSlotRecipe)({
  className: "switch",
  slots: import_anatomy5.switchAnatomy.keys(),
  jsx: ["Switch"],
  base: {
    root: {
      colorPalette: "blue",
      [vars10["track-diff"].name]: diffValue,
      [vars10["thumb-x"].name]: vars10["track-diff"].ref,
      _rtl: {
        [vars10["thumb-x"].name]: (0, import_shared18.calc)(vars10["track-diff"]).negate().toString()
      },
      //
      position: "relative",
      verticalAlign: "middle",
      lineHeight: 0,
      //
      display: "inline-flex",
      alignItems: "center"
    },
    control: {
      borderRadius: "full",
      p: "0.5",
      width: vars10["track-width"].ref,
      height: vars10["track-height"].ref,
      transitionProperty: "background, transform",
      transitionDuration: "fast",
      [vars10.bg.name]: "colors.gray.300",
      _dark: {
        [vars10.bg.name]: "colors.whiteAlpha.400"
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _checked: {
        [vars10.bg.name]: `colors.colorPalette.500`,
        _dark: {
          [vars10.bg.name]: `colors.colorPalette.200`
        }
      },
      bg: vars10.bg.ref,
      //
      display: "inline-flex",
      flexShrink: 0,
      justifyContent: "flex-start",
      boxSizing: "content-box",
      cursor: "pointer"
    },
    thumb: {
      bg: "white",
      transitionProperty: "transform",
      transitionDuration: "normal",
      borderRadius: "inherit",
      width: vars10["track-height"].ref,
      height: vars10["track-height"].ref,
      _checked: {
        transform: `translateX(${vars10["thumb-x"].ref})`
      }
    },
    label: {
      userSelect: "none",
      marginStart: "0.5rem"
    }
  },
  variants: {
    size: {
      sm: {
        root: {
          [vars10["track-width"].name]: "1.375rem",
          [vars10["track-height"].name]: "sizes.3"
        }
      },
      md: {
        root: {
          [vars10["track-width"].name]: "1.875rem",
          [vars10["track-height"].name]: "sizes.4"
        }
      },
      lg: {
        root: {
          [vars10["track-width"].name]: "2.875rem",
          [vars10["track-height"].name]: "sizes.6"
        }
      }
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// src/recipes/table.recipe.ts
var import_dev22 = require("@pandacss/dev");
var numericStyles = (0, import_dev22.defineStyles)({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var tableRecipe = (0, import_dev22.defineSlotRecipe)({
  className: "table",
  jsx: ["Table", "Table.Container", "Table.Root"],
  slots: [
    "container",
    "table",
    "caption",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "tr"
  ],
  base: {
    // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/table/table-container.tsx
    container: {
      display: "block",
      whiteSpace: "nowrap",
      WebkitOverflowScrolling: "touch",
      overflowX: "auto",
      overflowY: "hidden",
      maxWidth: "100%"
    },
    table: {
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse",
      width: "full",
      //
      colorPalette: "gray"
    },
    th: {
      fontFamily: "heading",
      fontWeight: "bold",
      textTransform: "uppercase",
      letterSpacing: "wider",
      textAlign: "start"
    },
    td: {
      textAlign: "start"
    },
    caption: {
      mt: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "medium",
      //   https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/table/table-caption.tsx
      captionSide: "bottom"
    }
  },
  variants: {
    variant: {
      simple: {
        th: {
          color: { base: "gray.600", _dark: "gray.400" },
          borderBottom: "1px",
          borderColor: { base: `colorPalette.100`, _dark: `colorPalette.700` },
          ...numericStyles
        },
        td: {
          borderBottom: "1px",
          borderColor: { base: `colorPalette.100`, _dark: `colorPalette.700` },
          ...numericStyles
        },
        caption: {
          color: { base: "gray.600", _dark: "gray.100" }
        }
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      },
      striped: {
        th: {
          color: { base: "gray.600", _dark: "gray.400" },
          borderBottom: "1px",
          borderColor: { base: `colorPalette.100`, _dark: `colorPalette.700` },
          ...numericStyles
        },
        td: {
          borderBottom: "1px",
          borderColor: { base: `colorPalette.100`, _dark: `colorPalette.700` },
          ...numericStyles
        },
        caption: {
          color: { base: "gray.600", _dark: "gray.100" }
        },
        tbody: {
          "& tr:nth-of-type(odd)": {
            "& th, & td": {
              borderBottomWidth: "1px",
              borderColor: {
                base: `colorPalette.100`,
                _dark: `colorPalette.700`
              }
            },
            "& td": {
              background: {
                base: `colorPalette.100`,
                _dark: `colorPalette.700`
              }
            }
          }
        },
        tfoot: {
          "& tr:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      },
      unstyled: {}
    },
    size: {
      sm: {
        th: {
          px: "4",
          py: "1",
          lineHeight: "4",
          fontSize: "xs"
        },
        td: {
          px: "4",
          py: "2",
          fontSize: "sm",
          lineHeight: "4"
        },
        caption: {
          px: "4",
          py: "2",
          fontSize: "xs"
        }
      },
      md: {
        th: {
          px: "6",
          py: "3",
          lineHeight: "4",
          fontSize: "xs"
        },
        td: {
          px: "6",
          py: "4",
          lineHeight: "5"
        },
        caption: {
          px: "6",
          py: "2",
          fontSize: "sm"
        }
      },
      lg: {
        th: {
          px: "8",
          py: "4",
          lineHeight: "5",
          fontSize: "sm"
        },
        td: {
          px: "8",
          py: "5",
          lineHeight: "6"
        },
        caption: {
          px: "6",
          py: "2",
          fontSize: "md"
        }
      }
    }
  },
  defaultVariants: {
    variant: "simple",
    size: "md"
  }
});

// src/recipes/tabs.recipe.ts
var import_dev23 = require("@pandacss/dev");
var import_anatomy6 = require("@ark-ui/anatomy");
var import_shared19 = require("@inkeep/shared");
var vars11 = import_shared19.cssVar.scope("tabs", [
  "color",
  "bg",
  "border-color",
  "border-prop",
  "margin-prop"
]);
var $fg = vars11.color;
var $bg5 = vars11.bg;
var $border = vars11["border-color"];
var tabsRecipe = (0, import_dev23.defineSlotRecipe)({
  className: "tabs",
  slots: import_anatomy6.tabsAnatomy.extendWith("panels").keys(),
  base: {
    root: {
      colorPalette: "blue",
      _vertical: { display: "flex" },
      _horizontal: { display: "block" }
    },
    list: {
      // from Park-UI
      position: "relative",
      scrollbarWidth: "none",
      "&::-webkit-scrollbar": {
        display: "none"
      },
      //
      display: "flex",
      _vertical: {
        flexDirection: "column",
        borderInlineStart: vars11["border-color"].ref,
        marginInlineStart: vars11["margin-prop"].ref
      },
      _horizontal: {
        flexDirection: "row",
        borderBottom: vars11["border-color"].ref,
        marginBottom: vars11["margin-prop"].ref
      }
    },
    trigger: {
      outline: "0",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      //
      transitionProperty: "common",
      transitionDuration: "normal",
      _focusVisible: {
        zIndex: 1,
        boxShadow: "outline"
      },
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4
      }
    },
    panels: {
      width: "100%"
    },
    content: {
      outline: "0",
      p: 4
    },
    // https://github.com/chakra-ui/chakra-ui/blob/cb71ce45ca82765c11e6d45d627303ddb60ea23a/packages/components/src/tabs/use-tabs.ts
    indicator: {
      display: "none",
      // there's no indicator in Chakra-UI
      //
      bgColor: "colorPalette.950",
      _horizontal: {
        height: "2px",
        bottom: "0"
      },
      _vertical: {
        width: "2px",
        left: "0"
      }
    }
  },
  variants: {
    size: {
      sm: { trigger: { py: 1, px: 4, fontSize: "sm" } },
      md: { trigger: { fontSize: "md", py: 2, px: 4 } },
      lg: { trigger: { fontSize: "lg", py: 3, px: 4 } }
    },
    variant: {
      line: {
        list: {
          [vars11["border-color"].name]: "2px solid",
          borderColor: "inherit"
        },
        trigger: {
          [vars11["border-color"].name]: "2px solid",
          borderColor: "transparent",
          [vars11["margin-prop"].name]: "-2px",
          _selected: {
            [$fg.name]: `colors.colorPalette.600`,
            _dark: {
              [$fg.name]: `colors.colorPalette.300`
            },
            borderColor: "currentColor"
          },
          _active: {
            [$bg5.name]: "colors.gray.200",
            _dark: {
              [$bg5.name]: "colors.whiteAlpha.300"
            }
          },
          _disabled: {
            _active: { bg: "none" }
          },
          color: $fg.ref,
          bg: $bg5.ref
        }
      },
      enclosed: {
        trigger: {
          borderTopRadius: "md",
          border: "1px solid",
          borderColor: "transparent",
          mb: "-1px",
          [$border.name]: "transparent",
          _selected: {
            [$fg.name]: `colors.colorPalette.600`,
            [$border.name]: `colors.white`,
            _dark: {
              [$fg.name]: `colors.colorPalette.300`,
              [$border.name]: `colors.gray.800`
            },
            borderColor: "inherit",
            borderBottomColor: $border.ref
          },
          color: $fg.ref
        },
        list: {
          mb: "-1px",
          borderBottom: "1px solid",
          borderColor: "inherit"
        }
      },
      "enclosed-colored": {
        trigger: {
          border: "1px solid",
          borderColor: "inherit",
          [$bg5.name]: "colors.gray.50",
          _dark: {
            [$bg5.name]: "colors.whiteAlpha.50"
          },
          mb: "-1px",
          _notLast: {
            marginEnd: "-1px"
          },
          _selected: {
            [$bg5.name]: "colors.white",
            [$fg.name]: `colors.colorPalette.600`,
            _dark: {
              [$bg5.name]: "colors.gray.800",
              [$fg.name]: `colors.colorPalette.300`
            },
            borderColor: "inherit",
            borderTopColor: "currentColor",
            borderBottomColor: "transparent"
          },
          color: $fg.ref,
          bg: $bg5.ref
        },
        list: {
          mb: "-1px",
          borderBottom: "1px solid",
          borderColor: "inherit"
        }
      },
      "soft-rounded": {
        trigger: {
          borderRadius: "full",
          fontWeight: "semibold",
          color: "gray.600",
          _selected: {
            color: `colorPalette.700`,
            bg: `colorPalette.100`
          }
        }
      },
      "solid-rounded": {
        trigger: {
          borderRadius: "full",
          fontWeight: "semibold",
          [$fg.name]: "colors.gray.600",
          _dark: {
            [$fg.name]: "inherit"
          },
          _selected: {
            [$fg.name]: "colors.white",
            [$bg5.name]: `colors.colorPalette.600`,
            _dark: {
              [$fg.name]: "colors.gray.800",
              [$bg5.name]: `colors.colorPalette.300`
            }
          },
          color: $fg.ref,
          bg: $bg5.ref
        }
      },
      unstyled: {}
    },
    isFitted: {
      true: {
        trigger: { flex: 1 }
      }
    }
  },
  defaultVariants: {
    size: "md",
    variant: "line"
  }
});

// src/recipes/tag.recipe.tsx
var import_dev24 = require("@pandacss/dev");
var import_shared20 = require("@inkeep/shared");
var vars12 = import_shared20.cssVar.scope("tag", [
  "bg",
  "color",
  "shadow",
  "min-height",
  "min-width",
  "font-size",
  "padding-inline"
]);
var tagRecipe = (0, import_dev24.defineRecipe)({
  className: "tag",
  base: {
    colorPalette: "gray",
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    [vars12.color.name]: vars3.color.ref,
    [vars12.bg.name]: vars3.bg.ref,
    [vars12.shadow.name]: vars3.shadow.ref,
    color: vars12.color.ref,
    bg: vars12.bg.ref,
    boxShadow: vars12.shadow.ref,
    borderRadius: "md",
    minH: vars12["min-height"].ref,
    minW: vars12["min-width"].ref,
    fontSize: vars12["font-size"].ref,
    px: vars12["padding-inline"].ref,
    _focusVisible: {
      [vars12.shadow.name]: "shadows.outline"
    },
    //
    display: "inline-flex",
    verticalAlign: "top",
    alignItems: "center",
    maxWidth: "100%"
  },
  variants: {
    variant: badgeRecipe.variants?.variant ?? {},
    size: {
      sm: {
        [vars12["min-height"].name]: "sizes.5",
        [vars12["min-width"].name]: "sizes.5",
        [vars12["font-size"].name]: "fontSizes.xs",
        [vars12["padding-inline"].name]: "space.2"
      },
      md: {
        [vars12["min-height"].name]: "sizes.6",
        [vars12["min-width"].name]: "sizes.6",
        [vars12["font-size"].name]: "fontSizes.sm",
        [vars12["padding-inline"].name]: "space.2"
      },
      lg: {
        [vars12["min-height"].name]: "sizes.8",
        [vars12["min-width"].name]: "sizes.8",
        [vars12["font-size"].name]: "fontSizes.md",
        [vars12["padding-inline"].name]: "space.3"
      }
    }
  },
  defaultVariants: {
    size: "md",
    variant: "subtle"
  }
});

// src/recipes/textarea.recipe.ts
var import_dev25 = require("@pandacss/dev");
var textareaRecipe = (0, import_dev25.defineRecipe)({
  className: "textarea",
  base: {
    ...inputRecipe.base?.field,
    paddingY: "2",
    minHeight: "20",
    lineHeight: "short",
    verticalAlign: "top"
  },
  variants: {
    variant: {
      outline: inputRecipe.variants?.variant?.outline.field ?? {},
      flushed: inputRecipe.variants?.variant?.flushed.field ?? {},
      filled: inputRecipe.variants?.variant?.filled.field ?? {},
      unstyled: inputRecipe.variants?.variant?.unstyled.field ?? {}
    },
    size: {
      xs: inputRecipe.variants?.size?.xs.field ?? {},
      sm: inputRecipe.variants?.size?.sm.field ?? {},
      md: inputRecipe.variants?.size?.md.field ?? {},
      lg: inputRecipe.variants?.size?.lg.field ?? {}
    }
  },
  defaultVariants: {
    size: "md",
    variant: "outline"
  }
});

// src/recipes.ts
var chakraRecipes = {
  alert: alertRecipe,
  avatar: avatarRecipe,
  button: buttonRecipe,
  card: cardRecipe,
  checkbox: checkboxRecipe,
  closeButton: closeButtonRecipe,
  code: codeRecipe,
  badge: badgeRecipe,
  formControl: formControlRecipe,
  heading: headingRecipe,
  icon: iconRecipe,
  input: inputRecipe,
  kbd: kbdRecipe,
  link: linkRecipe,
  modal: modalRecipe,
  popover: popoverRecipe,
  select: selectRecipe,
  skeleton: skeletonRecipe,
  switchRecipe,
  tabs: tabsRecipe,
  table: tableRecipe,
  tag: tagRecipe,
  textarea: textareaRecipe,
  tooltip: tooltipRecipe
};

// src/semantic-tokens.ts
var import_dev26 = require("@pandacss/dev");
var semanticTokens = (0, import_dev26.defineSemanticTokens)({
  colors: {
    // https://github.com/chakra-ui/chakra-ui/blob/v3/packages/theme/src/semantic-tokens.ts#L3
    "chakra-body-text": {
      value: { base: "{colors.gray.800}", _dark: "{colors.whiteAlpha.900}" }
    },
    "chakra-body-bg": { value: { base: "white", _dark: "{colors.gray.800}" } },
    "chakra-border-color": {
      value: { base: "{colors.gray.200}", _dark: "{colors.whiteAlpha.300}" }
    },
    "chakra-inverse-text": {
      value: { base: "white", _dark: "{colors.gray.800}" }
    },
    "chakra-subtle-bg": {
      value: { base: "{colors.gray.100}", _dark: "{colors.gray.700}" }
    },
    "chakra-subtle-text": {
      value: { base: "{colors.gray.600}", _dark: "{colors.gray.400}" }
    },
    "chakra-placeholder-color": {
      value: { base: "{colors.gray.500}", _dark: "{colors.whiteAlpha.400}" }
    },
    background: {
      value: { base: "{colors.white}", _dark: "{colors.gray.800}" }
    },
    // https://github.com/chakra-ui/chakra-ui-docs/blob/71d44a6de8de3a221222f9b0cc2a4fc13916929e/theme.ts#L14
    foreground: {
      value: { base: "{colors.gray.700}", _dark: "{colors.gray.100}" }
    },
    // Used when implementing components that do not exist in Chakra UI but does in Ark-UI
    // made some slight tweaks to the colors (gray-palette -> gray)
    // https://github.com/cschroeter/park-ui/blob/1320a779d8ec2e6b6a0f9eeb9a9658aef4e2ea6f/packages/presets/src/theme/semantic-tokens.ts#L4
    bg: {
      canvas: {
        value: {
          base: "{colors.gray.25}",
          _dark: "{colors.gray.950}"
        }
      },
      default: {
        value: { base: "{colors.white}", _dark: "{colors.gray.800}" }
      },
      subtle: {
        value: {
          base: "{colors.gray.100}",
          _dark: "{colors.gray.900}"
        }
      },
      muted: {
        value: {
          base: "{colors.gray.200}",
          _dark: "{colors.gray.800}"
        }
      },
      emphasized: {
        value: {
          base: "{colors.gray.300}",
          _dark: "{colors.gray.600}"
        }
      },
      disabled: {
        value: {
          base: "{colors.gray.200}",
          _dark: "{colors.gray.700}"
        }
      }
    },
    fg: {
      default: {
        value: { base: "{colors.gray.950}", _dark: "{colors.white}" }
      },
      emphasized: {
        value: {
          base: "{colors.gray.700}",
          _dark: "{colors.gray.200}"
        }
      },
      muted: {
        value: {
          base: "{colors.gray.600}",
          _dark: "{colors.gray.300}"
        }
      },
      subtle: {
        value: {
          base: "{colors.gray.500}",
          _dark: "{colors.gray.400}"
        }
      },
      disabled: {
        value: {
          base: "{colors.gray.300}",
          _dark: "{colors.gray.700}"
        }
      }
    },
    accent: {
      default: {
        value: { base: "{colors.gray.950}", _dark: "{colors.white}" }
      },
      emphasized: {
        value: {
          base: "{colors.gray.800}",
          _dark: "{colors.gray.200}"
        }
      },
      fg: {
        value: { base: "{colors.white}", _dark: "{colors.gray.950}" }
      }
    },
    border: {
      default: {
        value: {
          base: "{colors.gray.200}",
          _dark: "{colors.gray.800}"
        }
      },
      emphasized: {
        value: {
          base: "{colors.gray.300}",
          _dark: "{colors.gray.700}"
        }
      },
      outline: {
        value: {
          base: "{colors.gray.600}",
          _dark: "{colors.gray.400}"
        }
      },
      accent: {
        value: { base: "{colors.gray.900}", _dark: "{colors.white}" }
      },
      disabled: {
        value: {
          base: "{colors.gray.200}",
          _dark: "{colors.gray.800}"
        }
      }
    }
  },
  shadows: {
    accent: {
      value: "0 0 0 1px {colors.border.accent}"
    },
    outline: {
      value: "0 0 0 1px {colors.border.outline}"
    },
    xs: {
      value: {
        base: "0px 1px 2px rgba(23, 23, 23,  0.1)",
        _dark: "0px 1px 2px rgba(0, 0, 0, 1.0)"
      }
    },
    sm: {
      value: {
        base: "0px 2px 4px rgba(23, 23, 23,  0.1)",
        _dark: "0px 2px 4px rgba(0, 0, 0, 1.0)"
      }
    },
    md: {
      value: {
        base: "0px 4px 8px rgba(23, 23, 23,  0.1)",
        _dark: "0px 4px 8px rgba(0, 0, 0, 1.0)"
      }
    },
    lg: {
      value: {
        base: "0px 8px 16px rgba(23, 23, 23,  0.1)",
        _dark: "0px 8px 16px rgba(0, 0, 0, 1.0)"
      }
    },
    xl: {
      value: {
        base: "0px 16px 24px rgba(23, 23, 23,  0.1)",
        _dark: "0px 16px 24px rgba(0, 0, 0, 1.0)"
      }
    }
  }
});

// src/tokens.ts
var import_shared21 = require("@inkeep/shared");
var import_dev27 = require("@pandacss/dev");

// src/foundations.ts
var typography = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var space = {
  auto: "auto",
  none: "none",
  0: "0",
  //
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes2 = {
  ...space,
  ...largeSizes,
  container
};
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var themeFoundations = {
  colors,
  space,
  breakpoints,
  borders,
  radii,
  sizes: sizes2,
  typography,
  zIndices,
  shadows
};

// src/tokens.ts
var tokens = (0, import_dev27.defineTokens)({
  borders: (0, import_shared21.wrapValue)(themeFoundations.borders),
  colors: (0, import_shared21.wrapValue)(themeFoundations.colors),
  fonts: (0, import_shared21.wrapValue)(themeFoundations.typography.fonts),
  fontSizes: (0, import_shared21.wrapValue)(themeFoundations.typography.fontSizes),
  fontWeights: (0, import_shared21.wrapValue)(themeFoundations.typography.fontWeights),
  letterSpacings: (0, import_shared21.wrapValue)(themeFoundations.typography.letterSpacings),
  lineHeights: (0, import_shared21.wrapValue)(themeFoundations.typography.lineHeights),
  shadows: (0, import_shared21.wrapValue)(themeFoundations.shadows),
  radii: (0, import_shared21.wrapValue)(themeFoundations.radii),
  sizes: (0, import_shared21.wrapValue)(themeFoundations.sizes),
  space: (0, import_shared21.wrapValue)(themeFoundations.space),
  zIndex: (0, import_shared21.wrapValue)(themeFoundations.zIndices)
});

// src/keyframes.ts
var import_dev28 = require("@pandacss/dev");
var checkboxKeyframes = (0, import_dev28.defineKeyframes)({
  checkAnim: {
    from: { opacity: 0, strokeDashoffset: 16, transform: "scale(0.95)" },
    to: { opacity: 1, strokeDashoffset: 0, transform: "scale(1)" }
  },
  indeterminateOpacityAnim: {
    from: { opacity: 0 },
    to: { opacity: 1 }
  },
  indeterminateScaleAnim: {
    from: { transform: "scaleX(0.65)" },
    to: { transform: "scaleX(1)" }
  }
});
var keyframes = (0, import_dev28.defineKeyframes)({
  ...checkboxKeyframes,
  fadeIn: {
    from: { opacity: "0" },
    to: { opacity: "1" }
  },
  fadeOut: {
    from: { opacity: "1" },
    to: { opacity: "0" }
  },
  "fade-in": {
    from: { opacity: "0" },
    to: { opacity: "1" }
  },
  "fade-out": {
    from: { opacity: "1" },
    to: { opacity: "0" }
  },
  "slide-in": {
    "0%": { opacity: "0", transform: "translateY(64px)" },
    "100%": { opacity: "1", transform: "translateY(0)" }
  },
  "slide-out": {
    "0%": { opacity: "1", transform: "translateY(0)" },
    "100%": { opacity: "0", transform: "translateY(64px)" }
  },
  "skeleton-bg-fade": {
    from: {
      borderColor: cssVariables.skeleton["start-color"].ref,
      background: cssVariables.skeleton["start-color"].ref
    },
    to: {
      borderColor: cssVariables.skeleton["end-color"].ref,
      background: cssVariables.skeleton["end-color"].ref
    }
  },
  spin: {
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  },
  "shake-rotate": {
    "0%": { transform: "rotate(0deg)" },
    "7%": { transform: "rotate(3deg)" },
    "15%": { transform: "rotate(-3deg)" },
    "23%": { transform: "rotate(3deg)" },
    "30%": { transform: "rotate(-3deg)" },
    "38%": { transform: "rotate(3deg)" },
    "46%": { transform: "rotate(-3deg)" },
    "54%": { transform: "rotate(3deg)" },
    "62%": { transform: "rotate(-3deg)" },
    "69%": { transform: "rotate(3deg)" },
    "77%": { transform: "rotate(-3deg)" },
    "85%": { transform: "rotate(3deg)" },
    "92%": { transform: "rotate(-3deg)" },
    "100%": { transform: "rotate(0deg)" }
  },
  "shadow-glow": {
    "0%": {
      boxShadow: "0px 0px 0px 0px var(--ikp-colors-inkeep-expanded-primary-100)"
    },
    "50%": {
      boxShadow: "0 0 7px 0px var(--ikp-colors-inkeep-expanded-primary-200)"
    },
    "100%": {
      boxShadow: "0px 0px 0px 0px var(--ikp-colors-inkeep-expanded-primary-100)"
    }
  }
});

// src/utilities.ts
var import_dev29 = require("@pandacss/dev");
var import_shared22 = require("@inkeep/shared");
var noOfLines = (0, import_dev29.defineUtility)({
  className: "n-lines",
  values: { type: "number" },
  transform(value) {
    return {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)",
      "--chakra-line-clamp": value
    };
  }
});
var backgroundAlpha = (0, import_dev29.defineUtility)({
  shorthand: ["bga"],
  property: "backgroundColor",
  className: "bg-alpha",
  values: { type: "string" },
  transform: (...args) => {
    const { value, color } = (0, import_shared22.colorMix)(...args);
    return {
      "--bga": value,
      backgroundColor: `var(--bga, ${color})`
    };
  }
});
var colorAlpha = (0, import_dev29.defineUtility)({
  property: "color",
  className: "text-alpha",
  values: { type: "string" },
  transform: (...args) => {
    const { value, color } = (0, import_shared22.colorMix)(...args);
    return {
      "--color-alpha": value,
      color: `var(--color-alpha, ${color})`
    };
  }
});
var utilities = {
  extend: {
    noOfLines,
    backgroundAlpha,
    colorAlpha
  }
};

// src/conditions.ts
var conditions = {
  extend: {
    closed: "&:is([data-state=closed])",
    hidden: "&[hidden], &[data-hidden]"
  }
};

// src/text-styles.ts
var import_dev30 = require("@pandacss/dev");
var textStyles = (0, import_dev30.defineTextStyles)({
  heading: {
    "4xl": { value: { fontSize: { base: "6xl", md: "7xl" }, lineHeight: 1 } },
    "3xl": { value: { fontSize: { base: "5xl", md: "6xl" }, lineHeight: 1 } },
    "2xl": {
      value: {
        fontSize: { base: "4xl", md: "5xl" },
        lineHeight: { base: 1.2, md: 1 }
      }
    },
    xl: {
      value: {
        fontSize: { base: "3xl", md: "4xl" },
        lineHeight: { base: 1.33, md: 1.2 }
      }
    },
    lg: {
      value: {
        fontSize: { base: "2xl", md: "3xl" },
        lineHeight: { base: 1.33, md: 1.2 }
      }
    },
    md: { value: { fontSize: "xl", lineHeight: 1.2 } },
    sm: { value: { fontSize: "md", lineHeight: 1.2 } },
    xs: { value: { fontSize: "sm", lineHeight: 1.2 } }
  }
});

// src/preflight.ts
var css = String.raw;
var vhPolyfill = css`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var generatePreflight = (scope, layer = "reset") => {
  return css`
    @layer ${layer} {
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: 'kern';
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
              button::-moz-focus-inner,
              [type="button"]::-moz-focus-inner,
              [type="reset"]::-moz-focus-inner,
              [type="submit"]::-moz-focus-inner
            ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
          ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
              blockquote,
              dl,
              dd,
              h1,
              h2,
              h3,
              h4,
              h5,
              h6,
              hr,
              figure,
              p,
              pre
            ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    }
  `;
};

// src/preset.ts
var preset_default = (0, import_dev31.definePreset)({
  globalCss: globalStyles,
  utilities,
  conditions,
  theme: {
    extend: {
      semanticTokens,
      tokens,
      recipes: chakraRecipes,
      keyframes,
      textStyles
    }
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  chakraRecipes,
  generatePreflight
});
