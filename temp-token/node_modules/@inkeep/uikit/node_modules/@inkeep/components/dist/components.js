"use strict";
"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components.ts
var components_exports = {};
__export(components_exports, {
  Alert: () => Alert,
  Avatar: () => Avatar2,
  Badge: () => Badge,
  Button: () => Button,
  ButtonIcon: () => ButtonIcon,
  Card: () => Card,
  Checkbox: () => Checkbox2,
  Code: () => Code,
  Collapse: () => Collapse,
  FormControl: () => FormControl2,
  FormLabel: () => FormLabel,
  Heading: () => Heading,
  Icon: () => Icon,
  IconButton: () => IconButton,
  Image: () => Image,
  Input: () => Input,
  Kbd: () => Kbd,
  Link: () => Link,
  List: () => List,
  Modal: () => Modal,
  ModalCloseButton: () => ModalCloseButton,
  Popover: () => Popover2,
  Portal: () => Portal,
  Select: () => Select2,
  Skeleton: () => Skeleton,
  Switch: () => Switch2,
  Table: () => Table,
  Tabs: () => Tabs2,
  Tag: () => Tag,
  Text: () => Text,
  Textarea: () => Textarea,
  ThemePropsProvider: () => ThemePropsProvider,
  Tooltip: () => Tooltip2,
  createContext: () => createContext2,
  createStyleContext: () => createStyleContext,
  createThemeStyled: () => createThemeStyled,
  useDisclosure: () => useDisclosure,
  useMediaQuery: () => useMediaQuery,
  useThemeProps: () => useThemeProps
});
module.exports = __toCommonJS(components_exports);

// src/ui/alert.tsx
var import_styled_system2 = require("@inkeep/styled-system");
var import_styled_system3 = require("@inkeep/styled-system");
var import_styled_system4 = require("@inkeep/styled-system");

// src/ui/create-style-context.tsx
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var cx = (...args) => args.filter(Boolean).join(" ");
var createStyleContext = (recipe) => {
  const StyleContext = (0, import_react.createContext)(null);
  const withProvider15 = (Component, slot, defaultProps) => {
    const Comp = (0, import_react.forwardRef)(
      (props, ref) => {
        const [variantProps, otherProps] = recipe.splitVariantProps(
          props
        );
        const { className = "", ...rest } = otherProps;
        const styles2 = recipe(variantProps);
        const slotClass = styles2?.[slot ?? ""];
        const classNames = cx(defaultProps?.className, slotClass, className);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StyleContext.Provider, { value: styles2, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Component,
          {
            ref,
            ...defaultProps,
            className: classNames,
            ...rest
          }
        ) });
      }
    );
    Comp.displayName = Component.displayName || Component.name;
    return Comp;
  };
  const withContext15 = (Component, slot, defaultProps) => {
    if (!slot)
      return Component;
    const Comp = (0, import_react.forwardRef)(
      ({ className, ...rest }, ref) => {
        const styles2 = (0, import_react.useContext)(StyleContext);
        const slotClass = styles2?.[slot ?? ""];
        const classNames = cx(defaultProps?.className, slotClass, className);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Component,
          {
            ref,
            ...defaultProps,
            className: classNames,
            ...rest
          }
        );
      }
    );
    Comp.displayName = Component.displayName || Component.name;
    return Comp;
  };
  return {
    withProvider: withProvider15,
    withContext: withContext15
  };
};

// src/ui/create-theme-styled.tsx
var import_react3 = require("react");

// src/ui/context.ts
var import_react2 = require("react");
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext2(options = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue
  } = options;
  const Context = (0, import_react2.createContext)(defaultValue);
  Context.displayName = name;
  function useContext2() {
    const context = (0, import_react2.useContext)(Context);
    if (!context && strict) {
      const error = new Error(
        errorMessage ?? getErrorMessage(hookName, providerName)
      );
      error.name = "ContextError";
      Error.captureStackTrace?.(error, useContext2);
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext2, Context];
}

// src/ui/create-theme-styled.tsx
var import_styled_system = require("@inkeep/styled-system");
var createThemeStyled = (Component, name) => {
  return (0, import_react3.forwardRef)((props, ref) => {
    const themeProps = useThemeProps()?.[name];
    const className = (0, import_styled_system.cx)(props?.className, themeProps?.className);
    const style = Object.assign({}, props?.style, themeProps?.style);
    return (0, import_react3.createElement)(Component, {
      ref,
      ...Object.assign({}, props, themeProps?.defaultProps),
      className,
      style
    });
  });
};
var [ThemePropsProvider, useThemeProps] = createContext2({
  strict: false,
  name: "ThemeProps"
});

// src/ui/alert.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var { withProvider, withContext } = createStyleContext(import_styled_system4.alert);
var AlertRoot = createThemeStyled(
  withProvider((0, import_styled_system3.styled)("div"), "container"),
  "Alert"
);
var AlertIcon = withContext((0, import_styled_system3.styled)("div"), "icon");
function CheckIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AlertIcon, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    "svg",
    {
      ...props,
      className: (0, import_styled_system2.css)({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
        }
      )
    }
  ) });
}
function InfoIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AlertIcon, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    "svg",
    {
      ...props,
      className: (0, import_styled_system2.css)({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
        }
      )
    }
  ) });
}
function WarningIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AlertIcon, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    "svg",
    {
      ...props,
      className: (0, import_styled_system2.css)({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  ) });
}
var Alert = Object.assign(AlertRoot, {
  Root: AlertRoot,
  // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/alert/alert-context.ts#L20
  InfoIcon,
  WarningIcon,
  SuccessIcon: CheckIcon,
  ErrorIcon: WarningIcon
});

// src/ui/avatar.tsx
var Ark = __toESM(require("@ark-ui/react/avatar"));
var import_styled_system5 = require("@inkeep/styled-system");
var import_styled_system6 = require("@inkeep/styled-system");
var { withProvider: withProvider2, withContext: withContext2 } = createStyleContext(import_styled_system6.avatar);
var AvatarRoot = createThemeStyled(
  withProvider2(
    (0, import_styled_system5.styled)(
      Ark.Avatar.Root
    ),
    "root"
  ),
  "Avatar"
);
var AvatarFallback = withContext2((0, import_styled_system5.styled)(Ark.Avatar.Fallback), "fallback");
var AvatarImage = withContext2((0, import_styled_system5.styled)(Ark.Avatar.Image), "image");
var Avatar2 = Object.assign(AvatarRoot, {
  Root: AvatarRoot,
  Fallback: AvatarFallback,
  Image: AvatarImage
});

// src/ui/badge.tsx
var import_styled_system7 = require("@inkeep/styled-system");
var import_styled_system8 = require("@inkeep/styled-system");
var Badge = createThemeStyled((0, import_styled_system7.styled)("span", import_styled_system8.badge), "Badge");

// src/ui/button.tsx
var import_react4 = require("react");
var import_react5 = require("@ark-ui/react");
var import_styled_system10 = require("@inkeep/styled-system");
var import_styled_system11 = require("@inkeep/styled-system");

// src/ui/button-icon.tsx
var import_styled_system9 = require("@inkeep/styled-system");
var ButtonIcon = (0, import_styled_system9.styled)(import_styled_system9.styled.span, {
  base: {
    display: "inline-flex",
    alignSelf: "center",
    flexShrink: 0
  }
});

// src/ui/button.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var ButtonRoot = createThemeStyled((0, import_styled_system10.styled)(import_react5.ark.button, import_styled_system11.button), "Button");
function ButtonContent(props) {
  const { leftIcon, children } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
    leftIcon && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ButtonIcon, { marginRight: 2, children: leftIcon }),
    children
  ] });
}
var Button = (0, import_react4.forwardRef)(
  ({ children, leftIcon, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    ButtonRoot,
    {
      ...props,
      ref,
      children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ButtonContent, { leftIcon, children })
    }
  )
);
Button.displayName = "Button";

// src/ui/card.tsx
var import_styled_system12 = require("@inkeep/styled-system");
var import_styled_system13 = require("@inkeep/styled-system");
var { withProvider: withProvider3, withContext: withContext3 } = createStyleContext(import_styled_system13.card);
var CardRoot = createThemeStyled(
  withProvider3((0, import_styled_system12.styled)("div"), "container"),
  "Card"
);
var CardBody = withContext3((0, import_styled_system12.styled)("div"), "body");
var CardHeader = withContext3((0, import_styled_system12.styled)("div"), "header");
var CardFooter = withContext3((0, import_styled_system12.styled)("div"), "footer");
var Card = Object.assign(CardRoot, {
  Root: CardRoot,
  Body: CardBody,
  Header: CardHeader,
  Footer: CardFooter
});

// src/ui/checkbox.tsx
var Ark2 = __toESM(require("@ark-ui/react/checkbox"));
var import_styled_system15 = require("@inkeep/styled-system");
var import_styled_system16 = require("@inkeep/styled-system");

// src/ui/checkbox-icon.tsx
var import_styled_system14 = require("@inkeep/styled-system");
var import_jsx_runtime4 = require("react/jsx-runtime");
function CheckIcon2(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    import_styled_system14.styled.svg,
    {
      viewBox: "0 0 12 10",
      style: {
        width: "1.2em",
        fill: "none",
        strokeWidth: 2,
        stroke: "currentColor",
        strokeDasharray: 16
      },
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("polyline", { points: "1.5 6 4.5 9 10.5 1" })
    }
  );
}
function IndeterminateIcon(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    import_styled_system14.styled.svg,
    {
      viewBox: "0 0 24 24",
      style: { width: "1.2em", stroke: "currentColor", strokeWidth: 4 },
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("line", { x1: "21", x2: "3", y1: "12", y2: "12" })
    }
  );
}
function CheckboxIcon(props) {
  const { className, isIndeterminate, isChecked, ...rest } = props;
  if (!isChecked && !isIndeterminate)
    return null;
  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon2;
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    import_styled_system14.styled.div,
    {
      "data-scope": "checkbox",
      "data-part": "icon",
      className,
      css: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(BaseIcon, { ...rest })
    }
  );
}

// src/ui/checkbox.tsx
var { withProvider: withProvider4, withContext: withContext4 } = createStyleContext(import_styled_system16.checkbox);
var CheckboxRoot = createThemeStyled(
  withProvider4(
    (0, import_styled_system15.styled)(
      Ark2.Checkbox.Root
    ),
    "container"
  ),
  "Checkbox"
);
var CheckboxControl = withContext4((0, import_styled_system15.styled)(Ark2.Checkbox.Control), "control");
var CheckboxLabel = withContext4((0, import_styled_system15.styled)(Ark2.Checkbox.Label), "label");
var Checkbox2 = Object.assign(CheckboxRoot, {
  Root: CheckboxRoot,
  Control: CheckboxControl,
  Label: CheckboxLabel,
  Icon: withContext4(CheckboxIcon, "icon")
});

// src/ui/code.tsx
var import_styled_system17 = require("@inkeep/styled-system");
var import_styled_system18 = require("@inkeep/styled-system");
var Code = createThemeStyled((0, import_styled_system17.styled)("code", import_styled_system18.code), "Code");

// src/ui/collapse.tsx
var import_react6 = require("react");
var import_framer_motion = require("framer-motion");
var import_styled_system19 = require("@inkeep/styled-system");

// src/ui/transition-utils.ts
var TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS.easeIn
  }
};
var withDelay = {
  enter: (transition, delay) => ({
    ...transition,
    delay: typeof delay === "number" ? delay : delay?.["enter"]
  }),
  exit: (transition, delay) => ({
    ...transition,
    delay: typeof delay === "number" ? delay : delay?.["exit"]
  })
};

// src/ui/collapse.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var isNumeric = (value) => value != null && Number.parseInt(value.toString(), 10) > 0;
var defaultTransitions = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS.ease }
  }
};
var variants = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({
    ...animateOpacity && { opacity: isNumeric(startingHeight) ? 1 : 0 },
    height: startingHeight,
    transitionEnd: transitionEnd?.exit,
    transition: transition?.exit ?? withDelay.exit(defaultTransitions.exit, delay)
  }),
  enter: ({
    animateOpacity,
    endingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({
    ...animateOpacity && { opacity: 1 },
    height: endingHeight,
    transitionEnd: transitionEnd?.enter,
    transition: transition?.enter ?? withDelay.enter(defaultTransitions.enter, delay)
  })
};
var Collapse = (0, import_react6.forwardRef)(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = (0, import_react6.useState)(false);
    (0, import_react6.useEffect)(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => void clearTimeout(timeout);
    }, []);
    const condition = Number(startingHeight) > 0 && !!unmountOnExit;
    if (condition) {
      console.warn({
        condition: Number(startingHeight) > 0 && !!unmountOnExit,
        message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
      });
    }
    const hasStartingHeight = Number.parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: mounted ? transition : { enter: { duration: 0 } },
      transitionEnd: {
        enter: transitionEnd?.enter,
        exit: unmountOnExit ? transitionEnd?.exit : {
          ...transitionEnd?.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_framer_motion.AnimatePresence, { initial: false, custom, children: show && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      import_framer_motion.motion.div,
      {
        ref,
        ...rest,
        className: (0, import_styled_system19.cx)("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants,
        initial: unmountOnExit ? "exit" : false,
        animate,
        exit: "exit"
      }
    ) });
  }
);
Collapse.displayName = "Collapse";

// src/ui/form-control.tsx
var import_react12 = require("react");
var import_styled_system22 = require("@inkeep/styled-system");
var import_styled_system23 = require("@inkeep/styled-system");

// src/ui/create-form-element.tsx
var import_react9 = require("react");

// src/ui/form-control-context.ts
var import_react8 = require("react");

// src/hooks/use-merge-refs.ts
var import_react7 = require("react");
function assignRef(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs(...refs) {
  return (node) => {
    refs.forEach((ref) => {
      assignRef(ref, node);
    });
  };
}

// src/ui/form-control-context.ts
var import_shared = require("@inkeep/shared");
var [FormControlProvider, useFormControlContext] = createContext2({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react8.useId)();
  const id = idProp || `field-${uuid}`;
  const labelId = `${id}-label`;
  const feedbackId = `${id}-feedback`;
  const helpTextId = `${id}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react8.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react8.useState)(false);
  const [isFocused, setFocus] = (0, import_react8.useState)(false);
  const getHelpTextProps = (0, import_react8.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node) => {
        if (!node)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react8.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": (0, import_shared.dataAttr)(isFocused),
      "data-disabled": (0, import_shared.dataAttr)(isDisabled),
      "data-invalid": (0, import_shared.dataAttr)(isInvalid),
      "data-readonly": (0, import_shared.dataAttr)(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id
    }),
    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react8.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node) => {
        if (!node)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react8.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react8.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: () => setFocus(true),
    onBlur: () => setFocus(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}

// src/ui/create-form-element.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var createFormContextElement = (BaseElement, elementName, getterName, conditionalCheck) => {
  const Component = (0, import_react9.forwardRef)((props, ref) => {
    const field = useFormControlContext();
    if (conditionalCheck && !conditionalCheck(field)) {
      return null;
    }
    const formProps = field?.[getterName](props, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(BaseElement, { ...formProps });
  });
  Component.displayName = elementName;
  return Component;
};

// src/ui/icon.tsx
var import_react10 = require("@ark-ui/react");
var import_styled_system20 = require("@inkeep/styled-system");
var import_styled_system21 = require("@inkeep/styled-system");
var import_react11 = require("react");
var import_jsx_runtime7 = require("react/jsx-runtime");
var Icon = createThemeStyled(
  (0, import_styled_system20.styled)(import_react10.ark.svg, import_styled_system21.icon, {
    defaultProps: {
      // TODO this one seems to cause issues for some icons
      // viewBox: '0 0 24 24',
      role: "presentation",
      "aria-hidden": true,
      focusable: false
    }
  }),
  "Icon"
);
var IconButton = (0, import_react11.forwardRef)(
  (props, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Button, { padding: "0", ...props, ref });
  }
);

// src/ui/form-control.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
var { withProvider: withProvider5, withContext: withContext5 } = createStyleContext(import_styled_system23.formControl);
var StyledContainer = withProvider5((0, import_styled_system22.styled)("div"), "container");
var FormControlContainer = (0, import_react12.forwardRef)(
  function FormControl(props, ref) {
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider(props);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(FormControlProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(StyledContainer, { ...getRootProps({}, ref) }) });
  }
);
FormControlContainer.displayName = "FormControl";
var StyledLabel = withContext5((0, import_styled_system22.styled)("label"), "label");
var FormLabel = (0, import_styled_system22.styled)(StyledLabel, {
  base: {
    display: "block",
    textAlign: "start",
    //
    fontSize: "md",
    marginEnd: "3",
    mb: "2",
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  }
});
var FormControlLabel = createFormContextElement(
  StyledLabel,
  "FormLabel",
  "getLabelProps"
);
var StyledRequiredIndicator = withContext5(
  (0, import_styled_system22.styled)("span"),
  "required-indicator"
);
var FormRequiredIndicator = createFormContextElement(
  StyledRequiredIndicator,
  "FormRequiredIndicator",
  "getRequiredIndicatorProps",
  (field) => field?.isRequired
);
var StyledHelperText = withContext5((0, import_styled_system22.styled)("div"), "helper");
var FormHelperText = createFormContextElement(
  StyledHelperText,
  "FormHelperText",
  "getHelpTextProps"
);
var StyledError = withContext5((0, import_styled_system22.styled)("div"), "error");
var FormError = createFormContextElement(
  StyledError,
  "FormError",
  "getErrorMessageProps",
  (field) => field?.isInvalid
);
var ErrorIcon = () => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }
);
var StyledErrorIcon = withContext5(Icon, "error-icon");
var FormErrorIcon = (0, import_react12.forwardRef)(
  function FormErrorIcon2(props, ref) {
    const field = useFormControlContext();
    if (!field?.isInvalid)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(StyledErrorIcon, { ref, ...props, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ErrorIcon, {}) });
  }
);
FormErrorIcon.displayName = "FormErrorIcon";
var FormControl2 = Object.assign(FormControlContainer, {
  Container: FormControlContainer,
  Label: FormControlLabel,
  Helper: FormHelperText,
  RequiredIndicator: FormRequiredIndicator,
  Error: FormError,
  ErrorIcon: FormErrorIcon
});

// src/ui/heading.tsx
var import_styled_system24 = require("@inkeep/styled-system");
var import_styled_system25 = require("@inkeep/styled-system");
var Heading = createThemeStyled((0, import_styled_system24.styled)("h2", import_styled_system25.heading), "Heading");

// src/ui/image.ts
var import_styled_system26 = require("@inkeep/styled-system");
var Image = import_styled_system26.styled.img;

// src/ui/input.tsx
var import_styled_system29 = require("@inkeep/styled-system");
var import_styled_system30 = require("@inkeep/styled-system");

// src/ui/input-addon.tsx
var import_styled_system27 = require("@inkeep/styled-system");
var import_styled_system28 = require("@inkeep/styled-system");
var import_react13 = require("react");
var import_jsx_runtime9 = require("react/jsx-runtime");
var styles = (0, import_styled_system27.cva)({
  base: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  },
  variants: {
    placement: {
      left: {
        marginEnd: "-1px",
        borderEndRadius: 0,
        borderEndColor: "transparent"
      },
      right: {
        marginStart: "-1px",
        borderStartRadius: 0,
        borderStartColor: "transparent"
      }
    }
  }
});
var InputAddon = (0, import_react13.forwardRef)(
  function InputAddon2(props, ref) {
    const { placement = "left", className, ...rest } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      import_styled_system28.styled.div,
      {
        "data-placement": placement,
        ...rest,
        className: (0, import_styled_system27.cx)(styles({ placement }), className),
        ref
      }
    );
  }
);
InputAddon.displayName = "InputAddon";

// src/ui/use-form-control.ts
var import_shared2 = require("@inkeep/shared");
function useFormControl(props) {
  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
  return {
    ...rest,
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": (0, import_shared2.ariaAttr)(isInvalid),
    "aria-required": (0, import_shared2.ariaAttr)(isRequired),
    "aria-readonly": (0, import_shared2.ariaAttr)(isReadOnly)
  };
}
function useFormControlProps(props) {
  const field = useFormControlContext();
  const {
    id,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled,
    onFocus,
    onBlur,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if (field?.hasFeedbackText && field?.isInvalid) {
    labelIds.push(field.feedbackId);
  }
  if (field?.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id ?? field?.id,
    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,
    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,
    isRequired: required ?? isRequired ?? field?.isRequired,
    isInvalid: isInvalid ?? field?.isInvalid,
    onFocus: (0, import_shared2.callAllHandlers)(field?.onFocus, onFocus),
    onBlur: (0, import_shared2.callAllHandlers)(field?.onBlur, onBlur)
  };
}

// src/ui/input.tsx
var import_react14 = require("react");
var import_jsx_runtime10 = require("react/jsx-runtime");
var { withProvider: withProvider6, withContext: withContext6 } = createStyleContext(import_styled_system30.input);
var StyledInputRoot = withProvider6((0, import_styled_system29.styled)("input"), "field");
var InputRoot = (0, import_react14.forwardRef)(function FormErrorIcon3(props, ref) {
  const fieldProps = useFormControl(props);
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(StyledInputRoot, { ref, ...fieldProps });
});
InputRoot.displayName = "Input";
var InputGroup = withProvider6((0, import_styled_system29.styled)("div"), "group");
var Input = Object.assign(InputRoot, {
  Root: InputRoot,
  Group: InputGroup,
  Field: withContext6((0, import_styled_system29.styled)("input"), "field"),
  Addon: withContext6(InputAddon, "addon")
});

// src/ui/kbd.tsx
var import_styled_system31 = require("@inkeep/styled-system");
var import_styled_system32 = require("@inkeep/styled-system");
var Kbd = createThemeStyled((0, import_styled_system31.styled)("span", import_styled_system32.kbd), "Kbd");

// src/ui/link.tsx
var import_react15 = require("react");
var import_styled_system33 = require("@inkeep/styled-system");
var import_styled_system34 = require("@inkeep/styled-system");
var import_jsx_runtime11 = require("react/jsx-runtime");
var LinkRoot = createThemeStyled((0, import_styled_system33.styled)("a", import_styled_system34.link), "Link");
var Link = (0, import_react15.forwardRef)(function Link2({ isExternal, ...props }, ref) {
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    LinkRoot,
    {
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ...props,
      ref
    }
  );
});
Link.displayName = "Link";

// src/ui/list.tsx
var import_styled_system35 = require("@inkeep/styled-system");
var import_styled_system36 = require("@inkeep/styled-system");
var listRecipe = (0, import_styled_system35.sva)({
  slots: ["ul", "ol", "icon", "item"],
  base: {
    ul: {
      listStyleType: "initial",
      marginStart: "1em"
    },
    ol: {
      listStyleType: "decimal",
      marginStart: "1em"
    },
    icon: {
      marginEnd: "2",
      display: "inline",
      verticalAlign: "text-bottom"
    }
  }
});
var { withProvider: withProvider7, withContext: withContext7 } = createStyleContext(listRecipe);
var UnorderedList = withProvider7(import_styled_system36.styled.ul, "ul");
var OrderedList = withProvider7(
  (0, import_styled_system36.styled)(
    "ol",
    {},
    {
      shouldForwardProp(prop, variantKeys) {
        return prop === "start";
      }
    }
  ),
  "ol"
);
var ListItem = withContext7(import_styled_system36.styled.li, "item");
var ListIcon = withContext7(import_styled_system36.styled.li, "icon");
var List = Object.assign(UnorderedList, {
  Unordered: UnorderedList,
  Ordered: OrderedList,
  Item: ListItem,
  Icon: ListIcon
});

// src/ui/modal.tsx
var Ark3 = __toESM(require("@ark-ui/react/dialog"));
var import_styled_system37 = require("@inkeep/styled-system");
var import_styled_system38 = require("@inkeep/styled-system");
var import_react16 = require("react");
var import_jsx_runtime12 = require("react/jsx-runtime");
var { withProvider: withProvider8, withContext: withContext8 } = createStyleContext(import_styled_system38.modal);
var DialogRoot = createThemeStyled(
  withProvider8((0, import_styled_system37.styled)(Ark3.Dialog.Root), "root"),
  "Modal"
);
var DialogBackdrop = withContext8((0, import_styled_system37.styled)(Ark3.Dialog.Backdrop), "backdrop");
var DialogCloseTrigger = withContext8(
  // TODO recipe extension
  (0, import_styled_system37.styled)(Ark3.Dialog.CloseTrigger, import_styled_system38.closeButton),
  "closeTrigger"
);
var DialogContainer = withContext8((0, import_styled_system37.styled)(Ark3.Dialog.Container), "container");
var DialogContent = withContext8((0, import_styled_system37.styled)(Ark3.Dialog.Content), "content");
var OverrideDialogDescription = (0, import_react16.forwardRef)((props, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Ark3.Dialog.Description, { as: "div", ...props, ref });
});
var DialogDescription = withContext8(
  (0, import_styled_system37.styled)(OverrideDialogDescription),
  "description"
);
var DialogTitle = withContext8((0, import_styled_system37.styled)(Ark3.Dialog.Title), "title");
var DialogTrigger = withContext8((0, import_styled_system37.styled)(Ark3.Dialog.Trigger), "trigger");
var DialogFooter = withContext8((0, import_styled_system37.styled)("div"), "footer");
var Modal = Object.assign(DialogRoot, {
  Root: DialogRoot,
  Overlay: DialogBackdrop,
  Close: DialogCloseTrigger,
  Container: DialogContainer,
  Content: DialogContent,
  Body: DialogDescription,
  Header: DialogTitle,
  Trigger: DialogTrigger,
  Footer: DialogFooter
});
var ModalCloseButton = (0, import_styled_system37.styled)("button", import_styled_system38.closeButton);

// src/ui/popover.tsx
var Ark4 = __toESM(require("@ark-ui/react/popover"));
var import_styled_system39 = require("@inkeep/styled-system");
var import_styled_system40 = require("@inkeep/styled-system");
var { withProvider: withProvider9, withContext: withContext9 } = createStyleContext(import_styled_system40.popover);
var PopoverRoot = createThemeStyled(
  withProvider9((0, import_styled_system39.styled)(Ark4.Popover.Root)),
  "Popover"
);
var PopoverAnchor = withContext9((0, import_styled_system39.styled)(Ark4.Popover.Anchor), "anchor");
var PopoverArrow = withContext9((0, import_styled_system39.styled)(Ark4.Popover.Arrow), "arrow");
var PopoverArrowTip = withContext9((0, import_styled_system39.styled)(Ark4.Popover.ArrowTip), "arrowTip");
var PopoverCloseTrigger = withContext9(
  (0, import_styled_system39.styled)(Ark4.Popover.CloseTrigger),
  "closeTrigger"
);
var PopoverContent = withContext9((0, import_styled_system39.styled)(Ark4.Popover.Content), "content");
var PopoverDescription = withContext9(
  (0, import_styled_system39.styled)(Ark4.Popover.Description),
  "description"
);
var PopoverFooter = withContext9((0, import_styled_system39.styled)("div"), "footer");
var PopoverPositioner = withContext9(
  (0, import_styled_system39.styled)(Ark4.Popover.Positioner),
  "positioner"
);
var PopoverTitle = withContext9((0, import_styled_system39.styled)(Ark4.Popover.Title), "title");
var PopoverTrigger = withContext9((0, import_styled_system39.styled)(Ark4.Popover.Trigger), "trigger");
var Popover2 = Object.assign(PopoverRoot, {
  Root: PopoverRoot,
  Anchor: PopoverAnchor,
  Arrow: PopoverArrow,
  ArrowTip: PopoverArrowTip,
  CloseTrigger: PopoverCloseTrigger,
  Content: PopoverContent,
  Description: PopoverDescription,
  Footer: PopoverFooter,
  Positioner: PopoverPositioner,
  Title: PopoverTitle,
  Trigger: PopoverTrigger
});

// src/ui/portal.tsx
var import_react17 = require("react");
var import_react_dom = require("react-dom");
var import_react18 = require("react");
var useSafeLayoutEffect = typeof document !== "undefined" ? import_react18.useLayoutEffect : import_react18.useEffect;
function Portal(props) {
  const { children, target, tag: tag2, host: hostProp } = props;
  const node = (0, import_react17.useRef)(null);
  const portalNode = (0, import_react17.useRef)(null);
  const [, forceUpdate] = (0, import_react17.useReducer)((s) => s + 1, 0);
  useSafeLayoutEffect(() => {
    if (!node.current)
      return;
    const doc = node.current.ownerDocument;
    const host = hostProp ?? doc.body;
    portalNode.current = doc.createElement(tag2 ?? "inkeep-portal");
    host.appendChild(portalNode.current);
    forceUpdate();
    return () => {
      if (portalNode.current) {
        host.removeChild(portalNode.current);
      }
    };
  }, []);
  const targetNode = target?.current ?? portalNode.current;
  if (targetNode) {
    return (0, import_react_dom.createPortal)(children, targetNode);
  }
  return (0, import_react17.createElement)("span", { ref: node });
}

// src/ui/select.tsx
var Ark5 = __toESM(require("@ark-ui/react/select"));
var import_styled_system41 = require("@inkeep/styled-system");
var import_styled_system42 = require("@inkeep/styled-system");
var { withProvider: withProvider10, withContext: withContext10 } = createStyleContext(import_styled_system42.select);
var SelectRoot = createThemeStyled(
  withProvider10(
    (0, import_styled_system41.styled)(
      Ark5.Select.Root
    ),
    "root"
  ),
  "Select"
);
var SelectClearTrigger = withContext10(
  (0, import_styled_system41.styled)(Ark5.Select.ClearTrigger),
  "clearTrigger"
);
var SelectContent = withContext10((0, import_styled_system41.styled)(Ark5.Select.Content), "content");
var SelectControl = withContext10((0, import_styled_system41.styled)(Ark5.Select.Control), "control");
var SelectItem = withContext10(
  (0, import_styled_system41.styled)(
    Ark5.Select.Item
  ),
  "item"
);
var SelectItemGroup = withContext10(
  (0, import_styled_system41.styled)(Ark5.Select.ItemGroup),
  "itemGroup"
);
var SelectItemGroupLabel = withContext10(
  (0, import_styled_system41.styled)(Ark5.Select.ItemGroupLabel),
  "itemGroupLabel"
);
var SelectItemIndicator = withContext10(
  (0, import_styled_system41.styled)(Ark5.Select.ItemIndicator),
  "itemIndicator"
);
var SelectItemText = withContext10((0, import_styled_system41.styled)(Ark5.Select.ItemText), "itemText");
var SelectLabel = withContext10((0, import_styled_system41.styled)(Ark5.Select.Label), "label");
var SelectPositioner = withContext10(
  (0, import_styled_system41.styled)(Ark5.Select.Positioner),
  "positioner"
);
var SelectTrigger = withContext10((0, import_styled_system41.styled)(Ark5.Select.Trigger), "trigger");
var SelectValue = withContext10((0, import_styled_system41.styled)(Ark5.Select.Value), "value");
var Select2 = Object.assign(SelectRoot, {
  Root: SelectRoot,
  ClearTrigger: SelectClearTrigger,
  Content: SelectContent,
  Control: SelectControl,
  Item: SelectItem,
  ItemGroup: SelectItemGroup,
  ItemGroupLabel: SelectItemGroupLabel,
  ItemIndicator: SelectItemIndicator,
  ItemText: SelectItemText,
  Label: SelectLabel,
  Positioner: SelectPositioner,
  Trigger: SelectTrigger,
  Value: SelectValue
});

// src/ui/skeleton.tsx
var import_vars = require("@inkeep/preset-chakra/vars");
var import_styled_system43 = require("@inkeep/styled-system");
var import_styled_system44 = require("@inkeep/styled-system");
var import_react19 = require("react");
var import_jsx_runtime13 = require("react/jsx-runtime");
var SkeletonRoot = (0, import_styled_system43.styled)("div", import_styled_system44.skeleton);
var Skeleton = createThemeStyled(
  (0, import_react19.forwardRef)(
    ({ children, startColor, endColor, style, ...props }, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
        SkeletonRoot,
        {
          ...props,
          style: {
            // @ts-ignore
            [import_vars.cssVariables.skeleton["start-color"].name]: startColor,
            // @ts-ignore
            [import_vars.cssVariables.skeleton["end-color"].name]: endColor,
            ...style
          },
          ref,
          children
        }
      );
    }
  ),
  "Skeleton"
);

// src/ui/switch.tsx
var Ark6 = __toESM(require("@ark-ui/react/switch"));
var import_styled_system45 = require("@inkeep/styled-system");
var import_styled_system46 = require("@inkeep/styled-system");
var { withProvider: withProvider11, withContext: withContext11 } = createStyleContext(import_styled_system46.switchRecipe);
var SwitchRoot = createThemeStyled(
  withProvider11(
    (0, import_styled_system45.styled)(
      Ark6.Switch.Root
    ),
    "root"
  ),
  "Switch"
);
var SwitchControl = withContext11((0, import_styled_system45.styled)(Ark6.Switch.Control), "control");
var SwitchLabel = withContext11((0, import_styled_system45.styled)(Ark6.Switch.Label), "label");
var SwitchThumb = withContext11((0, import_styled_system45.styled)(Ark6.Switch.Thumb), "thumb");
var Switch2 = Object.assign(SwitchRoot, {
  Root: SwitchRoot,
  Control: SwitchControl,
  Label: SwitchLabel,
  Thumb: SwitchThumb
});

// src/ui/table.tsx
var import_styled_system47 = require("@inkeep/styled-system");
var import_styled_system48 = require("@inkeep/styled-system");
var { withProvider: withProvider12, withContext: withContext12 } = createStyleContext(import_styled_system48.table);
var TableContainer = createThemeStyled(
  withProvider12((0, import_styled_system47.styled)("div"), "container"),
  "Table"
);
var TableRoot = createThemeStyled(
  withProvider12((0, import_styled_system47.styled)("table"), "table"),
  "Table"
);
var TableBody = withContext12((0, import_styled_system47.styled)("tbody"), "tbody");
var TableCaption = withContext12((0, import_styled_system47.styled)("caption"), "caption");
var TableCell = withContext12((0, import_styled_system47.styled)("td"), "td");
var TableFooter = withContext12((0, import_styled_system47.styled)("tfoot"), "tfoot");
var TableHead = withContext12((0, import_styled_system47.styled)("th"), "th");
var TableHeader = withContext12((0, import_styled_system47.styled)("thead"), "thead");
var TableRow = withContext12((0, import_styled_system47.styled)("tr"), "tr");
var Table = Object.assign(TableRoot, {
  Container: TableContainer,
  Table: TableRoot,
  Root: withContext12((0, import_styled_system47.styled)("table"), "table"),
  Body: TableBody,
  Caption: TableCaption,
  Cell: TableCell,
  Footer: TableFooter,
  Head: TableHead,
  Header: TableHeader,
  Row: TableRow
});

// src/ui/tabs.tsx
var Ark7 = __toESM(require("@ark-ui/react/tabs"));
var import_styled_system49 = require("@inkeep/styled-system");
var import_styled_system50 = require("@inkeep/styled-system");
var { withProvider: withProvider13, withContext: withContext13 } = createStyleContext(import_styled_system50.tabs);
var TabsRoot = createThemeStyled(
  withProvider13(
    (0, import_styled_system49.styled)(
      Ark7.Tabs.Root
    ),
    "root"
  ),
  "Tabs"
);
var TabContent = withContext13(
  (0, import_styled_system49.styled)(
    Ark7.Tabs.Content
  ),
  "content"
);
var TabPanels = withContext13((0, import_styled_system49.styled)("div"), "panels");
var TabIndicator = withContext13((0, import_styled_system49.styled)(Ark7.Tabs.Indicator), "indicator");
var TabList = withContext13((0, import_styled_system49.styled)(Ark7.Tabs.List), "list");
var TabTrigger = withContext13(
  (0, import_styled_system49.styled)(
    Ark7.Tabs.Trigger
  ),
  "trigger"
);
var Tabs2 = Object.assign(TabsRoot, {
  Root: TabsRoot,
  Panels: TabPanels,
  Content: TabContent,
  Indicator: TabIndicator,
  List: TabList,
  Trigger: TabTrigger
});

// src/ui/tag.tsx
var import_styled_system51 = require("@inkeep/styled-system");
var import_styled_system52 = require("@inkeep/styled-system");
var Tag = createThemeStyled((0, import_styled_system51.styled)("span", import_styled_system52.tag), "Tag");

// src/ui/text.ts
var import_styled_system53 = require("@inkeep/styled-system");
var Text = import_styled_system53.styled.span;

// src/ui/textarea.tsx
var import_react20 = require("react");
var import_styled_system54 = require("@inkeep/styled-system");
var import_styled_system55 = require("@inkeep/styled-system");
var import_react21 = require("@ark-ui/react");
var import_jsx_runtime14 = require("react/jsx-runtime");
var StyledTextarea = createThemeStyled(
  (0, import_styled_system54.styled)(import_react21.ark.textarea, import_styled_system55.textarea),
  "Textarea"
);
var Textarea = (0, import_react20.forwardRef)(
  function Textarea2(props, ref) {
    const fieldProps = useFormControl(props);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(StyledTextarea, { ref, ...fieldProps });
  }
);
Textarea.displayName = "Textarea";

// src/ui/tooltip.tsx
var Ark8 = __toESM(require("@ark-ui/react/tooltip"));
var import_styled_system56 = require("@inkeep/styled-system");
var import_styled_system57 = require("@inkeep/styled-system");
var { withProvider: withProvider14, withContext: withContext14 } = createStyleContext(import_styled_system57.tooltip);
var TooltipRoot = createThemeStyled(
  withProvider14((0, import_styled_system56.styled)(Ark8.Tooltip.Root)),
  "Tooltip"
);
var TooltipArrow = withContext14((0, import_styled_system56.styled)(Ark8.Tooltip.Arrow), "arrow");
var TooltipArrowTip = withContext14((0, import_styled_system56.styled)(Ark8.Tooltip.ArrowTip), "arrowTip");
var TooltipContent = withContext14((0, import_styled_system56.styled)(Ark8.Tooltip.Content), "content");
var TooltipPositioner = withContext14(
  (0, import_styled_system56.styled)(Ark8.Tooltip.Positioner),
  "positioner"
);
var TooltipTrigger = withContext14((0, import_styled_system56.styled)(Ark8.Tooltip.Trigger), "trigger");
var Tooltip2 = Object.assign(TooltipRoot, {
  Root: TooltipRoot,
  Arrow: TooltipArrow,
  ArrowTip: TooltipArrowTip,
  Content: TooltipContent,
  Positioner: TooltipPositioner,
  Trigger: TooltipTrigger
});

// src/hooks/use-callback-ref.ts
var import_react22 = require("react");
function useCallbackRef(callback, deps = []) {
  const callbackRef = (0, import_react22.useRef)(callback);
  (0, import_react22.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react22.useCallback)((...args) => callbackRef.current?.(...args), deps);
}

// src/hooks/use-disclosure.ts
var import_react23 = require("react");
function useDisclosure(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const handleOpen = useCallbackRef(onOpenProp);
  const handleClose = useCallbackRef(onCloseProp);
  const [isOpenState, setIsOpen] = (0, import_react23.useState)(props.defaultIsOpen || false);
  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
  const isControlled = isOpenProp !== void 0;
  const uid = (0, import_react23.useId)();
  const id = idProp ?? `disclosure-${uid}`;
  const onClose = (0, import_react23.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    handleClose?.();
  }, [isControlled, handleClose]);
  const onOpen = (0, import_react23.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    handleOpen?.();
  }, [isControlled, handleOpen]);
  const onToggle = (0, import_react23.useCallback)(() => {
    if (isOpen) {
      onClose();
    } else {
      onOpen();
    }
  }, [isOpen, onOpen, onClose]);
  function getButtonProps(props2 = {}) {
    return {
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id,
      onClick(event) {
        props2.onClick?.(event);
        onToggle();
      }
    };
  }
  function getDisclosureProps(props2 = {}) {
    return {
      ...props2,
      hidden: !isOpen,
      id
    };
  }
  return {
    isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps,
    getDisclosureProps
  };
}

// src/hooks/use-media-query.ts
var import_react24 = require("react");
function useMediaQuery(query, options = {}) {
  const { ssr = true, fallback } = options;
  const getWindow = (0, import_react24.useCallback)(() => window, []);
  const queries = Array.isArray(query) ? query : [query];
  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = (0, import_react24.useState)(() => {
    return queries.map((query2, index) => ({
      media: query2,
      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches
    }));
  });
  (0, import_react24.useEffect)(() => {
    const win = getWindow();
    setValue(
      queries.map((query2) => ({
        media: query2,
        matches: win.matchMedia(query2).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (evt) => {
      setValue((prev) => {
        return prev.slice().map((item) => {
          if (item.media === evt.media)
            return { ...item, matches: evt.matches };
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof mql2.addListener === "function") {
        mql2.addListener(handler);
      } else {
        mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof mql2.removeListener === "function") {
          mql2.removeListener(handler);
        } else {
          mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Alert,
  Avatar,
  Badge,
  Button,
  ButtonIcon,
  Card,
  Checkbox,
  Code,
  Collapse,
  FormControl,
  FormLabel,
  Heading,
  Icon,
  IconButton,
  Image,
  Input,
  Kbd,
  Link,
  List,
  Modal,
  ModalCloseButton,
  Popover,
  Portal,
  Select,
  Skeleton,
  Switch,
  Table,
  Tabs,
  Tag,
  Text,
  Textarea,
  ThemePropsProvider,
  Tooltip,
  createContext,
  createStyleContext,
  createThemeStyled,
  useDisclosure,
  useMediaQuery,
  useThemeProps
});
