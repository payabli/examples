import * as react from 'react';
import { ElementType, ComponentProps, ComponentPropsWithoutRef, ForwardRefExoticComponent, ReactNode, ReactElement } from 'react';
import * as _inkeep_styled_system from '@inkeep/styled-system';
import { SystemStyleObject, AvatarVariantProps, HTMLStyledProps, ButtonVariantProps, styled, CheckboxVariantProps, Assign, CssVarProperties, FormControlVariantProps, ComponentProps as ComponentProps$1, RecipeVariantProps, InputVariantProps, ModalVariantProps, SelectVariantProps, SkeletonVariantProps, SwitchRecipeVariantProps, TableVariantProps, TabsVariantProps, TextareaVariantProps, TooltipVariantProps } from '@inkeep/styled-system';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as Ark from '@ark-ui/react/avatar';
import { PreferRight } from '@inkeep/shared';
import * as zag from '@zag-js/avatar';
import * as Ark$1 from '@ark-ui/react/checkbox';
import * as zag$1 from '@zag-js/checkbox';
import { PropTypes } from '@zag-js/react';
import { Transition, Target, HTMLMotionProps } from 'framer-motion';
import * as _ark_ui_react from '@ark-ui/react';
import { HTMLArkProps, ark } from '@ark-ui/react';
import * as Ark$2 from '@ark-ui/react/dialog';
import * as Ark$3 from '@ark-ui/react/popover';
import * as Ark$4 from '@ark-ui/react/select';
import { CollectionItem } from '@ark-ui/react/select';
import * as zag$2 from '@zag-js/select';
import * as Ark$5 from '@ark-ui/react/switch';
import * as zag$3 from '@zag-js/switch';
import * as Ark$6 from '@ark-ui/react/tabs';
import * as presence from '@zag-js/presence';
import * as zag$4 from '@zag-js/tabs';
import * as Ark$7 from '@ark-ui/react/tooltip';

type AnyProps = Record<string, unknown>;
type AnyRecipe = {
    (props?: AnyProps): Record<string, string>;
    splitVariantProps: (props: AnyProps) => any;
};
type VariantProps<R extends AnyRecipe> = Parameters<R>[0];
interface StyledContextProvider<T extends ElementType, R extends AnyRecipe> {
    (props: ComponentProps<T> & VariantProps<R>): JSX.Element;
}
declare const createStyleContext: <R extends AnyRecipe>(recipe: R) => {
    withProvider: <T extends ElementType>(Component: T, slot?: keyof ReturnType<R> | undefined, defaultProps?: (Partial<T> & {
        className?: string | undefined;
    }) | undefined) => StyledContextProvider<T, R>;
    withContext: <T_1 extends ElementType>(Component: T_1, slot?: keyof ReturnType<R> | undefined, defaultProps?: (Partial<T_1> & {
        className?: string | undefined;
    }) | undefined) => T_1;
};

interface IconProps extends ComponentPropsWithoutRef<'svg'> {
    css?: SystemStyleObject;
}
declare function CheckIcon({ css: cssProp, ...props }: IconProps): react_jsx_runtime.JSX.Element;
declare function InfoIcon({ css: cssProp, ...props }: IconProps): react_jsx_runtime.JSX.Element;
declare function WarningIcon({ css: cssProp, ...props }: IconProps): react_jsx_runtime.JSX.Element;
declare const Alert: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.AlertRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.AlertRecipe>;
    InfoIcon: typeof InfoIcon;
    WarningIcon: typeof WarningIcon;
    SuccessIcon: typeof CheckIcon;
    ErrorIcon: typeof WarningIcon;
};

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

interface StyleProps$d extends HTMLStyledProps<typeof Ark.Avatar.Root> {
}
interface JsxProps$b extends PreferRight<Ark.AvatarProps, StyleProps$d> {
}
interface AvatarProps extends JsxProps$b, AvatarVariantProps {
}
interface UseAvatarProps$1 extends Optional<zag.Context, 'id'> {
}
declare const Avatar: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseAvatarProps$1>, {}>, _inkeep_styled_system.AvatarRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseAvatarProps$1>, {}>, _inkeep_styled_system.AvatarRecipe>;
    Fallback: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
    Image: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLImageElement>>, {}>;
};

declare const Badge: _inkeep_styled_system.StyledComponent<"span", _inkeep_styled_system.BadgeVariantProps>;

declare const ButtonRoot: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | react.RefObject<HTMLButtonElement> | null | undefined;
} & {
    asChild?: boolean | undefined;
}>, ButtonVariantProps>;
interface StyleProps$c extends ComponentPropsWithoutRef<typeof ButtonRoot> {
}
interface ButtonProps extends StyleProps$c, Omit<ButtonVariantProps, 'colorPalette'> {
    leftIcon?: ReactNode;
}
/**
 * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.
 *
 * @see Docs https://chakra-ui.com/docs/components/button
 * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/
 */
declare const Button: react.ForwardRefExoticComponent<ButtonProps & react.RefAttributes<_inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | react.RefObject<HTMLButtonElement> | null | undefined;
} & {
    asChild?: boolean | undefined;
}>, ButtonVariantProps>>>;

interface ButtonIconProps extends ComponentPropsWithoutRef<typeof styled.span> {
}
declare const ButtonIcon: _inkeep_styled_system.StyledComponent<"span", {}>;

declare const Card: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.CardRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.CardRecipe>;
    Body: _inkeep_styled_system.StyledComponent<"div", {}>;
    Header: _inkeep_styled_system.StyledComponent<"div", {}>;
    Footer: _inkeep_styled_system.StyledComponent<"div", {}>;
};

interface CheckboxIconProps extends HTMLStyledProps<'svg'> {
    /**
     * @default false
     */
    isIndeterminate?: boolean;
    /**
     * @default false
     */
    isChecked?: boolean;
}
/**
 * CheckboxIcon is used to visually indicate the checked or indeterminate
 * state of a checkbox.
 *
 * @todo allow users pass their own icon svgs
 */
declare function CheckboxIcon(props: CheckboxIconProps): react_jsx_runtime.JSX.Element | null;

interface StyleProps$b extends HTMLStyledProps<'label'> {
}
interface JsxProps$a extends PreferRight<Ark$1.CheckboxProps, StyleProps$b> {
}
interface CheckboxProps extends JsxProps$a, CheckboxVariantProps {
}
interface UseCheckboxProps extends Optional<zag$1.Context, 'id'> {
    defaultChecked?: zag$1.Context['checked'];
}
declare const Checkbox: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Assign<react.ClassAttributes<HTMLLabelElement> & react.LabelHTMLAttributes<HTMLLabelElement> & UseCheckboxProps, {
    children?: ReactNode | ((pages: zag$1.Api<PropTypes>) => ReactNode);
}>>, {}>, _inkeep_styled_system.CheckboxRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Assign<react.ClassAttributes<HTMLLabelElement> & react.LabelHTMLAttributes<HTMLLabelElement> & UseCheckboxProps, {
        children?: ReactNode | ((pages: zag$1.Api<PropTypes>) => ReactNode);
    }>>, {}>, _inkeep_styled_system.CheckboxRecipe>;
    Control: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Label: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
    Icon: typeof CheckboxIcon;
};

declare const Code: _inkeep_styled_system.StyledComponent<"code", _inkeep_styled_system.CodeVariantProps>;

type TransitionProperties = {
    /**
     * Custom `transition` definition for `enter` and `exit`
     */
    transition?: TransitionConfig;
    /**
     * Custom `transitionEnd` definition for `enter` and `exit`
     */
    transitionEnd?: TransitionEndConfig;
    /**
     * Custom `delay` definition for `enter` and `exit`
     */
    delay?: number | DelayConfig;
};
type WithMotionState<P> = Partial<Record<'enter' | 'exit', P>>;
type TransitionConfig = WithMotionState<Transition>;
type TransitionEndConfig = WithMotionState<Target>;
type DelayConfig = WithMotionState<number>;
type WithTransitionConfig<P extends object> = Omit<P, 'transition'> & TransitionProperties & {
    /**
     * If `true`, the element will unmount when `in={false}` and animation is done
     */
    unmountOnExit?: boolean;
    /**
     * Show the component; triggers when enter or exit states
     */
    in?: boolean;
};

interface CollapseOptions {
    /**
     * If `true`, the opacity of the content will be animated
     * @default true
     */
    animateOpacity?: boolean;
    /**
     * The height you want the content in its collapsed state.
     * @default 0
     */
    startingHeight?: number | string;
    /**
     * The height you want the content in its expanded state.
     * @default "auto"
     */
    endingHeight?: number | string;
}
type ICollapse = CollapseProps;
interface CollapseProps extends WithTransitionConfig<HTMLMotionProps<'div'>>, CollapseOptions {
}
declare const Collapse: react.ForwardRefExoticComponent<CollapseProps & react.RefAttributes<HTMLDivElement>>;

interface CreateContextOptions<T> {
    strict?: boolean;
    hookName?: string;
    providerName?: string;
    errorMessage?: string;
    name?: string;
    defaultValue?: T;
}
type CreateContextReturn<T> = [
    React.Provider<T>,
    () => T,
    React.Context<T>
];
declare function createContext<T>(options?: CreateContextOptions<T>): CreateContextReturn<T>;

declare const createThemeStyled: <T extends ElementType, P extends ComponentProps<T> = ComponentProps<T>>(Component: T, name: string) => T;
interface UserThemeProps<TProps = Record<string, unknown>> {
    defaultProps?: TProps;
    className?: string;
    style?: React.CSSProperties & CssVarProperties;
}
interface ThemePropsContext extends Record<string, UserThemeProps | undefined> {
}
declare const ThemePropsProvider: react.Provider<ThemePropsContext>;
declare const useThemeProps: () => ThemePropsContext;

interface FormControlOptions {
    /**
     * If `true`, the form control will be required. This has 2 side effects:
     * - The `FormLabel` will show a required indicator
     * - The form element (e.g, Input) will have `aria-required` set to `true`
     *
     * @default false
     */
    isRequired?: boolean;
    /**
     * If `true`, the form control will be disabled. This has 2 side effects:
     * - The `FormLabel` will have `data-disabled` attribute
     * - The form element (e.g, Input) will be disabled
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, the form control will be invalid. This has 2 side effects:
     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`
     * - The form element (e.g, Input) will have `aria-invalid` set to `true`
     *
     * @default false
     */
    isInvalid?: boolean;
    /**
     * If `true`, the form control will be readonly
     *
     * @default false
     */
    isReadOnly?: boolean;
}

declare const Icon: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & {
    ref?: ((instance: SVGSVGElement | null) => void) | react.RefObject<SVGSVGElement> | null | undefined;
} & {
    asChild?: boolean | undefined;
}>, _inkeep_styled_system.IconVariantProps>;
declare const IconButton: react.ForwardRefExoticComponent<ButtonProps & react.RefAttributes<react.ForwardRefExoticComponent<ButtonProps & react.RefAttributes<_inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | react.RefObject<HTMLButtonElement> | null | undefined;
} & {
    asChild?: boolean | undefined;
}>, _inkeep_styled_system.ButtonVariantProps>>>>>;

interface StyleProps$a extends HTMLStyledProps<'div'> {
}
interface JsxProps$9 extends PreferRight<ComponentProps$1<'div'>, StyleProps$a> {
}
interface FormControlContext extends FormControlOptions {
    /**
     * The label text used to inform users as to what information is
     * requested for a text field.
     */
    label?: string;
    /**
     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).
     * - The form element (e.g. Input) gets the `id`
     * - The form label id: `form-label-${id}`
     * - The form error text id: `form-error-text-${id}`
     * - The form helper text id: `form-helper-text-${id}`
     */
    id?: string;
}
interface FormControlProps extends Omit<JsxProps$9, 'size'>, FormControlVariantProps, FormControlContext {
}
interface FormLabelProps extends HTMLStyledProps<'label'> {
}
declare const FormLabel: _inkeep_styled_system.StyledComponent<"label", {}>;
interface FormRequiredIndicatorProps extends HTMLStyledProps<'span'> {
}
interface FormHelperTextProps extends HTMLStyledProps<'div'> {
}
interface FormErrorProps extends HTMLStyledProps<'div'> {
}
interface FormErrorIconProps extends HTMLStyledProps<typeof Icon> {
}
declare const FormControl: react.ForwardRefExoticComponent<Omit<FormControlProps, "ref"> & react.RefAttributes<"div">> & {
    Container: react.ForwardRefExoticComponent<Omit<FormControlProps, "ref"> & react.RefAttributes<"div">>;
    Label: react.ForwardRefExoticComponent<Omit<any, "ref"> & react.RefAttributes<unknown>>;
    Helper: react.ForwardRefExoticComponent<Omit<any, "ref"> & react.RefAttributes<unknown>>;
    RequiredIndicator: react.ForwardRefExoticComponent<Omit<any, "ref"> & react.RefAttributes<unknown>>;
    Error: react.ForwardRefExoticComponent<Omit<any, "ref"> & react.RefAttributes<unknown>>;
    ErrorIcon: react.ForwardRefExoticComponent<Omit<FormErrorIconProps, "ref"> & react.RefAttributes<_inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.SVGProps<SVGSVGElement>, "ref"> & {
        ref?: ((instance: SVGSVGElement | null) => void) | react.RefObject<SVGSVGElement> | null | undefined;
    } & {
        asChild?: boolean | undefined;
    }>, _inkeep_styled_system.IconVariantProps>>>;
};

declare const Heading: _inkeep_styled_system.StyledComponent<"h2", _inkeep_styled_system.HeadingVariantProps>;

declare const Image: _inkeep_styled_system.StyledComponent<"img", {}>;

declare const styles: _inkeep_styled_system.RecipeRuntimeFn<{
    placement: {
        left: {
            marginEnd: "-1px";
            borderEndRadius: number;
            borderEndColor: "transparent";
        };
        right: {
            marginStart: "-1px";
            borderStartRadius: number;
            borderStartColor: "transparent";
        };
    };
}>;
interface InputAddonProps extends HTMLStyledProps<'div'>, NonNullable<RecipeVariantProps<typeof styles>> {
}

interface StyleProps$9 extends HTMLStyledProps<'input'> {
}
interface JsxProps$8 extends PreferRight<ComponentProps$1<'input'>, StyleProps$9> {
}
interface InputProps extends Omit<JsxProps$8, 'size'>, InputVariantProps, FormControlOptions {
}
declare const Input: react.ForwardRefExoticComponent<Omit<InputProps, "ref"> & react.RefAttributes<"span">> & {
    Root: react.ForwardRefExoticComponent<Omit<InputProps, "ref"> & react.RefAttributes<"span">>;
    Group: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.InputRecipe>;
    Field: _inkeep_styled_system.StyledComponent<"input", {}>;
    Addon: react.ForwardRefExoticComponent<Omit<InputAddonProps, "ref"> & react.RefAttributes<HTMLDivElement>>;
};

declare const Kbd: _inkeep_styled_system.StyledComponent<"span", _inkeep_styled_system.KbdVariantProps>;

declare const LinkRoot: _inkeep_styled_system.StyledComponent<"a", _inkeep_styled_system.LinkVariantProps>;
interface StyleProps$8 extends ComponentPropsWithoutRef<typeof LinkRoot> {
}
interface LinkProps extends StyleProps$8, CheckboxVariantProps {
    /**
     *  If `true`, the link will open in new tab
     *
     * @default false
     */
    isExternal?: boolean;
}
/**
 * Links are accessible elements used primarily for navigation.
 *
 * It integrates well with other routing libraries like
 * React Router, Reach Router and Next.js Link.
 *
 * @example
 *
 * ```jsx
 * <Link as={ReactRouterLink} to="/home">Home</Link>
 * ```
 *
 * @see Docs https://chakra-ui.com/link
 */
declare const Link: react.ForwardRefExoticComponent<LinkProps & react.RefAttributes<_inkeep_styled_system.StyledComponent<"a", _inkeep_styled_system.LinkVariantProps>>>;

declare const List: StyledContextProvider<_inkeep_styled_system.StyledComponent<"ul", {}>, _inkeep_styled_system.SlotRecipeRuntimeFn<"ol" | "ul" | "icon" | "item", _inkeep_styled_system.SlotRecipeVariantRecord<"ol" | "ul" | "icon" | "item">>> & {
    Unordered: StyledContextProvider<_inkeep_styled_system.StyledComponent<"ul", {}>, _inkeep_styled_system.SlotRecipeRuntimeFn<"ol" | "ul" | "icon" | "item", _inkeep_styled_system.SlotRecipeVariantRecord<"ol" | "ul" | "icon" | "item">>>;
    Ordered: StyledContextProvider<_inkeep_styled_system.StyledComponent<"ol", {}>, _inkeep_styled_system.SlotRecipeRuntimeFn<"ol" | "ul" | "icon" | "item", _inkeep_styled_system.SlotRecipeVariantRecord<"ol" | "ul" | "icon" | "item">>>;
    Item: _inkeep_styled_system.StyledComponent<"li", {}>;
    Icon: _inkeep_styled_system.StyledComponent<"li", {}>;
};

interface StyleProps$7 extends HTMLStyledProps<typeof Ark$2.Dialog.Root> {
}
interface JsxProps$7 extends PreferRight<Ark$2.DialogProps, StyleProps$7> {
}
interface ModalProps extends JsxProps$7, ModalVariantProps {
}
declare const Modal: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$2.DialogProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.ModalRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$2.DialogProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.ModalRecipe>;
    Overlay: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<_ark_ui_react.HTMLArkProps<"div">, "unmountOnExit" | "present" | "onExitComplete" | "lazyMount"> & Omit<_ark_ui_react.PresenceProps, "children"> & react.RefAttributes<HTMLDivElement>>, {}>;
    Close: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, _inkeep_styled_system.CloseButtonVariantProps>;
    Container: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Content: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<_ark_ui_react.HTMLArkProps<"div">, "unmountOnExit" | "present" | "onExitComplete" | "lazyMount"> & Omit<_ark_ui_react.PresenceProps, "children"> & react.RefAttributes<HTMLDivElement>>, {}>;
    Body: ForwardRefExoticComponent<{
        slot?: string | undefined;
        style?: react.CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        ref?: react.Ref<HTMLDivElement> | undefined;
        children?: react.ReactNode;
        suppressHydrationWarning?: boolean | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        hidden?: boolean | undefined;
        key?: react.Key | null | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: react.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "text" | "none" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "time" | "true" | "false" | "date" | "page" | "step" | "location" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "true" | "false") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-haspopup"?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "true" | "false" | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        htmlWidth?: string | number | undefined;
        htmlHeight?: string | number | undefined;
        htmlTranslate?: "no" | "yes" | undefined;
        htmlContent?: string | undefined;
    } & _inkeep_styled_system.SystemProperties & _inkeep_styled_system.MinimalNested<_inkeep_styled_system.SystemStyleObject> & _inkeep_styled_system.WithCss & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
        asChild?: boolean | undefined;
    }>;
    Header: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLHeadingElement>>, {}>;
    Trigger: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
    Footer: _inkeep_styled_system.StyledComponent<"div", {}>;
};
declare const ModalCloseButton: _inkeep_styled_system.StyledComponent<"button", _inkeep_styled_system.CloseButtonVariantProps>;

interface StyleProps$6 extends HTMLStyledProps<typeof Ark$3.Popover.Root> {
}
interface JsxProps$6 extends PreferRight<Ark$3.PopoverProps, StyleProps$6> {
}
interface PopoverProps extends JsxProps$6 {
}
declare const Popover: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$3.PopoverProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.PopoverRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$3.PopoverProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.PopoverRecipe>;
    Anchor: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Arrow: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    ArrowTip: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    CloseTrigger: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
    Content: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<_ark_ui_react.HTMLArkProps<"div">, "unmountOnExit" | "present" | "onExitComplete" | "lazyMount"> & Omit<_ark_ui_react.PresenceProps, "children"> & react.RefAttributes<HTMLDivElement>>, {}>;
    Description: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLParagraphElement>>, {}>;
    Footer: _inkeep_styled_system.StyledComponent<"div", {}>;
    Positioner: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Title: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Trigger: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
};

interface PortalProps {
    children: React.ReactNode;
    target?: React.RefObject<HTMLElement>;
    tag?: string;
    host?: HTMLElement | null;
}
declare function Portal(props: PortalProps): JSX.Element;

interface StyleProps$5 extends HTMLStyledProps<typeof Ark$4.Select.Root> {
}
interface JsxProps$5<T extends Ark$4.CollectionItem> extends PreferRight<Ark$4.SelectProps<T>, StyleProps$5> {
}
interface SelectProps<T extends Ark$4.CollectionItem> extends JsxProps$5<T>, SelectVariantProps {
}
interface UseSelectProps<T extends CollectionItem> extends zag$2.CollectionOptions<T>, Omit<Optional<zag$2.Context<T>, 'id'>, 'collection'> {
    /**
     * The initial value of the select.
     */
    defaultValue?: zag$2.Context<T>['value'];
}
interface SelectItemProps extends Assign<HTMLArkProps<'div'>, {
    children?: React.ReactNode | ((props: zag$2.ItemState) => React.ReactNode);
}>, zag$2.ItemProps {
}
interface SelectItemGroupProps extends Assign<HTMLArkProps<'div'>, zag$2.ItemGroupProps> {
}
interface SelectItemGroupLabelProps extends Assign<HTMLArkProps<'div'>, zag$2.ItemGroupLabelProps> {
}
declare const Select: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseSelectProps<any>>, {}>, _inkeep_styled_system.SelectRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseSelectProps<any>>, {}>, _inkeep_styled_system.SelectRecipe>;
    ClearTrigger: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
    Content: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "unmountOnExit" | "present" | "onExitComplete" | "lazyMount"> & Omit<_ark_ui_react.PresenceProps, "children"> & react.RefAttributes<HTMLDivElement>>, {}>;
    Control: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Item: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & SelectItemProps>, {}>;
    ItemGroup: ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & SelectItemGroupProps>;
    ItemGroupLabel: ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & SelectItemGroupLabelProps>;
    ItemIndicator: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    ItemText: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Label: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLLabelElement>>, {}>;
    Positioner: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Trigger: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
    Value: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
};

interface SkeletonProps extends SkeletonVariantProps, HTMLStyledProps<'div'> {
    startColor?: string;
    endColor?: string;
}
/**
 * `Skeleton` is used to display the loading state of some component.
 *
 * @see Docs https://chakra-ui.com/docs/components/skeleton
 */
declare const Skeleton: react.ForwardRefExoticComponent<Omit<SkeletonProps, "ref"> & react.RefAttributes<_inkeep_styled_system.StyledComponent<"div", SkeletonVariantProps>>>;

interface StyleProps$4 extends HTMLStyledProps<'input'> {
}
interface JsxProps$4 extends PreferRight<Ark$5.SwitchProps, StyleProps$4> {
}
interface SwitchProps extends Omit<JsxProps$4, 'size'>, SwitchRecipeVariantProps {
}
interface UseSwitchProps extends Optional<zag$3.Context, 'id'> {
    /**
     * The initial checked state of the switch.
     */
    defaultChecked?: zag$3.Context['checked'];
}
interface UseAvatarProps extends Optional<zag$3.Context, 'id'> {
}
declare const Switch: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLLabelElement> & react.LabelHTMLAttributes<HTMLLabelElement> & UseAvatarProps>, {}>, _inkeep_styled_system.SwitchRecipeRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLLabelElement> & react.LabelHTMLAttributes<HTMLLabelElement> & UseAvatarProps>, {}>, _inkeep_styled_system.SwitchRecipeRecipe>;
    Control: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
    Label: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
    Thumb: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLSpanElement>>, {}>;
};

interface StyleProps$3 extends HTMLStyledProps<'div'> {
}
interface JsxProps$3 extends PreferRight<ComponentPropsWithoutRef<'div'>, StyleProps$3> {
}
interface TableProps extends JsxProps$3, TableVariantProps {
}
declare const Table: StyledContextProvider<_inkeep_styled_system.StyledComponent<"table", {}>, _inkeep_styled_system.TableRecipe> & {
    Container: StyledContextProvider<_inkeep_styled_system.StyledComponent<"div", {}>, _inkeep_styled_system.TableRecipe>;
    Table: StyledContextProvider<_inkeep_styled_system.StyledComponent<"table", {}>, _inkeep_styled_system.TableRecipe>;
    Root: _inkeep_styled_system.StyledComponent<"table", {}>;
    Body: _inkeep_styled_system.StyledComponent<"tbody", {}>;
    Caption: _inkeep_styled_system.StyledComponent<"caption", {}>;
    Cell: _inkeep_styled_system.StyledComponent<"td", {}>;
    Footer: _inkeep_styled_system.StyledComponent<"tfoot", {}>;
    Head: _inkeep_styled_system.StyledComponent<"th", {}>;
    Header: _inkeep_styled_system.StyledComponent<"thead", {}>;
    Row: _inkeep_styled_system.StyledComponent<"tr", {}>;
};

interface StyleProps$2 extends HTMLStyledProps<typeof Ark$6.Tabs.Root> {
}
interface JsxProps$2 extends PreferRight<Ark$6.TabsProps, StyleProps$2> {
}
interface TabsProps extends JsxProps$2, TabsVariantProps {
}
interface UseTabsProps extends Optional<zag$4.Context, 'id'> {
    /**
     * The initial value of the tabs.
     */
    defaultValue?: zag$4.Context['value'];
}
interface UsePresenceProps extends Optional<presence.Context, 'present'> {
}
interface PresenceProps extends UsePresenceProps {
    /**
     * Only a single child is allowed.
     */
    children: ReactElement;
    /**
     * Whether to enable lazy mounting
     * @default false
     */
    lazyMount?: boolean;
    /**
     * Whether to unmount on exit.
     * @default false
     */
    unmountOnExit?: boolean;
}
interface TabPresenceProps extends PresenceProps, zag$4.ContentProps {
}
type InnerTabContentProps = HTMLArkProps<'div'> & zag$4.ContentProps;
interface TabContentProps extends InnerTabContentProps, Omit<TabPresenceProps, 'children'> {
}
interface TabTriggerProps extends Assign<HTMLArkProps<'button'>, zag$4.TriggerProps> {
}
declare const Tabs: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseTabsProps>, {}>, _inkeep_styled_system.TabsRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & UseTabsProps>, {}>, _inkeep_styled_system.TabsRecipe>;
    Panels: _inkeep_styled_system.StyledComponent<"div", {}>;
    Content: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & TabContentProps>, {}>;
    Indicator: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    List: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Trigger: _inkeep_styled_system.StyledComponent<ForwardRefExoticComponent<react.ClassAttributes<HTMLDivElement> & react.HTMLAttributes<HTMLDivElement> & TabTriggerProps>, {}>;
};

declare const Tag: _inkeep_styled_system.StyledComponent<"span", _inkeep_styled_system.TagVariantProps>;

declare const Text: _inkeep_styled_system.StyledComponent<"span", {}>;

interface StyleProps$1 extends HTMLStyledProps<'textarea'> {
}
interface JsxProps$1 extends PreferRight<ComponentProps<typeof ark.textarea>, StyleProps$1> {
}
interface TextareaProps extends Omit<JsxProps$1, 'size'>, TextareaVariantProps, FormControlOptions {
}
declare const Textarea: react.ForwardRefExoticComponent<Omit<TextareaProps, "ref"> & react.RefAttributes<HTMLTextAreaElement>>;

interface StyleProps extends HTMLStyledProps<typeof Ark$7.Tooltip.Root> {
}
interface JsxProps extends PreferRight<Ark$7.TooltipProps, StyleProps> {
}
interface TooltipProps extends JsxProps, TooltipVariantProps {
}
declare const Tooltip: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$7.TooltipProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.TooltipRecipe> & {
    Root: StyledContextProvider<_inkeep_styled_system.StyledComponent<(props: Ark$7.TooltipProps) => react_jsx_runtime.JSX.Element, {}>, _inkeep_styled_system.TooltipRecipe>;
    Arrow: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    ArrowTip: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Content: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<_ark_ui_react.HTMLArkProps<"div">, "unmountOnExit" | "present" | "onExitComplete" | "lazyMount"> & Omit<_ark_ui_react.PresenceProps, "children"> & react.RefAttributes<HTMLDivElement>>, {}>;
    Positioner: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLDivElement>>, {}>;
    Trigger: _inkeep_styled_system.StyledComponent<react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & react.RefAttributes<HTMLButtonElement>>, {}>;
};

interface UseDisclosureProps {
    isOpen?: boolean;
    defaultIsOpen?: boolean;
    onClose?(): void;
    onOpen?(): void;
    id?: string;
}
type HTMLProps = React.HTMLAttributes<HTMLElement>;
/**
 * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.
 * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure
 */
declare function useDisclosure(props?: UseDisclosureProps): {
    isOpen: boolean;
    onOpen: () => void;
    onClose: () => void;
    onToggle: () => void;
    isControlled: boolean;
    getButtonProps: (props?: HTMLProps) => HTMLProps;
    getDisclosureProps: (props?: HTMLProps) => HTMLProps;
};
type UseDisclosureReturn = ReturnType<typeof useDisclosure>;

type UseMediaQueryOptions = {
    fallback?: boolean | boolean[];
    ssr?: boolean;
};
/**
 * React hook that tracks state of a CSS media query
 *
 * @param query the media query to match
 * @param options the media query options { fallback, ssr }
 *
 * @see Docs https://chakra-ui.com/docs/hooks/use-media-query
 */
declare function useMediaQuery(query: string | string[], options?: UseMediaQueryOptions): boolean[];

export { Alert, Avatar, type AvatarProps, Badge, Button, ButtonIcon, type ButtonIconProps, type ButtonProps, Card, Checkbox, type CheckboxProps, Code, Collapse, type CollapseOptions, type CollapseProps, type CreateContextOptions, type CreateContextReturn, FormControl, type FormControlProps, type FormErrorIconProps, type FormErrorProps, type FormHelperTextProps, FormLabel, type FormLabelProps, type FormRequiredIndicatorProps, Heading, type ICollapse, Icon, IconButton, Image, Input, type InputProps, Kbd, Link, type LinkProps, List, Modal, ModalCloseButton, type ModalProps, Popover, type PopoverProps, Portal, type PortalProps, Select, type SelectProps, Skeleton, type SkeletonProps, type StyledContextProvider, Switch, type SwitchProps, Table, type TableProps, Tabs, type TabsProps, Tag, Text, Textarea, type TextareaProps, type ThemePropsContext, ThemePropsProvider, Tooltip, type TooltipProps, type UseDisclosureProps, type UseDisclosureReturn, type UseMediaQueryOptions, type UseSwitchProps, type UserThemeProps, createContext, createStyleContext, createThemeStyled, useDisclosure, useMediaQuery, useThemeProps };
