"use client";

// src/ui/alert.tsx
import { css } from "@inkeep/styled-system";
import { styled } from "@inkeep/styled-system";
import { alert } from "@inkeep/styled-system";

// src/ui/create-style-context.tsx
import {
  createContext,
  forwardRef,
  useContext
} from "react";
import { jsx } from "react/jsx-runtime";
var cx = (...args) => args.filter(Boolean).join(" ");
var createStyleContext = (recipe) => {
  const StyleContext = createContext(null);
  const withProvider15 = (Component, slot, defaultProps) => {
    const Comp = forwardRef(
      (props, ref) => {
        const [variantProps, otherProps] = recipe.splitVariantProps(
          props
        );
        const { className = "", ...rest } = otherProps;
        const styles2 = recipe(variantProps);
        const slotClass = styles2?.[slot ?? ""];
        const classNames = cx(defaultProps?.className, slotClass, className);
        return /* @__PURE__ */ jsx(StyleContext.Provider, { value: styles2, children: /* @__PURE__ */ jsx(
          Component,
          {
            ref,
            ...defaultProps,
            className: classNames,
            ...rest
          }
        ) });
      }
    );
    Comp.displayName = Component.displayName || Component.name;
    return Comp;
  };
  const withContext15 = (Component, slot, defaultProps) => {
    if (!slot)
      return Component;
    const Comp = forwardRef(
      ({ className, ...rest }, ref) => {
        const styles2 = useContext(StyleContext);
        const slotClass = styles2?.[slot ?? ""];
        const classNames = cx(defaultProps?.className, slotClass, className);
        return /* @__PURE__ */ jsx(
          Component,
          {
            ref,
            ...defaultProps,
            className: classNames,
            ...rest
          }
        );
      }
    );
    Comp.displayName = Component.displayName || Component.name;
    return Comp;
  };
  return {
    withProvider: withProvider15,
    withContext: withContext15
  };
};

// src/ui/create-theme-styled.tsx
import { createElement, forwardRef as forwardRef2 } from "react";

// src/ui/context.ts
import {
  createContext as createReactContext,
  useContext as useReactContext
} from "react";
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext2(options = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue
  } = options;
  const Context = createReactContext(defaultValue);
  Context.displayName = name;
  function useContext2() {
    const context = useReactContext(Context);
    if (!context && strict) {
      const error = new Error(
        errorMessage ?? getErrorMessage(hookName, providerName)
      );
      error.name = "ContextError";
      Error.captureStackTrace?.(error, useContext2);
      throw error;
    }
    return context;
  }
  return [Context.Provider, useContext2, Context];
}

// src/ui/create-theme-styled.tsx
import { cx as cx2 } from "@inkeep/styled-system";
var createThemeStyled = (Component, name) => {
  return forwardRef2((props, ref) => {
    const themeProps = useThemeProps()?.[name];
    const className = cx2(props?.className, themeProps?.className);
    const style = Object.assign({}, props?.style, themeProps?.style);
    return createElement(Component, {
      ref,
      ...Object.assign({}, props, themeProps?.defaultProps),
      className,
      style
    });
  });
};
var [ThemePropsProvider, useThemeProps] = createContext2({
  strict: false,
  name: "ThemeProps"
});

// src/ui/alert.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var { withProvider, withContext } = createStyleContext(alert);
var AlertRoot = createThemeStyled(
  withProvider(styled("div"), "container"),
  "Alert"
);
var AlertIcon = withContext(styled("div"), "icon");
function CheckIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ jsx2(AlertIcon, { children: /* @__PURE__ */ jsx2(
    "svg",
    {
      ...props,
      className: css({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ jsx2(
        "path",
        {
          fill: "currentColor",
          d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
        }
      )
    }
  ) });
}
function InfoIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ jsx2(AlertIcon, { children: /* @__PURE__ */ jsx2(
    "svg",
    {
      ...props,
      className: css({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ jsx2(
        "path",
        {
          fill: "currentColor",
          d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
        }
      )
    }
  ) });
}
function WarningIcon({ css: cssProp, ...props }) {
  return /* @__PURE__ */ jsx2(AlertIcon, { children: /* @__PURE__ */ jsx2(
    "svg",
    {
      ...props,
      className: css({ h: "100%", w: "100%" }, cssProp),
      viewBox: "0 0 24 24",
      children: /* @__PURE__ */ jsx2(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  ) });
}
var Alert = Object.assign(AlertRoot, {
  Root: AlertRoot,
  // https://github.com/chakra-ui/chakra-ui/blob/f4b1ad66be1ada4b2728faef4c68a82a76f02532/packages/components/src/alert/alert-context.ts#L20
  InfoIcon,
  WarningIcon,
  SuccessIcon: CheckIcon,
  ErrorIcon: WarningIcon
});

// src/ui/avatar.tsx
import * as Ark from "@ark-ui/react/avatar";
import { styled as styled2 } from "@inkeep/styled-system";
import { avatar } from "@inkeep/styled-system";
var { withProvider: withProvider2, withContext: withContext2 } = createStyleContext(avatar);
var AvatarRoot = createThemeStyled(
  withProvider2(
    styled2(
      Ark.Avatar.Root
    ),
    "root"
  ),
  "Avatar"
);
var AvatarFallback = withContext2(styled2(Ark.Avatar.Fallback), "fallback");
var AvatarImage = withContext2(styled2(Ark.Avatar.Image), "image");
var Avatar2 = Object.assign(AvatarRoot, {
  Root: AvatarRoot,
  Fallback: AvatarFallback,
  Image: AvatarImage
});

// src/ui/badge.tsx
import { styled as styled3 } from "@inkeep/styled-system";
import { badge } from "@inkeep/styled-system";
var Badge = createThemeStyled(styled3("span", badge), "Badge");

// src/ui/button.tsx
import { forwardRef as forwardRef3 } from "react";
import { ark } from "@ark-ui/react";
import { styled as styled5 } from "@inkeep/styled-system";
import { button } from "@inkeep/styled-system";

// src/ui/button-icon.tsx
import { styled as styled4 } from "@inkeep/styled-system";
var ButtonIcon = styled4(styled4.span, {
  base: {
    display: "inline-flex",
    alignSelf: "center",
    flexShrink: 0
  }
});

// src/ui/button.tsx
import { Fragment, jsx as jsx3, jsxs } from "react/jsx-runtime";
var ButtonRoot = createThemeStyled(styled5(ark.button, button), "Button");
function ButtonContent(props) {
  const { leftIcon, children } = props;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    leftIcon && /* @__PURE__ */ jsx3(ButtonIcon, { marginRight: 2, children: leftIcon }),
    children
  ] });
}
var Button = forwardRef3(
  ({ children, leftIcon, ...props }, ref) => /* @__PURE__ */ jsx3(
    ButtonRoot,
    {
      ...props,
      ref,
      children: /* @__PURE__ */ jsx3(ButtonContent, { leftIcon, children })
    }
  )
);
Button.displayName = "Button";

// src/ui/card.tsx
import { styled as styled6 } from "@inkeep/styled-system";
import { card } from "@inkeep/styled-system";
var { withProvider: withProvider3, withContext: withContext3 } = createStyleContext(card);
var CardRoot = createThemeStyled(
  withProvider3(styled6("div"), "container"),
  "Card"
);
var CardBody = withContext3(styled6("div"), "body");
var CardHeader = withContext3(styled6("div"), "header");
var CardFooter = withContext3(styled6("div"), "footer");
var Card = Object.assign(CardRoot, {
  Root: CardRoot,
  Body: CardBody,
  Header: CardHeader,
  Footer: CardFooter
});

// src/ui/checkbox.tsx
import * as Ark2 from "@ark-ui/react/checkbox";
import { styled as styled8 } from "@inkeep/styled-system";
import { checkbox } from "@inkeep/styled-system";

// src/ui/checkbox-icon.tsx
import { styled as styled7 } from "@inkeep/styled-system";
import { jsx as jsx4 } from "react/jsx-runtime";
function CheckIcon2(props) {
  return /* @__PURE__ */ jsx4(
    styled7.svg,
    {
      viewBox: "0 0 12 10",
      style: {
        width: "1.2em",
        fill: "none",
        strokeWidth: 2,
        stroke: "currentColor",
        strokeDasharray: 16
      },
      ...props,
      children: /* @__PURE__ */ jsx4("polyline", { points: "1.5 6 4.5 9 10.5 1" })
    }
  );
}
function IndeterminateIcon(props) {
  return /* @__PURE__ */ jsx4(
    styled7.svg,
    {
      viewBox: "0 0 24 24",
      style: { width: "1.2em", stroke: "currentColor", strokeWidth: 4 },
      ...props,
      children: /* @__PURE__ */ jsx4("line", { x1: "21", x2: "3", y1: "12", y2: "12" })
    }
  );
}
function CheckboxIcon(props) {
  const { className, isIndeterminate, isChecked, ...rest } = props;
  if (!isChecked && !isIndeterminate)
    return null;
  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon2;
  return /* @__PURE__ */ jsx4(
    styled7.div,
    {
      "data-scope": "checkbox",
      "data-part": "icon",
      className,
      css: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      },
      children: /* @__PURE__ */ jsx4(BaseIcon, { ...rest })
    }
  );
}

// src/ui/checkbox.tsx
var { withProvider: withProvider4, withContext: withContext4 } = createStyleContext(checkbox);
var CheckboxRoot = createThemeStyled(
  withProvider4(
    styled8(
      Ark2.Checkbox.Root
    ),
    "container"
  ),
  "Checkbox"
);
var CheckboxControl = withContext4(styled8(Ark2.Checkbox.Control), "control");
var CheckboxLabel = withContext4(styled8(Ark2.Checkbox.Label), "label");
var Checkbox2 = Object.assign(CheckboxRoot, {
  Root: CheckboxRoot,
  Control: CheckboxControl,
  Label: CheckboxLabel,
  Icon: withContext4(CheckboxIcon, "icon")
});

// src/ui/code.tsx
import { styled as styled9 } from "@inkeep/styled-system";
import { code } from "@inkeep/styled-system";
var Code = createThemeStyled(styled9("code", code), "Code");

// src/ui/collapse.tsx
import { forwardRef as forwardRef4, useEffect, useState } from "react";
import {
  AnimatePresence,
  motion
} from "framer-motion";
import { cx as cx3 } from "@inkeep/styled-system";

// src/ui/transition-utils.ts
var TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS.easeIn
  }
};
var withDelay = {
  enter: (transition, delay) => ({
    ...transition,
    delay: typeof delay === "number" ? delay : delay?.["enter"]
  }),
  exit: (transition, delay) => ({
    ...transition,
    delay: typeof delay === "number" ? delay : delay?.["exit"]
  })
};

// src/ui/collapse.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
var isNumeric = (value) => value != null && Number.parseInt(value.toString(), 10) > 0;
var defaultTransitions = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS.ease }
  }
};
var variants = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({
    ...animateOpacity && { opacity: isNumeric(startingHeight) ? 1 : 0 },
    height: startingHeight,
    transitionEnd: transitionEnd?.exit,
    transition: transition?.exit ?? withDelay.exit(defaultTransitions.exit, delay)
  }),
  enter: ({
    animateOpacity,
    endingHeight,
    transition,
    transitionEnd,
    delay
  }) => ({
    ...animateOpacity && { opacity: 1 },
    height: endingHeight,
    transitionEnd: transitionEnd?.enter,
    transition: transition?.enter ?? withDelay.enter(defaultTransitions.enter, delay)
  })
};
var Collapse = forwardRef4(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = useState(false);
    useEffect(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => void clearTimeout(timeout);
    }, []);
    const condition = Number(startingHeight) > 0 && !!unmountOnExit;
    if (condition) {
      console.warn({
        condition: Number(startingHeight) > 0 && !!unmountOnExit,
        message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
      });
    }
    const hasStartingHeight = Number.parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: mounted ? transition : { enter: { duration: 0 } },
      transitionEnd: {
        enter: transitionEnd?.enter,
        exit: unmountOnExit ? transitionEnd?.exit : {
          ...transitionEnd?.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    return /* @__PURE__ */ jsx5(AnimatePresence, { initial: false, custom, children: show && /* @__PURE__ */ jsx5(
      motion.div,
      {
        ref,
        ...rest,
        className: cx3("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants,
        initial: unmountOnExit ? "exit" : false,
        animate,
        exit: "exit"
      }
    ) });
  }
);
Collapse.displayName = "Collapse";

// src/ui/form-control.tsx
import { forwardRef as forwardRef7 } from "react";
import { styled as styled11 } from "@inkeep/styled-system";
import {
  formControl
} from "@inkeep/styled-system";

// src/ui/create-form-element.tsx
import { forwardRef as forwardRef5 } from "react";

// src/ui/form-control-context.ts
import { useCallback, useId, useState as useState2 } from "react";

// src/hooks/use-merge-refs.ts
import { useMemo } from "react";
function assignRef(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs(...refs) {
  return (node) => {
    refs.forEach((ref) => {
      assignRef(ref, node);
    });
  };
}

// src/ui/form-control-context.ts
import { dataAttr } from "@inkeep/shared";
var [FormControlProvider, useFormControlContext] = createContext2({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = useId();
  const id = idProp || `field-${uuid}`;
  const labelId = `${id}-label`;
  const feedbackId = `${id}-feedback`;
  const helpTextId = `${id}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = useState2(false);
  const [hasHelpText, setHasHelpText] = useState2(false);
  const [isFocused, setFocus] = useState2(false);
  const getHelpTextProps = useCallback(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node) => {
        if (!node)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = useCallback(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id
    }),
    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = useCallback(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node) => {
        if (!node)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = useCallback(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = useCallback(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: () => setFocus(true),
    onBlur: () => setFocus(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}

// src/ui/create-form-element.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var createFormContextElement = (BaseElement, elementName, getterName, conditionalCheck) => {
  const Component = forwardRef5((props, ref) => {
    const field = useFormControlContext();
    if (conditionalCheck && !conditionalCheck(field)) {
      return null;
    }
    const formProps = field?.[getterName](props, ref);
    return /* @__PURE__ */ jsx6(BaseElement, { ...formProps });
  });
  Component.displayName = elementName;
  return Component;
};

// src/ui/icon.tsx
import { ark as ark2 } from "@ark-ui/react";
import { styled as styled10 } from "@inkeep/styled-system";
import { icon } from "@inkeep/styled-system";
import { forwardRef as forwardRef6 } from "react";
import { jsx as jsx7 } from "react/jsx-runtime";
var Icon = createThemeStyled(
  styled10(ark2.svg, icon, {
    defaultProps: {
      // TODO this one seems to cause issues for some icons
      // viewBox: '0 0 24 24',
      role: "presentation",
      "aria-hidden": true,
      focusable: false
    }
  }),
  "Icon"
);
var IconButton = forwardRef6(
  (props, ref) => {
    return /* @__PURE__ */ jsx7(Button, { padding: "0", ...props, ref });
  }
);

// src/ui/form-control.tsx
import { jsx as jsx8 } from "react/jsx-runtime";
var { withProvider: withProvider5, withContext: withContext5 } = createStyleContext(formControl);
var StyledContainer = withProvider5(styled11("div"), "container");
var FormControlContainer = forwardRef7(
  function FormControl(props, ref) {
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider(props);
    return /* @__PURE__ */ jsx8(FormControlProvider, { value: context, children: /* @__PURE__ */ jsx8(StyledContainer, { ...getRootProps({}, ref) }) });
  }
);
FormControlContainer.displayName = "FormControl";
var StyledLabel = withContext5(styled11("label"), "label");
var FormLabel = styled11(StyledLabel, {
  base: {
    display: "block",
    textAlign: "start",
    //
    fontSize: "md",
    marginEnd: "3",
    mb: "2",
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  }
});
var FormControlLabel = createFormContextElement(
  StyledLabel,
  "FormLabel",
  "getLabelProps"
);
var StyledRequiredIndicator = withContext5(
  styled11("span"),
  "required-indicator"
);
var FormRequiredIndicator = createFormContextElement(
  StyledRequiredIndicator,
  "FormRequiredIndicator",
  "getRequiredIndicatorProps",
  (field) => field?.isRequired
);
var StyledHelperText = withContext5(styled11("div"), "helper");
var FormHelperText = createFormContextElement(
  StyledHelperText,
  "FormHelperText",
  "getHelpTextProps"
);
var StyledError = withContext5(styled11("div"), "error");
var FormError = createFormContextElement(
  StyledError,
  "FormError",
  "getErrorMessageProps",
  (field) => field?.isInvalid
);
var ErrorIcon = () => /* @__PURE__ */ jsx8(
  "path",
  {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }
);
var StyledErrorIcon = withContext5(Icon, "error-icon");
var FormErrorIcon = forwardRef7(
  function FormErrorIcon2(props, ref) {
    const field = useFormControlContext();
    if (!field?.isInvalid)
      return null;
    return /* @__PURE__ */ jsx8(StyledErrorIcon, { ref, ...props, children: /* @__PURE__ */ jsx8(ErrorIcon, {}) });
  }
);
FormErrorIcon.displayName = "FormErrorIcon";
var FormControl2 = Object.assign(FormControlContainer, {
  Container: FormControlContainer,
  Label: FormControlLabel,
  Helper: FormHelperText,
  RequiredIndicator: FormRequiredIndicator,
  Error: FormError,
  ErrorIcon: FormErrorIcon
});

// src/ui/heading.tsx
import { styled as styled12 } from "@inkeep/styled-system";
import { heading } from "@inkeep/styled-system";
var Heading = createThemeStyled(styled12("h2", heading), "Heading");

// src/ui/image.ts
import { styled as styled13 } from "@inkeep/styled-system";
var Image = styled13.img;

// src/ui/input.tsx
import { styled as styled15 } from "@inkeep/styled-system";
import { input } from "@inkeep/styled-system";

// src/ui/input-addon.tsx
import { cva, cx as cx4 } from "@inkeep/styled-system";
import { styled as styled14 } from "@inkeep/styled-system";
import { forwardRef as forwardRef8 } from "react";
import { jsx as jsx9 } from "react/jsx-runtime";
var styles = cva({
  base: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  },
  variants: {
    placement: {
      left: {
        marginEnd: "-1px",
        borderEndRadius: 0,
        borderEndColor: "transparent"
      },
      right: {
        marginStart: "-1px",
        borderStartRadius: 0,
        borderStartColor: "transparent"
      }
    }
  }
});
var InputAddon = forwardRef8(
  function InputAddon2(props, ref) {
    const { placement = "left", className, ...rest } = props;
    return /* @__PURE__ */ jsx9(
      styled14.div,
      {
        "data-placement": placement,
        ...rest,
        className: cx4(styles({ placement }), className),
        ref
      }
    );
  }
);
InputAddon.displayName = "InputAddon";

// src/ui/use-form-control.ts
import { ariaAttr, callAllHandlers } from "@inkeep/shared";
function useFormControl(props) {
  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
  return {
    ...rest,
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps(props) {
  const field = useFormControlContext();
  const {
    id,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled,
    onFocus,
    onBlur,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if (field?.hasFeedbackText && field?.isInvalid) {
    labelIds.push(field.feedbackId);
  }
  if (field?.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id ?? field?.id,
    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,
    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,
    isRequired: required ?? isRequired ?? field?.isRequired,
    isInvalid: isInvalid ?? field?.isInvalid,
    onFocus: callAllHandlers(field?.onFocus, onFocus),
    onBlur: callAllHandlers(field?.onBlur, onBlur)
  };
}

// src/ui/input.tsx
import { forwardRef as forwardRef9 } from "react";
import { jsx as jsx10 } from "react/jsx-runtime";
var { withProvider: withProvider6, withContext: withContext6 } = createStyleContext(input);
var StyledInputRoot = withProvider6(styled15("input"), "field");
var InputRoot = forwardRef9(function FormErrorIcon3(props, ref) {
  const fieldProps = useFormControl(props);
  return /* @__PURE__ */ jsx10(StyledInputRoot, { ref, ...fieldProps });
});
InputRoot.displayName = "Input";
var InputGroup = withProvider6(styled15("div"), "group");
var Input = Object.assign(InputRoot, {
  Root: InputRoot,
  Group: InputGroup,
  Field: withContext6(styled15("input"), "field"),
  Addon: withContext6(InputAddon, "addon")
});

// src/ui/kbd.tsx
import { styled as styled16 } from "@inkeep/styled-system";
import { kbd } from "@inkeep/styled-system";
var Kbd = createThemeStyled(styled16("span", kbd), "Kbd");

// src/ui/link.tsx
import { forwardRef as forwardRef10 } from "react";
import { styled as styled17 } from "@inkeep/styled-system";
import { link } from "@inkeep/styled-system";
import { jsx as jsx11 } from "react/jsx-runtime";
var LinkRoot = createThemeStyled(styled17("a", link), "Link");
var Link = forwardRef10(function Link2({ isExternal, ...props }, ref) {
  return /* @__PURE__ */ jsx11(
    LinkRoot,
    {
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ...props,
      ref
    }
  );
});
Link.displayName = "Link";

// src/ui/list.tsx
import { sva } from "@inkeep/styled-system";
import { styled as styled18 } from "@inkeep/styled-system";
var listRecipe = sva({
  slots: ["ul", "ol", "icon", "item"],
  base: {
    ul: {
      listStyleType: "initial",
      marginStart: "1em"
    },
    ol: {
      listStyleType: "decimal",
      marginStart: "1em"
    },
    icon: {
      marginEnd: "2",
      display: "inline",
      verticalAlign: "text-bottom"
    }
  }
});
var { withProvider: withProvider7, withContext: withContext7 } = createStyleContext(listRecipe);
var UnorderedList = withProvider7(styled18.ul, "ul");
var OrderedList = withProvider7(
  styled18(
    "ol",
    {},
    {
      shouldForwardProp(prop, variantKeys) {
        return prop === "start";
      }
    }
  ),
  "ol"
);
var ListItem = withContext7(styled18.li, "item");
var ListIcon = withContext7(styled18.li, "icon");
var List = Object.assign(UnorderedList, {
  Unordered: UnorderedList,
  Ordered: OrderedList,
  Item: ListItem,
  Icon: ListIcon
});

// src/ui/modal.tsx
import * as Ark3 from "@ark-ui/react/dialog";
import { styled as styled19 } from "@inkeep/styled-system";
import {
  modal,
  closeButton
} from "@inkeep/styled-system";
import { forwardRef as forwardRef11 } from "react";
import { jsx as jsx12 } from "react/jsx-runtime";
var { withProvider: withProvider8, withContext: withContext8 } = createStyleContext(modal);
var DialogRoot = createThemeStyled(
  withProvider8(styled19(Ark3.Dialog.Root), "root"),
  "Modal"
);
var DialogBackdrop = withContext8(styled19(Ark3.Dialog.Backdrop), "backdrop");
var DialogCloseTrigger = withContext8(
  // TODO recipe extension
  styled19(Ark3.Dialog.CloseTrigger, closeButton),
  "closeTrigger"
);
var DialogContainer = withContext8(styled19(Ark3.Dialog.Container), "container");
var DialogContent = withContext8(styled19(Ark3.Dialog.Content), "content");
var OverrideDialogDescription = forwardRef11((props, ref) => {
  return /* @__PURE__ */ jsx12(Ark3.Dialog.Description, { as: "div", ...props, ref });
});
var DialogDescription = withContext8(
  styled19(OverrideDialogDescription),
  "description"
);
var DialogTitle = withContext8(styled19(Ark3.Dialog.Title), "title");
var DialogTrigger = withContext8(styled19(Ark3.Dialog.Trigger), "trigger");
var DialogFooter = withContext8(styled19("div"), "footer");
var Modal = Object.assign(DialogRoot, {
  Root: DialogRoot,
  Overlay: DialogBackdrop,
  Close: DialogCloseTrigger,
  Container: DialogContainer,
  Content: DialogContent,
  Body: DialogDescription,
  Header: DialogTitle,
  Trigger: DialogTrigger,
  Footer: DialogFooter
});
var ModalCloseButton = styled19("button", closeButton);

// src/ui/popover.tsx
import * as Ark4 from "@ark-ui/react/popover";
import { styled as styled20 } from "@inkeep/styled-system";
import { popover } from "@inkeep/styled-system";
var { withProvider: withProvider9, withContext: withContext9 } = createStyleContext(popover);
var PopoverRoot = createThemeStyled(
  withProvider9(styled20(Ark4.Popover.Root)),
  "Popover"
);
var PopoverAnchor = withContext9(styled20(Ark4.Popover.Anchor), "anchor");
var PopoverArrow = withContext9(styled20(Ark4.Popover.Arrow), "arrow");
var PopoverArrowTip = withContext9(styled20(Ark4.Popover.ArrowTip), "arrowTip");
var PopoverCloseTrigger = withContext9(
  styled20(Ark4.Popover.CloseTrigger),
  "closeTrigger"
);
var PopoverContent = withContext9(styled20(Ark4.Popover.Content), "content");
var PopoverDescription = withContext9(
  styled20(Ark4.Popover.Description),
  "description"
);
var PopoverFooter = withContext9(styled20("div"), "footer");
var PopoverPositioner = withContext9(
  styled20(Ark4.Popover.Positioner),
  "positioner"
);
var PopoverTitle = withContext9(styled20(Ark4.Popover.Title), "title");
var PopoverTrigger = withContext9(styled20(Ark4.Popover.Trigger), "trigger");
var Popover2 = Object.assign(PopoverRoot, {
  Root: PopoverRoot,
  Anchor: PopoverAnchor,
  Arrow: PopoverArrow,
  ArrowTip: PopoverArrowTip,
  CloseTrigger: PopoverCloseTrigger,
  Content: PopoverContent,
  Description: PopoverDescription,
  Footer: PopoverFooter,
  Positioner: PopoverPositioner,
  Title: PopoverTitle,
  Trigger: PopoverTrigger
});

// src/ui/portal.tsx
import { createElement as createElement2, useReducer, useRef } from "react";
import { createPortal } from "react-dom";
import { useEffect as useEffect2, useLayoutEffect } from "react";
var useSafeLayoutEffect = typeof document !== "undefined" ? useLayoutEffect : useEffect2;
function Portal(props) {
  const { children, target, tag: tag2, host: hostProp } = props;
  const node = useRef(null);
  const portalNode = useRef(null);
  const [, forceUpdate] = useReducer((s) => s + 1, 0);
  useSafeLayoutEffect(() => {
    if (!node.current)
      return;
    const doc = node.current.ownerDocument;
    const host = hostProp ?? doc.body;
    portalNode.current = doc.createElement(tag2 ?? "inkeep-portal");
    host.appendChild(portalNode.current);
    forceUpdate();
    return () => {
      if (portalNode.current) {
        host.removeChild(portalNode.current);
      }
    };
  }, []);
  const targetNode = target?.current ?? portalNode.current;
  if (targetNode) {
    return createPortal(children, targetNode);
  }
  return createElement2("span", { ref: node });
}

// src/ui/select.tsx
import * as Ark5 from "@ark-ui/react/select";
import { styled as styled21 } from "@inkeep/styled-system";
import { select } from "@inkeep/styled-system";
var { withProvider: withProvider10, withContext: withContext10 } = createStyleContext(select);
var SelectRoot = createThemeStyled(
  withProvider10(
    styled21(
      Ark5.Select.Root
    ),
    "root"
  ),
  "Select"
);
var SelectClearTrigger = withContext10(
  styled21(Ark5.Select.ClearTrigger),
  "clearTrigger"
);
var SelectContent = withContext10(styled21(Ark5.Select.Content), "content");
var SelectControl = withContext10(styled21(Ark5.Select.Control), "control");
var SelectItem = withContext10(
  styled21(
    Ark5.Select.Item
  ),
  "item"
);
var SelectItemGroup = withContext10(
  styled21(Ark5.Select.ItemGroup),
  "itemGroup"
);
var SelectItemGroupLabel = withContext10(
  styled21(Ark5.Select.ItemGroupLabel),
  "itemGroupLabel"
);
var SelectItemIndicator = withContext10(
  styled21(Ark5.Select.ItemIndicator),
  "itemIndicator"
);
var SelectItemText = withContext10(styled21(Ark5.Select.ItemText), "itemText");
var SelectLabel = withContext10(styled21(Ark5.Select.Label), "label");
var SelectPositioner = withContext10(
  styled21(Ark5.Select.Positioner),
  "positioner"
);
var SelectTrigger = withContext10(styled21(Ark5.Select.Trigger), "trigger");
var SelectValue = withContext10(styled21(Ark5.Select.Value), "value");
var Select2 = Object.assign(SelectRoot, {
  Root: SelectRoot,
  ClearTrigger: SelectClearTrigger,
  Content: SelectContent,
  Control: SelectControl,
  Item: SelectItem,
  ItemGroup: SelectItemGroup,
  ItemGroupLabel: SelectItemGroupLabel,
  ItemIndicator: SelectItemIndicator,
  ItemText: SelectItemText,
  Label: SelectLabel,
  Positioner: SelectPositioner,
  Trigger: SelectTrigger,
  Value: SelectValue
});

// src/ui/skeleton.tsx
import { cssVariables } from "@inkeep/preset-chakra/vars";
import { styled as styled22 } from "@inkeep/styled-system";
import { skeleton } from "@inkeep/styled-system";
import { forwardRef as forwardRef12 } from "react";
import { jsx as jsx13 } from "react/jsx-runtime";
var SkeletonRoot = styled22("div", skeleton);
var Skeleton = createThemeStyled(
  forwardRef12(
    ({ children, startColor, endColor, style, ...props }, ref) => {
      return /* @__PURE__ */ jsx13(
        SkeletonRoot,
        {
          ...props,
          style: {
            // @ts-ignore
            [cssVariables.skeleton["start-color"].name]: startColor,
            // @ts-ignore
            [cssVariables.skeleton["end-color"].name]: endColor,
            ...style
          },
          ref,
          children
        }
      );
    }
  ),
  "Skeleton"
);

// src/ui/switch.tsx
import * as Ark6 from "@ark-ui/react/switch";
import { styled as styled23 } from "@inkeep/styled-system";
import {
  switchRecipe
} from "@inkeep/styled-system";
var { withProvider: withProvider11, withContext: withContext11 } = createStyleContext(switchRecipe);
var SwitchRoot = createThemeStyled(
  withProvider11(
    styled23(
      Ark6.Switch.Root
    ),
    "root"
  ),
  "Switch"
);
var SwitchControl = withContext11(styled23(Ark6.Switch.Control), "control");
var SwitchLabel = withContext11(styled23(Ark6.Switch.Label), "label");
var SwitchThumb = withContext11(styled23(Ark6.Switch.Thumb), "thumb");
var Switch2 = Object.assign(SwitchRoot, {
  Root: SwitchRoot,
  Control: SwitchControl,
  Label: SwitchLabel,
  Thumb: SwitchThumb
});

// src/ui/table.tsx
import { styled as styled24 } from "@inkeep/styled-system";
import { table } from "@inkeep/styled-system";
var { withProvider: withProvider12, withContext: withContext12 } = createStyleContext(table);
var TableContainer = createThemeStyled(
  withProvider12(styled24("div"), "container"),
  "Table"
);
var TableRoot = createThemeStyled(
  withProvider12(styled24("table"), "table"),
  "Table"
);
var TableBody = withContext12(styled24("tbody"), "tbody");
var TableCaption = withContext12(styled24("caption"), "caption");
var TableCell = withContext12(styled24("td"), "td");
var TableFooter = withContext12(styled24("tfoot"), "tfoot");
var TableHead = withContext12(styled24("th"), "th");
var TableHeader = withContext12(styled24("thead"), "thead");
var TableRow = withContext12(styled24("tr"), "tr");
var Table = Object.assign(TableRoot, {
  Container: TableContainer,
  Table: TableRoot,
  Root: withContext12(styled24("table"), "table"),
  Body: TableBody,
  Caption: TableCaption,
  Cell: TableCell,
  Footer: TableFooter,
  Head: TableHead,
  Header: TableHeader,
  Row: TableRow
});

// src/ui/tabs.tsx
import * as Ark7 from "@ark-ui/react/tabs";
import { styled as styled25 } from "@inkeep/styled-system";
import { tabs } from "@inkeep/styled-system";
var { withProvider: withProvider13, withContext: withContext13 } = createStyleContext(tabs);
var TabsRoot = createThemeStyled(
  withProvider13(
    styled25(
      Ark7.Tabs.Root
    ),
    "root"
  ),
  "Tabs"
);
var TabContent = withContext13(
  styled25(
    Ark7.Tabs.Content
  ),
  "content"
);
var TabPanels = withContext13(styled25("div"), "panels");
var TabIndicator = withContext13(styled25(Ark7.Tabs.Indicator), "indicator");
var TabList = withContext13(styled25(Ark7.Tabs.List), "list");
var TabTrigger = withContext13(
  styled25(
    Ark7.Tabs.Trigger
  ),
  "trigger"
);
var Tabs2 = Object.assign(TabsRoot, {
  Root: TabsRoot,
  Panels: TabPanels,
  Content: TabContent,
  Indicator: TabIndicator,
  List: TabList,
  Trigger: TabTrigger
});

// src/ui/tag.tsx
import { styled as styled26 } from "@inkeep/styled-system";
import { tag } from "@inkeep/styled-system";
var Tag = createThemeStyled(styled26("span", tag), "Tag");

// src/ui/text.ts
import { styled as styled27 } from "@inkeep/styled-system";
var Text = styled27.span;

// src/ui/textarea.tsx
import { forwardRef as forwardRef13 } from "react";
import { styled as styled28 } from "@inkeep/styled-system";
import { textarea } from "@inkeep/styled-system";
import { ark as ark3 } from "@ark-ui/react";
import { jsx as jsx14 } from "react/jsx-runtime";
var StyledTextarea = createThemeStyled(
  styled28(ark3.textarea, textarea),
  "Textarea"
);
var Textarea = forwardRef13(
  function Textarea2(props, ref) {
    const fieldProps = useFormControl(props);
    return /* @__PURE__ */ jsx14(StyledTextarea, { ref, ...fieldProps });
  }
);
Textarea.displayName = "Textarea";

// src/ui/tooltip.tsx
import * as Ark8 from "@ark-ui/react/tooltip";
import { styled as styled29 } from "@inkeep/styled-system";
import { tooltip } from "@inkeep/styled-system";
var { withProvider: withProvider14, withContext: withContext14 } = createStyleContext(tooltip);
var TooltipRoot = createThemeStyled(
  withProvider14(styled29(Ark8.Tooltip.Root)),
  "Tooltip"
);
var TooltipArrow = withContext14(styled29(Ark8.Tooltip.Arrow), "arrow");
var TooltipArrowTip = withContext14(styled29(Ark8.Tooltip.ArrowTip), "arrowTip");
var TooltipContent = withContext14(styled29(Ark8.Tooltip.Content), "content");
var TooltipPositioner = withContext14(
  styled29(Ark8.Tooltip.Positioner),
  "positioner"
);
var TooltipTrigger = withContext14(styled29(Ark8.Tooltip.Trigger), "trigger");
var Tooltip2 = Object.assign(TooltipRoot, {
  Root: TooltipRoot,
  Arrow: TooltipArrow,
  ArrowTip: TooltipArrowTip,
  Content: TooltipContent,
  Positioner: TooltipPositioner,
  Trigger: TooltipTrigger
});

// src/hooks/use-callback-ref.ts
import { useCallback as useCallback2, useEffect as useEffect3, useRef as useRef2 } from "react";
function useCallbackRef(callback, deps = []) {
  const callbackRef = useRef2(callback);
  useEffect3(() => {
    callbackRef.current = callback;
  });
  return useCallback2((...args) => callbackRef.current?.(...args), deps);
}

// src/hooks/use-disclosure.ts
import { useCallback as useCallback3, useState as useState3, useId as useId2 } from "react";
function useDisclosure(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const handleOpen = useCallbackRef(onOpenProp);
  const handleClose = useCallbackRef(onCloseProp);
  const [isOpenState, setIsOpen] = useState3(props.defaultIsOpen || false);
  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
  const isControlled = isOpenProp !== void 0;
  const uid = useId2();
  const id = idProp ?? `disclosure-${uid}`;
  const onClose = useCallback3(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    handleClose?.();
  }, [isControlled, handleClose]);
  const onOpen = useCallback3(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    handleOpen?.();
  }, [isControlled, handleOpen]);
  const onToggle = useCallback3(() => {
    if (isOpen) {
      onClose();
    } else {
      onOpen();
    }
  }, [isOpen, onOpen, onClose]);
  function getButtonProps(props2 = {}) {
    return {
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id,
      onClick(event) {
        props2.onClick?.(event);
        onToggle();
      }
    };
  }
  function getDisclosureProps(props2 = {}) {
    return {
      ...props2,
      hidden: !isOpen,
      id
    };
  }
  return {
    isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps,
    getDisclosureProps
  };
}

// src/hooks/use-media-query.ts
import { useCallback as useCallback4, useEffect as useEffect4, useState as useState4 } from "react";
function useMediaQuery(query, options = {}) {
  const { ssr = true, fallback } = options;
  const getWindow = useCallback4(() => window, []);
  const queries = Array.isArray(query) ? query : [query];
  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = useState4(() => {
    return queries.map((query2, index) => ({
      media: query2,
      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches
    }));
  });
  useEffect4(() => {
    const win = getWindow();
    setValue(
      queries.map((query2) => ({
        media: query2,
        matches: win.matchMedia(query2).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (evt) => {
      setValue((prev) => {
        return prev.slice().map((item) => {
          if (item.media === evt.media)
            return { ...item, matches: evt.matches };
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof mql2.addListener === "function") {
        mql2.addListener(handler);
      } else {
        mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof mql2.removeListener === "function") {
          mql2.removeListener(handler);
        } else {
          mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
}
export {
  Alert,
  Avatar2 as Avatar,
  Badge,
  Button,
  ButtonIcon,
  Card,
  Checkbox2 as Checkbox,
  Code,
  Collapse,
  FormControl2 as FormControl,
  FormLabel,
  Heading,
  Icon,
  IconButton,
  Image,
  Input,
  Kbd,
  Link,
  List,
  Modal,
  ModalCloseButton,
  Popover2 as Popover,
  Portal,
  Select2 as Select,
  Skeleton,
  Switch2 as Switch,
  Table,
  Tabs2 as Tabs,
  Tag,
  Text,
  Textarea,
  ThemePropsProvider,
  Tooltip2 as Tooltip,
  createContext2 as createContext,
  createStyleContext,
  createThemeStyled,
  useDisclosure,
  useMediaQuery,
  useThemeProps
};
