import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    DateTime: any;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: any;
    /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSONObject: any;
    /** A string that cannot be passed as an empty value */
    NonEmptyString: any;
    /** The `Upload` scalar type represents a file upload. */
    Upload: any;
};
export type AddSourceToProjectResult = {
    __typename?: 'AddSourceToProjectResult';
    project: Project;
    source: Source;
    success: Scalars['Boolean'];
};
export type AiAnnotations = {
    __typename?: 'AiAnnotations';
    botAbleToAnswerGivenSources?: Maybe<Scalars['Boolean']>;
    shouldEscalateToSupport?: Maybe<EscalationMessage>;
    suggestedFollowupQuestions?: Maybe<Array<Scalars['String']>>;
};
export type AnalyticsDashboardInput = {
    projectId?: InputMaybe<Scalars['String']>;
};
export type AnalyticsEvent = {
    createdAt: Scalars['DateTime'];
    eventName: Scalars['String'];
    id: Scalars['ID'];
    metadata: AnalyticsEventMetadata;
};
export type AnalyticsEventMetadata = {
    __typename?: 'AnalyticsEventMetadata';
    client?: Maybe<EventClient>;
    createdAt: Scalars['DateTime'];
    env: Environment;
    integrationId: Scalars['ID'];
    user?: Maybe<EventUserAttributes>;
};
export type BotMessage = ChatMessage & {
    __typename?: 'BotMessage';
    citations: Array<ChatCitation>;
    codeBlocks?: Maybe<Array<CodeBlock>>;
    content: Scalars['String'];
    createdAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
};
export type BotMessageInput = {
    citations: Array<ChatCitationInput>;
    content: Scalars['String'];
    id: Scalars['ID'];
};
export type BuiltInIcon = {
    __typename?: 'BuiltInIcon';
    id: Scalars['ID'];
    name: Scalars['String'];
};
export type ChangeSandboxExpiryDateInput = {
    newExpiryDate: Scalars['DateTime'];
    sandboxId: Scalars['ID'];
};
export type ChangeSandboxExpiryDateResult = {
    __typename?: 'ChangeSandboxExpiryDateResult';
    sandbox: Sandbox;
    success: Scalars['Boolean'];
};
export type ChatCitation = {
    __typename?: 'ChatCitation';
    citationNumber: Scalars['Int'];
    rootRecordId?: Maybe<Scalars['ID']>;
    rootRecordType?: Maybe<RecordType>;
    title?: Maybe<Scalars['String']>;
    url: Scalars['String'];
};
export type ChatCitationInput = {
    citationNumber?: InputMaybe<Scalars['Int']>;
    rootRecordId?: InputMaybe<Scalars['ID']>;
    title?: InputMaybe<Scalars['String']>;
    url: Scalars['String'];
};
export type ChatFeedback = {
    chatProperties: ChatProperties;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    metadata: AnalyticsEventMetadata;
    type: ChatFeedbackType;
};
export declare enum ChatFeedbackType {
    Negative = "NEGATIVE",
    Positive = "POSITIVE"
}
export type ChatFilters = {
    __typename?: 'ChatFilters';
    attributes?: Maybe<Scalars['JSON']>;
    product?: Maybe<Scalars['String']>;
    productVersion?: Maybe<Scalars['String']>;
    sourceIds?: Maybe<Scalars['String']>;
};
export type ChatFiltersInput = {
    attributes?: InputMaybe<Scalars['JSON']>;
    product?: InputMaybe<Scalars['String']>;
    productVersion?: InputMaybe<Scalars['String']>;
    sourceIds?: InputMaybe<Scalars['String']>;
};
export type ChatMessage = {
    content: Scalars['String'];
    createdAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
};
export declare enum ChatMode {
    Auto = "AUTO",
    Turbo = "TURBO"
}
export type ChatNegativeFeedback = ChatFeedback & {
    __typename?: 'ChatNegativeFeedback';
    chatProperties: ChatProperties;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    metadata: AnalyticsEventMetadata;
    reasons: NegativeFeedbackReasons;
    type: ChatFeedbackType;
};
export type ChatPositiveFeedback = ChatFeedback & {
    __typename?: 'ChatPositiveFeedback';
    chatProperties: ChatProperties;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    metadata: AnalyticsEventMetadata;
    type: ChatFeedbackType;
};
export type ChatProperties = {
    __typename?: 'ChatProperties';
    answer?: Maybe<BotMessage>;
    chatMode: ChatMode;
    chatSessionId?: Maybe<Scalars['ID']>;
    filters?: Maybe<SearchAndChatFilters>;
    question?: Maybe<UserMessage>;
    tags?: Maybe<Array<Scalars['String']>>;
};
export type ChatPropertiesInput = {
    answer?: InputMaybe<BotMessageInput>;
    chatMode?: InputMaybe<ChatMode>;
    chatSessionAllMessages?: InputMaybe<Array<ChatSessionMessageInput>>;
    chatSessionId?: InputMaybe<Scalars['ID']>;
    filters?: InputMaybe<SearchAndChatFiltersInput>;
    question?: InputMaybe<UserMessageInput>;
    tags?: InputMaybe<Array<Scalars['String']>>;
};
export type ChatResult = {
    __typename?: 'ChatResult';
    aiAnnotations?: Maybe<AiAnnotations>;
    isEnd: Scalars['Boolean'];
    message: BotMessage;
    postChatResultSignals?: Maybe<PostChatResultSignals>;
    sessionId: Scalars['ID'];
};
export type ChatSession = {
    __typename?: 'ChatSession';
    chatMode: ChatMode;
    context?: Maybe<Scalars['String']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    environment?: Maybe<Scalars['String']>;
    filters?: Maybe<ChatFilters>;
    guidance?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    integrationId: Scalars['String'];
    isSharedSession: Scalars['Boolean'];
    messages: Array<ChatMessage>;
    organizationId: Scalars['String'];
    outputMode: OutputMode;
    product?: Maybe<Scalars['String']>;
    productVersion?: Maybe<Scalars['String']>;
    tags?: Maybe<Array<Scalars['String']>>;
    userAttributes?: Maybe<Scalars['JSON']>;
    workflowId?: Maybe<Scalars['String']>;
    workflowVersion?: Maybe<Scalars['String']>;
};
export type ChatSessionMessage = {
    __typename?: 'ChatSessionMessage';
    botMessage?: Maybe<BotMessage>;
    userMessage?: Maybe<UserMessage>;
};
export type ChatSessionMessageInput = {
    botMessage?: InputMaybe<BotMessageInput>;
    userMessage?: InputMaybe<UserMessageInput>;
};
export type ChatSubjectSubtopic = {
    __typename?: 'ChatSubjectSubtopic';
    description: Scalars['String'];
    id: Scalars['ID'];
    name: Scalars['String'];
};
export type CodeBlock = {
    __typename?: 'CodeBlock';
    code: Scalars['String'];
    language: CodeLanguage;
};
export declare enum CodeLanguage {
    Python = "PYTHON",
    Sql = "SQL",
    Undefined = "UNDEFINED"
}
export declare enum ColorMode {
    Dark = "DARK",
    Light = "LIGHT",
    System = "SYSTEM"
}
export type ContinueChatResultInput = {
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    messageContext?: InputMaybe<Scalars['String']>;
    messageInput: Scalars['String'];
    sessionId: Scalars['ID'];
};
export type CreateBuiltInIconInput = {
    name: Scalars['String'];
};
export type CreateConfigurableIconInput = {
    builtIn?: InputMaybe<CreateBuiltInIconInput>;
    custom?: InputMaybe<CreateCustomIconInput>;
};
export type CreateCustomIconInput = {
    url: Scalars['String'];
};
export type CreateCustomQuestionAnswerInput = {
    alternativeQuestions?: InputMaybe<Array<Scalars['String']>>;
    answer: UserAnswerInput;
    createdAt?: InputMaybe<Scalars['DateTime']>;
    isEnabled: Scalars['Boolean'];
    question: UserQuestionInput;
    sourceId: Scalars['ID'];
};
export type CreateCustomQuestionAnswerResult = {
    __typename?: 'CreateCustomQuestionAnswerResult';
    customQuestionAnswer: CustomQuestionAnswer;
    success: Scalars['Boolean'];
};
export type CreateGetHelpCallToActionInput = {
    addToProjectId: Scalars['ID'];
    icon: CreateConfigurableIconInput;
    label: Scalars['String'];
    url: Scalars['String'];
};
export type CreateGetHelpCallToActionResult = {
    __typename?: 'CreateGetHelpCallToActionResult';
    getHelpCallToAction: GetHelpCallToAction;
    project?: Maybe<Project>;
    success: Scalars['Boolean'];
};
export type CreateIndexingJobInput = {
    indexId: Scalars['ID'];
    job: NewIndexingJobInput;
    sourceSyncJobId: Scalars['ID'];
};
export type CreateIndexingJobResult = {
    __typename?: 'CreateIndexingJobResult';
    job: IndexingJob;
    success: Scalars['Boolean'];
};
export type CreateIntegrationConfiguration = {
    discordBot?: InputMaybe<DiscordCreateIntegrationConfiguration>;
    mintlify?: InputMaybe<MintlifyCreateIntegrationConfiguration>;
    slackBot?: InputMaybe<SlackCreateIntegrationConfiguration>;
    web?: InputMaybe<WebCreateIntegrationConfiguration>;
};
export type CreateIntegrationInput = {
    configuration?: InputMaybe<CreateIntegrationConfiguration>;
    displayName: Scalars['String'];
    integrationId?: InputMaybe<Scalars['ID']>;
    projectId: Scalars['ID'];
    type?: InputMaybe<IntegrationType>;
    url?: InputMaybe<Scalars['String']>;
    userTokenSettings?: InputMaybe<CreateUserTokenSettingsInput>;
};
export type CreateIntegrationResult = {
    __typename?: 'CreateIntegrationResult';
    integration: Integration;
    success: Scalars['Boolean'];
};
export type CreateOrganizationInput = {
    alias: Scalars['String'];
    displayName: Scalars['String'];
    portalDisplayPreferences?: InputMaybe<PortalDisplayPreferencesInput>;
    status?: InputMaybe<OrganizationStatus>;
};
export type CreateOrganizationResult = {
    __typename?: 'CreateOrganizationResult';
    organization: Organization;
    success: Scalars['Boolean'];
};
export type CreateProjectInput = {
    chatSubjectName?: InputMaybe<Scalars['String']>;
    createTuningSources?: InputMaybe<Scalars['Boolean']>;
    description?: InputMaybe<Scalars['String']>;
    displayName: Scalars['String'];
    endUserDescription?: InputMaybe<Scalars['String']>;
    oneLineDescription?: InputMaybe<Scalars['String']>;
    projectId?: InputMaybe<Scalars['ID']>;
    quickQuestions?: InputMaybe<Array<Scalars['String']>>;
    tone?: InputMaybe<Scalars['String']>;
};
export type CreateProjectResult = {
    __typename?: 'CreateProjectResult';
    project: Project;
    success: Scalars['Boolean'];
};
export type CreateReportInput = {
    content?: InputMaybe<ReportContentInput>;
    createdAt: Scalars['DateTime'];
    endDate: Scalars['DateTime'];
    labels?: InputMaybe<Array<Scalars['String']>>;
    projectId: Scalars['ID'];
    startDate: Scalars['DateTime'];
};
export type CreateReportResult = {
    __typename?: 'CreateReportResult';
    report: Report;
    success: Scalars['Boolean'];
};
export type CreateSandboxInput = {
    displayName: Scalars['String'];
    expiresAt?: InputMaybe<Scalars['DateTime']>;
    hasNoBranding?: InputMaybe<Scalars['Boolean']>;
    isTrial?: InputMaybe<Scalars['Boolean']>;
    projectId: Scalars['ID'];
    promotion?: InputMaybe<SandboxPromotionSettingsInput>;
    shouldShowChatButton?: InputMaybe<Scalars['Boolean']>;
    type: SandboxType;
};
export type CreateSandboxResult = {
    __typename?: 'CreateSandboxResult';
    sandbox: Sandbox;
    success: Scalars['Boolean'];
};
export type CreateSavedChatInput = {
    chatSessionId: Scalars['ID'];
    title: Scalars['String'];
};
export type CreateSavedChatResult = {
    __typename?: 'CreateSavedChatResult';
    savedChat: SavedChat;
    success: Scalars['Boolean'];
};
export type CreateSelfServeDemoInput = {
    email: Scalars['String'];
    productUrl: Scalars['String'];
    status: SelfServeDemoStatus;
};
export type CreateSelfServiceDemoResult = {
    __typename?: 'CreateSelfServiceDemoResult';
    demo: SelfServeDemo;
};
export type CreateSourceConfiguration = {
    customIndexes?: InputMaybe<CustomIndexesCreateSourceConfiguration>;
    customQuestionAnswers?: InputMaybe<CustomQuestionAnswersCreateSourceConfiguration>;
    discord?: InputMaybe<DiscordCreateSourceConfiguration>;
    discourse?: InputMaybe<DiscourseCreateSourceConfiguration>;
    docusaurus?: InputMaybe<DocusaurusCreateSourceConfiguration>;
    generalWeb?: InputMaybe<GeneralWebCreateSourceConfiguration>;
    gitbook?: InputMaybe<GitbookCreateSourceConfiguration>;
    github?: InputMaybe<GitHubCreateSourceConfiguration>;
    readme?: InputMaybe<ReadmeCreateSourceConfiguration>;
    redocly?: InputMaybe<RedoclyCreateSourceConfiguration>;
    revisedAnswers?: InputMaybe<RevisedAnswersCreateSourceConfiguration>;
    slack?: InputMaybe<SlackCreateSourceConfiguration>;
    stackoverflow?: InputMaybe<StackOverflowCreateSourceConfiguration>;
    zendesk?: InputMaybe<ZendeskCreateSourceConfiguration>;
};
export type CreateSourceIndexInput = {
    createdAt?: InputMaybe<Scalars['DateTime']>;
    indexingEngine: IndexingEngine;
    isEnabled: Scalars['Boolean'];
    sourceId: Scalars['ID'];
    sourceIndexId: Scalars['ID'];
};
export type CreateSourceIndexResult = {
    __typename?: 'CreateSourceIndexResult';
    index: SourceIndex;
    success: Scalars['Boolean'];
};
export type CreateSourceInput = {
    addToProjectId?: InputMaybe<Scalars['ID']>;
    configuration: CreateSourceConfiguration;
};
export type CreateSourceResult = {
    __typename?: 'CreateSourceResult';
    project?: Maybe<Project>;
    source: Source;
    success: Scalars['Boolean'];
};
export type CreateSourceSyncJobInput = {
    sourceId: Scalars['ID'];
    type?: InputMaybe<SourceSyncJobType>;
};
export type CreateSourceSyncJobResult = {
    __typename?: 'CreateSourceSyncJobResult';
    job: SourceSyncJob;
    success: Scalars['Boolean'];
};
export type CreateUserTokenSettingsInput = {
    isRequiredForAccess: Scalars['Boolean'];
    issuer: Scalars['String'];
    verificationKey: Scalars['String'];
};
export type CustomIcon = {
    __typename?: 'CustomIcon';
    id: Scalars['ID'];
    url: Scalars['String'];
};
export type CustomIndexesCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isDocumentation?: InputMaybe<Scalars['Boolean']>;
    isOwnedByOrganization?: InputMaybe<Scalars['Boolean']>;
    sourceId?: InputMaybe<Scalars['ID']>;
};
export type CustomIndexesSource = Source & {
    __typename?: 'CustomIndexesSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
};
export type CustomIndexesUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isDocumentation?: InputMaybe<Scalars['Boolean']>;
    isOwnedByOrganization?: InputMaybe<Scalars['Boolean']>;
};
export type CustomQuestionAnswer = ManagedQuestionAnswer & {
    __typename?: 'CustomQuestionAnswer';
    alternativeQuestions?: Maybe<Array<Scalars['String']>>;
    answer: UserAnswer;
    createdAt: Scalars['DateTime'];
    editedAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    isEnabled: Scalars['Boolean'];
    question: UserMessage;
};
export type CustomQuestionAnswersCreateSourceConfiguration = {
    defaultCacheType?: InputMaybe<QuestionAnswerCacheType>;
    displayName: Scalars['String'];
};
export type CustomQuestionAnswersSource = Source & {
    __typename?: 'CustomQuestionAnswersSource';
    createdAt: Scalars['DateTime'];
    defaultCacheType: QuestionAnswerCacheType;
    defaultForProject?: Maybe<Project>;
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    isTunedByInkeep: Scalars['Boolean'];
    questionAnswers: Array<CustomQuestionAnswer>;
    syncJobHistory: Array<SourceSyncJob>;
};
export type CustomQuestionAnswersUpdateSourceConfiguration = {
    defaultCacheType?: InputMaybe<QuestionAnswerCacheType>;
    displayName?: InputMaybe<Scalars['String']>;
};
export type DashboardAccessTokens = {
    __typename?: 'DashboardAccessTokens';
    canEditGlobalDashboard?: Maybe<Scalars['Boolean']>;
    canViewDashboard?: Maybe<Scalars['Boolean']>;
    dashboardAccessToken?: Maybe<Scalars['String']>;
    dataAccessToken?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
};
export type DeactivateSandboxResult = {
    __typename?: 'DeactivateSandboxResult';
    sandbox: Sandbox;
    success: Scalars['Boolean'];
};
export type DeleteCustomQuestionAnswerResult = {
    __typename?: 'DeleteCustomQuestionAnswerResult';
    customQuestionAnswer: CustomQuestionAnswer;
    success: Scalars['Boolean'];
};
export type DeleteIntegrationResult = {
    __typename?: 'DeleteIntegrationResult';
    integration: Integration;
    success: Scalars['Boolean'];
};
export type DeleteProjectResult = {
    __typename?: 'DeleteProjectResult';
    project: Project;
    success: Scalars['Boolean'];
};
export type DeleteReportInput = {
    id: Scalars['ID'];
};
export type DeleteReportResult = {
    __typename?: 'DeleteReportResult';
    success: Scalars['Boolean'];
};
export type DeleteRevisedAnswerResult = {
    __typename?: 'DeleteRevisedAnswerResult';
    revisedAnswer: RevisedAnswer;
    success: Scalars['Boolean'];
};
export type DeleteSandboxResult = {
    __typename?: 'DeleteSandboxResult';
    sandbox: Sandbox;
    success: Scalars['Boolean'];
};
export type DeleteSavedChatInput = {
    chatSessionId: Scalars['ID'];
};
export type DeleteSavedChatResult = {
    __typename?: 'DeleteSavedChatResult';
    savedChat: SavedChat;
    success: Scalars['Boolean'];
};
export type DeleteSourceIndexResult = {
    __typename?: 'DeleteSourceIndexResult';
    index: SourceIndex;
    success: Scalars['Boolean'];
};
export type DeleteSourceResult = {
    __typename?: 'DeleteSourceResult';
    source: Source;
    success: Scalars['Boolean'];
};
export type DiscordBotIntegrationSettingsInput = {
    serverId: Scalars['ID'];
};
export type DiscordClient = {
    __typename?: 'DiscordClient';
    channelId: Scalars['String'];
};
export type DiscordClientInput = {
    channelId: Scalars['ID'];
};
export type DiscordCreateIntegrationConfiguration = {
    autoReplyChannels?: InputMaybe<Array<Scalars['String']>>;
    continueInWebChatUrl?: InputMaybe<Scalars['String']>;
    customMessages?: InputMaybe<DiscordIntegrationCustomMessagesInput>;
    negativeFeedbackCallback?: InputMaybe<DiscordIntegrationNegativeFeedbackCallbackInput>;
    serverId: Scalars['String'];
};
export type DiscordCreateSourceConfiguration = {
    channelIds: Array<Scalars['String']>;
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    serverId: Scalars['String'];
    teamMemberRoles?: InputMaybe<Array<Scalars['String']>>;
};
export type DiscordIntegrationConfiguration = {
    __typename?: 'DiscordIntegrationConfiguration';
    autoReplyChannels: Array<Scalars['String']>;
    continueInWebChatUrl?: Maybe<Scalars['String']>;
    customMessages?: Maybe<DiscordIntegrationCustomMessages>;
    negativeFeedbackCallback?: Maybe<DiscordIntegrationNegativeFeedbackCallback>;
    serverId: Scalars['String'];
    type: IntegrationType;
};
export type DiscordIntegrationCustomMessages = {
    __typename?: 'DiscordIntegrationCustomMessages';
    introMessageWhenTagged?: Maybe<Scalars['String']>;
};
export type DiscordIntegrationCustomMessagesInput = {
    introMessageWhenTagged?: InputMaybe<Scalars['String']>;
};
export type DiscordIntegrationNegativeFeedbackCallback = DiscordTagCallback;
export type DiscordIntegrationNegativeFeedbackCallbackInput = {
    tag?: InputMaybe<DiscordTagCallbackInput>;
};
export type DiscordSource = Source & {
    __typename?: 'DiscordSource';
    channelIds: Array<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    serverId: Scalars['String'];
    syncJobHistory: Array<SourceSyncJob>;
    teamMemberRoles: Array<Scalars['String']>;
};
export type DiscordTagCallback = {
    __typename?: 'DiscordTagCallback';
    botIds?: Maybe<Array<Scalars['String']>>;
    roleIds?: Maybe<Array<Scalars['String']>>;
    userIds?: Maybe<Array<Scalars['String']>>;
};
export type DiscordTagCallbackInput = {
    botIds?: InputMaybe<Array<Scalars['String']>>;
    remove?: InputMaybe<Scalars['Boolean']>;
    roleIds?: InputMaybe<Array<Scalars['String']>>;
    userIds?: InputMaybe<Array<Scalars['String']>>;
};
export type DiscordUpdateIntegrationConfiguration = {
    autoReplyChannels?: InputMaybe<Array<Scalars['String']>>;
    continueInWebChatUrl?: InputMaybe<Scalars['String']>;
    customMessages?: InputMaybe<DiscordIntegrationCustomMessagesInput>;
    negativeFeedbackCallback?: InputMaybe<DiscordIntegrationNegativeFeedbackCallbackInput>;
    serverId?: InputMaybe<Scalars['String']>;
};
export type DiscordUpdateSourceConfiguration = {
    channelIds?: InputMaybe<Array<Scalars['String']>>;
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    serverId?: InputMaybe<Scalars['String']>;
    teamMemberRoles?: InputMaybe<Array<Scalars['String']>>;
};
export type DiscourseCreateSourceConfiguration = {
    displayName: Scalars['String'];
    url: Scalars['String'];
};
export type DiscourseHit = SearchHit & {
    __typename?: 'DiscourseHit';
    hitOnRoot: Scalars['Boolean'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    rootRecord: DiscourseRecord;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type DiscourseRecord = SearchRootRecord & {
    __typename?: 'DiscourseRecord';
    body?: Maybe<Scalars['String']>;
    bodyHtml?: Maybe<Scalars['String']>;
    categoryBreadcrumbs: Array<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type DiscourseSource = Source & {
    __typename?: 'DiscourseSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type DiscourseUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
};
export type DocumentationContentLevel = {
    __typename?: 'DocumentationContentLevel';
    anchor?: Maybe<Scalars['String']>;
    content: Scalars['String'];
    contentHtml: Scalars['String'];
    htmlTag: Scalars['String'];
    url?: Maybe<Scalars['String']>;
};
export type DocumentationGap = {
    description: Scalars['String'];
    label: Scalars['String'];
    sourceChatMessages?: Maybe<Array<SourceChatMessage>>;
};
export type DocumentationGapsReport = Report & {
    __typename?: 'DocumentationGapsReport';
    createdAt: Scalars['DateTime'];
    endDate: Scalars['DateTime'];
    firstPartyDocumentationGaps?: Maybe<Array<FirstPartyDocumentationGap>>;
    id: Scalars['ID'];
    labels: Array<Scalars['String']>;
    startDate: Scalars['DateTime'];
    thirdPartyDocumentationGaps?: Maybe<Array<ThirdPartyDocumentationGap>>;
};
export type DocumentationGapsReportInput = {
    firstPartyDocumentationGaps?: InputMaybe<Array<FirstPartyDocumentationGapInput>>;
    thirdPartyDocumentationGaps?: InputMaybe<Array<ThirdPartyDocumentationGapInput>>;
};
export type DocumentationHit = SearchHit & {
    __typename?: 'DocumentationHit';
    content: DocumentationContentLevel;
    hitOnRoot: Scalars['Boolean'];
    id: Scalars['ID'];
    pathHeadings: Array<DocumentationContentLevel>;
    preview?: Maybe<Scalars['String']>;
    rootRecord: SearchRootRecord;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type DocumentationRecord = SearchRootRecord & {
    __typename?: 'DocumentationRecord';
    contentType: Scalars['String'];
    firstContent: Scalars['String'];
    firstContentPath: Array<DocumentationContentLevel>;
    id: Scalars['ID'];
    pathBreadcrumbs?: Maybe<Array<Scalars['String']>>;
    preview?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    topLevelHeadings: Array<DocumentationContentLevel>;
    url?: Maybe<Scalars['String']>;
};
export type DocusaurusCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type DocusaurusSource = Source & {
    __typename?: 'DocusaurusSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type DocusaurusUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export declare enum Environment {
    Development = "DEVELOPMENT",
    Production = "PRODUCTION",
    Staging = "STAGING"
}
export type EscalationMessage = {
    __typename?: 'EscalationMessage';
    standard?: Maybe<Scalars['Boolean']>;
    strict?: Maybe<Scalars['Boolean']>;
};
export type EventClient = {
    __typename?: 'EventClient';
    custom?: Maybe<Scalars['JSONObject']>;
    discord?: Maybe<DiscordClient>;
    inkeepWebWidget?: Maybe<InkeepWebWidgetClient>;
    slack?: Maybe<SlackClient>;
};
export type EventClientInput = {
    custom?: InputMaybe<Scalars['JSONObject']>;
    discord?: InputMaybe<DiscordClientInput>;
    inkeepWebWidget?: InputMaybe<InkeepWebWidgetClientInput>;
    slack?: InputMaybe<SlackClientInput>;
};
export type EventMetadataInput = {
    client?: InputMaybe<EventClientInput>;
    env?: InputMaybe<Environment>;
    integrationId?: InputMaybe<Scalars['ID']>;
    user?: InputMaybe<EventUserAttributesInput>;
};
export type EventUserAttributes = {
    __typename?: 'EventUserAttributes';
    userCohorts?: Maybe<Array<Scalars['String']>>;
    userCustomAttributes?: Maybe<Scalars['JSONObject']>;
    userEmail?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['String']>;
    userIdentificationType: UserIdentificationType;
    userType: UserType;
};
export type EventUserAttributesInput = {
    userCohorts?: InputMaybe<Array<Scalars['String']>>;
    userCustomAttributes?: InputMaybe<Scalars['JSONObject']>;
    userEmail?: InputMaybe<Scalars['String']>;
    userId?: InputMaybe<Scalars['String']>;
    userIdentificationType?: InputMaybe<UserIdentificationType>;
    userToken?: InputMaybe<Scalars['String']>;
    userType?: InputMaybe<UserType>;
};
export type FirstPartyDocumentationGap = DocumentationGap & {
    __typename?: 'FirstPartyDocumentationGap';
    description: Scalars['String'];
    label: Scalars['String'];
    sourceChatMessages?: Maybe<Array<SourceChatMessage>>;
};
export type FirstPartyDocumentationGapInput = {
    description: Scalars['String'];
    label: Scalars['String'];
    sourceMessageIds?: InputMaybe<Array<Scalars['String']>>;
};
export type FirstPartyFeatureGap = DocumentationGap & {
    __typename?: 'FirstPartyFeatureGap';
    description: Scalars['String'];
    label: Scalars['String'];
    sourceChatMessages?: Maybe<Array<SourceChatMessage>>;
};
export type GeneralWebCreateSourceConfiguration = {
    crawlerSitemapUrls?: InputMaybe<Array<Scalars['String']>>;
    crawlerStartUrls?: InputMaybe<Array<Scalars['String']>>;
    dateXPaths?: InputMaybe<Array<Scalars['String']>>;
    displayName: Scalars['String'];
    filterXPaths?: InputMaybe<Array<Scalars['String']>>;
    ingestUrls?: InputMaybe<Array<Scalars['String']>>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    isDocumentation?: InputMaybe<Scalars['Boolean']>;
    urlMatchingPatterns?: InputMaybe<UrlMatchingPatternsInput>;
};
export type GeneralWebSource = Source & {
    __typename?: 'GeneralWebSource';
    crawlerSitemapUrls?: Maybe<Array<Scalars['String']>>;
    crawlerStartUrls?: Maybe<Array<Scalars['String']>>;
    createdAt: Scalars['DateTime'];
    dateXPaths?: Maybe<Array<Scalars['String']>>;
    displayName: Scalars['String'];
    filterXPaths?: Maybe<Array<Scalars['String']>>;
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    ingestUrls?: Maybe<Array<Scalars['String']>>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    urlMatchingPatterns?: Maybe<UrlMatchingPatternsResult>;
};
export type GeneralWebUpdateSourceConfiguration = {
    crawlerSitemapUrls?: InputMaybe<Array<Scalars['String']>>;
    crawlerStartUrls?: InputMaybe<Array<Scalars['String']>>;
    dateXPaths?: InputMaybe<Array<Scalars['String']>>;
    displayName: Scalars['String'];
    filterXPaths?: InputMaybe<Array<Scalars['String']>>;
    ingestUrls?: InputMaybe<Array<Scalars['String']>>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    isDocumentation?: InputMaybe<Scalars['Boolean']>;
    urlMatchingPatterns?: InputMaybe<UrlMatchingPatternsInput>;
};
export type GetHelpCallToAction = {
    __typename?: 'GetHelpCallToAction';
    icon: IconType;
    id: Scalars['ID'];
    label: Scalars['String'];
    url: Scalars['String'];
};
export type GetInvitationStatusInput = {
    email: Scalars['String'];
};
export type GitHubCreateSourceConfiguration = {
    displayName: Scalars['String'];
    includeDiscussions?: InputMaybe<Scalars['Boolean']>;
    includeIssues?: InputMaybe<Scalars['Boolean']>;
    includePullRequests?: InputMaybe<Scalars['Boolean']>;
    includeREADMEs?: InputMaybe<Scalars['Boolean']>;
    includeReleaseNotes?: InputMaybe<Scalars['Boolean']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type GitHubIssueComment = {
    __typename?: 'GitHubIssueComment';
    body?: Maybe<Scalars['String']>;
    commentDate: Scalars['DateTime'];
    id: Scalars['ID'];
    reactions: Array<GitHubReaction>;
    url: Scalars['String'];
};
export type GitHubIssueHit = SearchHit & {
    __typename?: 'GitHubIssueHit';
    hitOnRoot: Scalars['Boolean'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    rootRecord: GitHubIssueRecord;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type GitHubIssueRecord = SearchRootRecord & {
    __typename?: 'GitHubIssueRecord';
    body?: Maybe<Scalars['String']>;
    commentsWithMostPositiveReactions: Array<GitHubIssueComment>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    reactions: Array<GitHubReaction>;
    state: GitHubIssueState;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare enum GitHubIssueState {
    Closed = "CLOSED",
    Open = "OPEN"
}
export type GitHubReaction = {
    __typename?: 'GitHubReaction';
    count: Scalars['Int'];
    reactionType: ReactionType;
};
export type GitHubSource = Source & {
    __typename?: 'GitHubSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    includeDiscussions?: Maybe<Scalars['Boolean']>;
    includeIssues?: Maybe<Scalars['Boolean']>;
    includePullRequests?: Maybe<Scalars['Boolean']>;
    includeREADMEs?: Maybe<Scalars['Boolean']>;
    includeReleaseNotes?: Maybe<Scalars['Boolean']>;
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    owner: Scalars['String'];
    repo: Scalars['String'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type GitHubUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    includeDiscussions?: InputMaybe<Scalars['Boolean']>;
    includeIssues?: InputMaybe<Scalars['Boolean']>;
    includePullRequests?: InputMaybe<Scalars['Boolean']>;
    includeREADMEs?: InputMaybe<Scalars['Boolean']>;
    includeReleaseNotes?: InputMaybe<Scalars['Boolean']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
};
export type GitbookCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type GitbookSource = Source & {
    __typename?: 'GitbookSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type GitbookUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export type GuidanceRule = {
    __typename?: 'GuidanceRule';
    conditions?: Maybe<Array<Scalars['String']>>;
    description?: Maybe<Scalars['String']>;
    enabled?: Maybe<Scalars['Boolean']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
};
export type GuidanceRuleInput = {
    conditions?: InputMaybe<Array<Scalars['String']>>;
    description: Scalars['String'];
    enabled?: InputMaybe<Scalars['Boolean']>;
    id?: InputMaybe<Scalars['ID']>;
    name: Scalars['String'];
    remove?: InputMaybe<Scalars['Boolean']>;
};
export type IconType = BuiltInIcon | CustomIcon;
export declare enum IndexType {
    DiscordChannels = "DISCORD_CHANNELS",
    GithubDiscussions = "GITHUB_DISCUSSIONS",
    GithubIssues = "GITHUB_ISSUES",
    GithubPrs = "GITHUB_PRS",
    GithubReadmes = "GITHUB_READMES",
    GithubReleases = "GITHUB_RELEASES",
    SlackChannels = "SLACK_CHANNELS"
}
export declare enum IndexingEngine {
    DiscordForumPosts = "DISCORD_FORUM_POSTS",
    DiscordMessages = "DISCORD_MESSAGES",
    DiscoursePosts = "DISCOURSE_POSTS",
    EvolvableEnumValue = "EVOLVABLE_ENUM_VALUE",
    GenericDocs = "GENERIC_DOCS",
    GenericPdfs = "GENERIC_PDFS",
    GithubDiscussions = "GITHUB_DISCUSSIONS",
    GithubIssues = "GITHUB_ISSUES",
    GithubPullRequests = "GITHUB_PULL_REQUESTS",
    GithubReadmes = "GITHUB_READMES",
    GithubReleases = "GITHUB_RELEASES",
    InkeepCustomQuestionAnswers = "INKEEP_CUSTOM_QUESTION_ANSWERS",
    InkeepRevisedAnswers = "INKEEP_REVISED_ANSWERS",
    MintlifyDocs = "MINTLIFY_DOCS",
    Openapi = "OPENAPI",
    SlackMessages = "SLACK_MESSAGES",
    StackoverflowQuestions = "STACKOVERFLOW_QUESTIONS"
}
export type IndexingJob = {
    __typename?: 'IndexingJob';
    endTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    index: SourceIndex;
    indexId: Scalars['ID'];
    startTime: Scalars['DateTime'];
    status: IndexingJobStatus;
    statusMessage?: Maybe<Scalars['String']>;
};
export declare enum IndexingJobStatus {
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    Processing = "PROCESSING",
    Queued = "QUEUED",
    Successful = "SUCCESSFUL"
}
export type IngestionMatchingPatterns = {
    __typename?: 'IngestionMatchingPatterns';
    excludePatterns: Array<UrlMatchPattern>;
    includePatterns: Array<UrlMatchPattern>;
};
export type InkeepWebWidgetClient = {
    __typename?: 'InkeepWebWidgetClient';
    chatModeComponentDefault: ChatMode;
    chatModeCurrentlySelected?: Maybe<Scalars['String']>;
    interactionType: WebWidgetInteractionType;
    isChatModeToggleEnabled: Scalars['Boolean'];
    isModalModeSwitchingEnabled: Scalars['Boolean'];
    modalViewComponentDefault: Scalars['String'];
    modalViewCurrentlySelected?: Maybe<Scalars['String']>;
    sharedChatSessionId?: Maybe<Scalars['String']>;
    widgetLibraryVersion: Scalars['String'];
};
export type InkeepWebWidgetClientInput = {
    chatModeComponentDefault: ChatMode;
    chatModeCurrentlySelected?: InputMaybe<Scalars['String']>;
    interactionType: WebWidgetInteractionType;
    isChatModeToggleEnabled: Scalars['Boolean'];
    isModalModeSwitchingEnabled: Scalars['Boolean'];
    modalViewComponentDefault: Scalars['String'];
    modalViewCurrentlySelected?: InputMaybe<Scalars['String']>;
    sharedChatSessionId?: InputMaybe<Scalars['String']>;
    widgetLibraryVersion: Scalars['String'];
};
export type Integration = {
    __typename?: 'Integration';
    apiKey: Scalars['String'];
    configuration?: Maybe<IntegrationConfiguration>;
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    isDeactivated: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    isUrlRefererValidationEnabled: Scalars['Boolean'];
    type: IntegrationType;
    url?: Maybe<Scalars['String']>;
    userTokenSettings?: Maybe<UserTokenSettings>;
};
export type IntegrationConfiguration = DiscordIntegrationConfiguration | MintlifyIntegrationConfiguration | SlackIntegrationConfiguration | WebIntegrationConfiguration;
export type IntegrationMetadata = {
    __typename?: 'IntegrationMetadata';
    integration: Integration;
    organization: Organization;
    project: Project;
};
export type IntegrationRuntimeDiscordSettings = IntegrationRuntimeSettings & {
    __typename?: 'IntegrationRuntimeDiscordSettings';
    apiKey: Scalars['String'];
    chatSubjectName?: Maybe<Scalars['String']>;
    configuration?: Maybe<DiscordIntegrationConfiguration>;
    integrationId: Scalars['ID'];
    organizationDisplayName?: Maybe<Scalars['String']>;
    organizationId: Scalars['ID'];
};
export type IntegrationRuntimeSettings = {
    apiKey: Scalars['String'];
    integrationId: Scalars['ID'];
    organizationId: Scalars['ID'];
};
export type IntegrationRuntimeSlackSettings = IntegrationRuntimeSettings & {
    __typename?: 'IntegrationRuntimeSlackSettings';
    apiKey: Scalars['String'];
    chatSubjectName?: Maybe<Scalars['String']>;
    configuration?: Maybe<SlackIntegrationConfiguration>;
    integrationId: Scalars['ID'];
    organizationDisplayName?: Maybe<Scalars['String']>;
    organizationId: Scalars['ID'];
};
export declare enum IntegrationType {
    Api = "API",
    DiscordBot = "DISCORD_BOT",
    InkeepPortal = "INKEEP_PORTAL",
    Mintlify = "MINTLIFY",
    SharableSandbox = "SHARABLE_SANDBOX",
    SlackBot = "SLACK_BOT",
    Web = "WEB"
}
export declare enum InvitationStatus {
    Pending = "PENDING",
    Redeemed = "REDEEMED"
}
export type InviteMemberToOrganizationInput = {
    invitee: Scalars['String'];
    roles: Array<RoleOption>;
};
export type InviteMemberToOrganizationResult = {
    __typename?: 'InviteMemberToOrganizationResult';
    success: Scalars['Boolean'];
};
export type ListChatFeedbackInput = {
    integrationId?: InputMaybe<Scalars['ID']>;
    page?: InputMaybe<PageInput>;
    projectId?: InputMaybe<Scalars['ID']>;
    type?: InputMaybe<ChatFeedbackType>;
};
export type ListChatFeedbackResponse = {
    __typename?: 'ListChatFeedbackResponse';
    feedback: Array<ChatFeedback>;
    pageInfo: PageInfo;
};
export type LogChatNegativeFeedbackInput = {
    chatProperties: RequiredChatPropertiesInput;
    integrationId?: InputMaybe<Scalars['ID']>;
    metadata?: InputMaybe<EventMetadataInput>;
    reasons?: InputMaybe<NegativeFeedbackReasonsInput>;
};
export type LogChatNegativeFeedbackResponse = {
    __typename?: 'LogChatNegativeFeedbackResponse';
    negativeFeedback: ChatNegativeFeedback;
    success: Scalars['Boolean'];
};
export type LogChatPositiveFeedbackInput = {
    chatProperties: RequiredChatPropertiesInput;
    integrationId?: InputMaybe<Scalars['ID']>;
    metadata?: InputMaybe<EventMetadataInput>;
};
export type LogChatPositiveFeedbackResponse = {
    __typename?: 'LogChatPositiveFeedbackResponse';
    positiveFeedback: ChatPositiveFeedback;
    success: Scalars['Boolean'];
};
export type LogUsageEventInput = {
    chatProperties?: InputMaybe<ChatPropertiesInput>;
    eventName: Scalars['String'];
    eventProperties?: InputMaybe<Scalars['JSONObject']>;
    integrationId?: InputMaybe<Scalars['ID']>;
    metadata?: InputMaybe<EventMetadataInput>;
    searchProperties?: InputMaybe<SearchPropertiesInput>;
};
export type LogUsageEventResult = {
    __typename?: 'LogUsageEventResult';
    success: Scalars['Boolean'];
};
export type ManagedQuestionAnswer = {
    answer: UserAnswer;
    createdAt: Scalars['DateTime'];
    editedAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    isEnabled: Scalars['Boolean'];
    question: UserMessage;
};
export type MintlifyCreateIntegrationConfiguration = {
    mintlifyIntegrationId: Scalars['String'];
};
export type MintlifyIntegrationConfiguration = {
    __typename?: 'MintlifyIntegrationConfiguration';
    mintlifyIntegrationId: Scalars['String'];
    type: IntegrationType;
};
export type MintlifyUpdateIntegrationConfiguration = {
    mintlifyIntegrationId?: InputMaybe<Scalars['String']>;
};
export type Mutation = {
    __typename?: 'Mutation';
    addSourceToProject: AddSourceToProjectResult;
    changeSandboxExpiryDate: ChangeSandboxExpiryDateResult;
    copyChatSession: Scalars['ID'];
    createCustomQuestionAnswer: CreateCustomQuestionAnswerResult;
    createGetHelpCallToAction: CreateGetHelpCallToActionResult;
    createIndexingJob: CreateIndexingJobResult;
    createIntegration: CreateIntegrationResult;
    createOrganization: CreateOrganizationResult;
    createProject: CreateProjectResult;
    createReport: CreateReportResult;
    createSandbox: CreateSandboxResult;
    createSavedChat: CreateSavedChatResult;
    createSelfServeDemo: CreateSelfServiceDemoResult;
    createSource: CreateSourceResult;
    createSourceIndex: CreateSourceIndexResult;
    createSourceSyncJob: CreateSourceSyncJobResult;
    deactivateSandbox: DeactivateSandboxResult;
    deleteCustomQuestionAnswer: DeleteCustomQuestionAnswerResult;
    deleteIntegration: DeleteIntegrationResult;
    deleteProject: DeleteProjectResult;
    deleteReport: DeleteReportResult;
    deleteRevisedAnswer: DeleteRevisedAnswerResult;
    deleteSandbox: DeleteSandboxResult;
    deleteSavedChat: DeleteSavedChatResult;
    deleteSource: DeleteSourceResult;
    deleteSourceIndex: DeleteSourceIndexResult;
    inviteMemberToOrganization: InviteMemberToOrganizationResult;
    logChatNegativeFeedback: LogChatNegativeFeedbackResponse;
    logChatPositiveFeedback: LogChatPositiveFeedbackResponse;
    logUsageEvent: LogUsageEventResult;
    regenerateIntegrationApiKey: RegenerateIntegrationApiKeyResult;
    removeGetHelpCallToActionFromProject: RemoveGetHelpCallToActionResult;
    removeSourceFromProject: RemoveSourceFromProjectResult;
    setDefaultProjectForOrganization: SetDefaultProjectForOrganizationResult;
    setDefaultProjectForUser: SetDefaultProjectForUserResult;
    submitRevisedAnswer: SubmitRevisedAnswerResult;
    updateCustomQuestionAnswer: UpdateCustomQuestionAnswerResult;
    updateEnabledIndexesForSource: UpdateEnabledIndexesForSourceResult;
    updateGetHelpCallToAction: UpdateGetHelpCallToActionResult;
    updateIndexingJob: UpdateIndexingJobResult;
    updateIntegration: UpdateIntegrationResult;
    updateOrganization: UpdateOrganizationResult;
    updateProject: UpdateProjectResult;
    updateRevisedAnswer: UpdateRevisedAnswerResult;
    updateSavedChat: UpdateSavedChatResult;
    updateSelfServeDemo: UpdateSelfServiceDemoResult;
    updateSource: UpdateSourceResult;
    uploadOrganizationIcon: UploadOrganizationIconResult;
};
export type MutationAddSourceToProjectArgs = {
    projectId: Scalars['ID'];
    sourceId: Scalars['ID'];
};
export type MutationChangeSandboxExpiryDateArgs = {
    input: ChangeSandboxExpiryDateInput;
};
export type MutationCopyChatSessionArgs = {
    isSharedSession: Scalars['Boolean'];
    sessionId: Scalars['ID'];
};
export type MutationCreateCustomQuestionAnswerArgs = {
    input: CreateCustomQuestionAnswerInput;
};
export type MutationCreateGetHelpCallToActionArgs = {
    input: CreateGetHelpCallToActionInput;
};
export type MutationCreateIndexingJobArgs = {
    input: CreateIndexingJobInput;
};
export type MutationCreateIntegrationArgs = {
    input: CreateIntegrationInput;
};
export type MutationCreateOrganizationArgs = {
    input: CreateOrganizationInput;
};
export type MutationCreateProjectArgs = {
    input: CreateProjectInput;
};
export type MutationCreateReportArgs = {
    input: CreateReportInput;
};
export type MutationCreateSandboxArgs = {
    input: CreateSandboxInput;
};
export type MutationCreateSavedChatArgs = {
    input: CreateSavedChatInput;
};
export type MutationCreateSelfServeDemoArgs = {
    input: CreateSelfServeDemoInput;
};
export type MutationCreateSourceArgs = {
    input: CreateSourceInput;
};
export type MutationCreateSourceIndexArgs = {
    input: CreateSourceIndexInput;
};
export type MutationCreateSourceSyncJobArgs = {
    input: CreateSourceSyncJobInput;
};
export type MutationDeactivateSandboxArgs = {
    sandboxId: Scalars['ID'];
};
export type MutationDeleteCustomQuestionAnswerArgs = {
    id: Scalars['ID'];
};
export type MutationDeleteIntegrationArgs = {
    integrationId: Scalars['ID'];
};
export type MutationDeleteProjectArgs = {
    projectId: Scalars['ID'];
};
export type MutationDeleteReportArgs = {
    input: DeleteReportInput;
};
export type MutationDeleteRevisedAnswerArgs = {
    id: Scalars['ID'];
};
export type MutationDeleteSandboxArgs = {
    sandboxId: Scalars['ID'];
};
export type MutationDeleteSavedChatArgs = {
    input: DeleteSavedChatInput;
};
export type MutationDeleteSourceArgs = {
    sourceId: Scalars['ID'];
};
export type MutationDeleteSourceIndexArgs = {
    sourceIndexId: Scalars['ID'];
};
export type MutationInviteMemberToOrganizationArgs = {
    input: InviteMemberToOrganizationInput;
};
export type MutationLogChatNegativeFeedbackArgs = {
    input: LogChatNegativeFeedbackInput;
};
export type MutationLogChatPositiveFeedbackArgs = {
    input: LogChatPositiveFeedbackInput;
};
export type MutationLogUsageEventArgs = {
    input: LogUsageEventInput;
};
export type MutationRegenerateIntegrationApiKeyArgs = {
    integrationId: Scalars['ID'];
};
export type MutationRemoveGetHelpCallToActionFromProjectArgs = {
    input: RemoveGetHelpCallToActionInput;
};
export type MutationRemoveSourceFromProjectArgs = {
    projectId: Scalars['ID'];
    sourceId: Scalars['ID'];
};
export type MutationSetDefaultProjectForOrganizationArgs = {
    input: SetDefaultProjectForOrganizationInput;
};
export type MutationSetDefaultProjectForUserArgs = {
    input: SetDefaultProjectForUserInput;
};
export type MutationSubmitRevisedAnswerArgs = {
    input: SubmitRevisedAnswerInput;
};
export type MutationUpdateCustomQuestionAnswerArgs = {
    input: UpdateCustomQuestionAnswerInput;
};
export type MutationUpdateEnabledIndexesForSourceArgs = {
    input: UpdateEnabledIndexesForSourceInput;
};
export type MutationUpdateGetHelpCallToActionArgs = {
    input: UpdateGetHelpCallToActionInput;
};
export type MutationUpdateIndexingJobArgs = {
    input: UpdateIndexingJobInput;
};
export type MutationUpdateIntegrationArgs = {
    input: UpdateIntegrationInput;
};
export type MutationUpdateOrganizationArgs = {
    input: UpdateOrganizationInput;
};
export type MutationUpdateProjectArgs = {
    input: UpdateProjectInput;
};
export type MutationUpdateRevisedAnswerArgs = {
    input: UpdateRevisedAnswerInput;
};
export type MutationUpdateSavedChatArgs = {
    input: UpdateSavedChatInput;
};
export type MutationUpdateSelfServeDemoArgs = {
    input: UpdateSelfServeDemoInput;
};
export type MutationUpdateSourceArgs = {
    input: UpdateSourceInput;
};
export type MutationUploadOrganizationIconArgs = {
    input: UploadOrganizationIconInput;
};
export type NegativeFeedbackReasons = {
    __typename?: 'NegativeFeedbackReasons';
    confusedTerms?: Maybe<Scalars['Boolean']>;
    confusedTermsDetails?: Maybe<Scalars['String']>;
    highlightedUnrelatedIssues?: Maybe<Scalars['Boolean']>;
    highlightedUnrelatedIssuesDetails?: Maybe<Scalars['String']>;
    inaccurateCodeSnippet?: Maybe<Scalars['Boolean']>;
    inaccurateCodeSnippetDetails?: Maybe<Scalars['String']>;
    inaccurateStatement?: Maybe<Scalars['Boolean']>;
    inaccurateStatementDetails?: Maybe<Scalars['String']>;
    irrelevantCitations?: Maybe<Scalars['Boolean']>;
    irrelevantCitationsDetails?: Maybe<Scalars['String']>;
    other?: Maybe<Scalars['Boolean']>;
    otherDetails?: Maybe<Scalars['String']>;
    riskyAction?: Maybe<Scalars['Boolean']>;
    riskyActionDetails?: Maybe<Scalars['String']>;
    suggestedACompetitor?: Maybe<Scalars['Boolean']>;
    suggestedACompetitorDetails?: Maybe<Scalars['String']>;
    unrelatedResponse?: Maybe<Scalars['Boolean']>;
    unrelatedResponseDetails?: Maybe<Scalars['String']>;
};
export type NegativeFeedbackReasonsInput = {
    confusedTerms?: InputMaybe<Scalars['Boolean']>;
    confusedTermsDetails?: InputMaybe<Scalars['String']>;
    highlightedUnrelatedIssues?: InputMaybe<Scalars['Boolean']>;
    highlightedUnrelatedIssuesDetails?: InputMaybe<Scalars['String']>;
    inaccurateCodeSnippet?: InputMaybe<Scalars['Boolean']>;
    inaccurateCodeSnippetDetails?: InputMaybe<Scalars['String']>;
    inaccurateStatement?: InputMaybe<Scalars['Boolean']>;
    inaccurateStatementDetails?: InputMaybe<Scalars['String']>;
    irrelevantCitations?: InputMaybe<Scalars['Boolean']>;
    irrelevantCitationsDetails?: InputMaybe<Scalars['String']>;
    other?: InputMaybe<Scalars['Boolean']>;
    otherDetails?: InputMaybe<Scalars['String']>;
    riskyAction?: InputMaybe<Scalars['Boolean']>;
    riskyActionDetails?: InputMaybe<Scalars['String']>;
    suggestedACompetitor?: InputMaybe<Scalars['Boolean']>;
    suggestedACompetitorDetails?: InputMaybe<Scalars['String']>;
    unrelatedResponse?: InputMaybe<Scalars['Boolean']>;
    unrelatedResponseDetails?: InputMaybe<Scalars['String']>;
};
export type NewIndexingJobInput = {
    startTime: Scalars['DateTime'];
    status: IndexingJobStatus;
    statusMessage?: InputMaybe<Scalars['String']>;
};
export type NewSessionChatResultInput = {
    chatMode?: InputMaybe<ChatMode>;
    context?: InputMaybe<Scalars['String']>;
    environment?: InputMaybe<Scalars['String']>;
    filters?: InputMaybe<ChatFiltersInput>;
    guidance?: InputMaybe<Scalars['String']>;
    integrationId?: InputMaybe<Scalars['ID']>;
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    messageContext?: InputMaybe<Scalars['String']>;
    messageInput: Scalars['String'];
    organizationId?: InputMaybe<Scalars['ID']>;
    outputMode?: InputMaybe<OutputMode>;
    product?: InputMaybe<Scalars['String']>;
    productVersion?: InputMaybe<Scalars['String']>;
    tags?: InputMaybe<Array<Scalars['String']>>;
    userAttributes?: InputMaybe<Scalars['JSON']>;
    workflowId?: InputMaybe<Scalars['String']>;
    workflowVersion?: InputMaybe<Scalars['String']>;
};
export type Organization = {
    __typename?: 'Organization';
    alias: Scalars['ID'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    portalDisplayPreferences: PortalDisplayPreferences;
    projects: Array<Project>;
    sources: Array<Source>;
    status: OrganizationStatus;
    users: Array<User>;
};
export declare enum OrganizationStatus {
    Customer = "CUSTOMER",
    Demo = "DEMO",
    DocusaurusDemo = "DOCUSAURUS_DEMO",
    Inactive = "INACTIVE",
    Prospect = "PROSPECT",
    SelfServiceDemo = "SELF_SERVICE_DEMO"
}
export declare enum OutputMode {
    Code = "CODE",
    Default = "DEFAULT",
    Python = "PYTHON",
    Sql = "SQL"
}
export type PageInfo = {
    __typename?: 'PageInfo';
    endCursor?: Maybe<Scalars['String']>;
    startCursor?: Maybe<Scalars['String']>;
};
export type PageInput = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type PortalDisplayPreferences = {
    __typename?: 'PortalDisplayPreferences';
    botAvatarDarkSrcUrl?: Maybe<Scalars['String']>;
    botAvatarSrcUrl?: Maybe<Scalars['String']>;
    defaultColorMode?: Maybe<ColorMode>;
    defaultProject?: Maybe<Project>;
    id: Scalars['ID'];
    primaryBrandColor?: Maybe<Scalars['String']>;
};
export type PortalDisplayPreferencesInput = {
    botAvatarDarkSrcUrl?: InputMaybe<Scalars['String']>;
    botAvatarSrcUrl?: InputMaybe<Scalars['String']>;
    defaultColorMode?: InputMaybe<ColorMode>;
    primaryBrandColor?: InputMaybe<Scalars['String']>;
};
export type PostChatResultSignals = {
    __typename?: 'PostChatResultSignals';
    botAbleToAnswerGivenSources?: Maybe<Scalars['Boolean']>;
    suggestedFollowupQuestions?: Maybe<Array<Scalars['String']>>;
};
export type Project = {
    __typename?: 'Project';
    botCreator?: Maybe<Scalars['String']>;
    botName?: Maybe<Scalars['String']>;
    chatSubjectName?: Maybe<Scalars['String']>;
    context: Array<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    defaultCustomQuestionAnswersSource?: Maybe<CustomQuestionAnswersSource>;
    defaultRevisedAnswersSource?: Maybe<RevisedAnswersSource>;
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    endUserDescription?: Maybe<Scalars['String']>;
    getHelpCallToActions?: Maybe<Array<GetHelpCallToAction>>;
    guidanceRules?: Maybe<Array<GuidanceRule>>;
    id: Scalars['ID'];
    integrations: Array<Integration>;
    oneLineDescription?: Maybe<Scalars['String']>;
    programmingLanguages?: Maybe<Array<Scalars['String']>>;
    quickQuestions: Array<Maybe<Scalars['String']>>;
    reports: Array<Report>;
    sandboxes: Array<Sandbox>;
    sources: Array<Source>;
    supportLine?: Maybe<Scalars['String']>;
    tone?: Maybe<Scalars['String']>;
};
export declare enum PromotionType {
    Docusaurus = "DOCUSAURUS"
}
export type Query = {
    __typename?: 'Query';
    allOrganizationIds: Array<Scalars['String']>;
    allOrganizationsMetadata: Array<Maybe<Organization>>;
    allProjects: Array<Project>;
    allSourceSyncJobs: Array<SourceSyncJob>;
    allSources: Array<Source>;
    analyticsDashboard?: Maybe<DashboardAccessTokens>;
    chatFeedback?: Maybe<ChatFeedback>;
    discordBotIntegrationSettings: IntegrationRuntimeDiscordSettings;
    getChatSession: ChatSession;
    getInvitationStatus: UserInvitationStatus;
    getSearchRootRecords: Array<SearchRootRecord>;
    hello?: Maybe<Scalars['String']>;
    indexingJob: IndexingJob;
    integration: Integration;
    integrationMetadata: IntegrationMetadata;
    listChatFeedback: ListChatFeedbackResponse;
    organization: Organization;
    project: Project;
    projectByApiKey: Project;
    report?: Maybe<Report>;
    sandbox: Sandbox;
    sandboxChatHistory: Array<SavedChat>;
    sandboxRenderSettings: SandboxRenderSettings;
    savedChat: SavedChat;
    search: SearchResult;
    selfServeDemo?: Maybe<SelfServeDemo>;
    slackBotIntegrationSettings: IntegrationRuntimeSlackSettings;
    source: Source;
    sourceIndex: SourceIndex;
    sourceSyncJob: SourceSyncJob;
    user: User;
};
export type QueryAnalyticsDashboardArgs = {
    input?: InputMaybe<AnalyticsDashboardInput>;
};
export type QueryChatFeedbackArgs = {
    id: Scalars['ID'];
};
export type QueryDiscordBotIntegrationSettingsArgs = {
    input: DiscordBotIntegrationSettingsInput;
};
export type QueryGetChatSessionArgs = {
    id: Scalars['ID'];
};
export type QueryGetInvitationStatusArgs = {
    input: GetInvitationStatusInput;
};
export type QueryGetSearchRootRecordsArgs = {
    ids: Array<Scalars['ID']>;
};
export type QueryIndexingJobArgs = {
    indexingJobId: Scalars['ID'];
};
export type QueryIntegrationArgs = {
    integrationId: Scalars['ID'];
};
export type QueryIntegrationMetadataArgs = {
    integrationId: Scalars['ID'];
};
export type QueryListChatFeedbackArgs = {
    input: ListChatFeedbackInput;
};
export type QueryProjectArgs = {
    projectId: Scalars['ID'];
};
export type QueryProjectByApiKeyArgs = {
    apiKey: Scalars['String'];
};
export type QueryReportArgs = {
    id: Scalars['ID'];
};
export type QuerySandboxArgs = {
    sandboxId: Scalars['ID'];
};
export type QuerySandboxChatHistoryArgs = {
    input: SandboxChatHistoryInput;
};
export type QuerySandboxRenderSettingsArgs = {
    input: SandboxRenderSettingsInput;
};
export type QuerySavedChatArgs = {
    input: QuerySavedChatInput;
};
export type QuerySearchArgs = {
    searchInput: SearchInput;
};
export type QuerySelfServeDemoArgs = {
    input: SelfServeDemoGetInput;
};
export type QuerySlackBotIntegrationSettingsArgs = {
    input: SlackBotIntegrationSettingsInput;
};
export type QuerySourceArgs = {
    sourceId: Scalars['ID'];
};
export type QuerySourceIndexArgs = {
    sourceIndexId: Scalars['ID'];
};
export type QuerySourceSyncJobArgs = {
    sourceSyncJobId: Scalars['ID'];
};
export type QueryUserArgs = {
    userId: Scalars['ID'];
};
export type QuerySavedChatInput = {
    chatSessionId: Scalars['ID'];
};
export type QuerySavedChatsInput = {
    filters?: InputMaybe<SavedChatsFiltersInput>;
    projectId: Scalars['ID'];
    sandbox?: InputMaybe<SandboxRenderSettingsInput>;
};
export declare enum QuestionAnswerCacheType {
    ExactMatch = "EXACT_MATCH",
    None = "NONE"
}
export declare enum ReactionType {
    Confused = "CONFUSED",
    Eyes = "EYES",
    Heart = "HEART",
    Hooray = "HOORAY",
    Laugh = "LAUGH",
    MinusOne = "MINUS_ONE",
    PlusOne = "PLUS_ONE",
    Rocket = "ROCKET"
}
export type ReadmeCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type ReadmeSource = Source & {
    __typename?: 'ReadmeSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type ReadmeUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export declare enum RecordType {
    Discord = "DISCORD",
    DiscordForumPost = "DISCORD_FORUM_POST",
    DiscordMessage = "DISCORD_MESSAGE",
    Discourse = "DISCOURSE",
    DiscoursePost = "DISCOURSE_POST",
    Documentation = "DOCUMENTATION",
    GithubDiscussion = "GITHUB_DISCUSSION",
    GithubIssue = "GITHUB_ISSUE",
    Manual = "MANUAL",
    Site = "SITE",
    Stackoverflow = "STACKOVERFLOW",
    StackoverflowQuestion = "STACKOVERFLOW_QUESTION"
}
export type RedoclyCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type RedoclySource = Source & {
    __typename?: 'RedoclySource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDocumentation: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    url: Scalars['String'];
};
export type RedoclyUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export type RegenerateIntegrationApiKeyResult = {
    __typename?: 'RegenerateIntegrationApiKeyResult';
    apiKey: Scalars['String'];
    integration: Integration;
    success: Scalars['Boolean'];
};
export type RemoveGetHelpCallToActionInput = {
    id: Scalars['ID'];
    projectId: Scalars['ID'];
};
export type RemoveGetHelpCallToActionResult = {
    __typename?: 'RemoveGetHelpCallToActionResult';
    getHelpCallToAction: GetHelpCallToAction;
    project: Project;
    success: Scalars['Boolean'];
};
export type RemoveSourceFromProjectResult = {
    __typename?: 'RemoveSourceFromProjectResult';
    project: Project;
    source: Source;
    success: Scalars['Boolean'];
};
export type Report = {
    createdAt: Scalars['DateTime'];
    endDate: Scalars['DateTime'];
    id: Scalars['ID'];
    labels: Array<Scalars['String']>;
    startDate: Scalars['DateTime'];
};
export type ReportContentInput = {
    documentationGaps?: InputMaybe<DocumentationGapsReportInput>;
};
export type RequiredChatPropertiesInput = {
    answer: BotMessageInput;
    chatMode: ChatMode;
    chatSessionAllMessages: Array<ChatSessionMessageInput>;
    chatSessionId: Scalars['ID'];
    filters?: InputMaybe<SearchAndChatFiltersInput>;
    question: UserMessageInput;
};
export type RevisedAnswer = ManagedQuestionAnswer & {
    __typename?: 'RevisedAnswer';
    answer: UserAnswer;
    chatSessionId: Scalars['String'];
    createdAt: Scalars['DateTime'];
    editedAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    isEnabled: Scalars['Boolean'];
    originalAnswer: BotMessage;
    question: UserMessage;
};
export type RevisedAnswersCreateSourceConfiguration = {
    defaultCacheType?: InputMaybe<QuestionAnswerCacheType>;
    displayName: Scalars['String'];
};
export type RevisedAnswersSource = Source & {
    __typename?: 'RevisedAnswersSource';
    createdAt: Scalars['DateTime'];
    defaultCacheType: QuestionAnswerCacheType;
    defaultForProject?: Maybe<Project>;
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    revisedAnswers: Array<RevisedAnswer>;
    syncJobHistory: Array<SourceSyncJob>;
};
export type RevisedAnswersUpdateSourceConfiguration = {
    defaultCacheType?: InputMaybe<QuestionAnswerCacheType>;
    displayName?: InputMaybe<Scalars['String']>;
};
export declare enum RoleOption {
    OrganizationAdministrator = "ORGANIZATION_ADMINISTRATOR",
    OrganizationMember = "ORGANIZATION_MEMBER"
}
export type Sandbox = {
    __typename?: 'Sandbox';
    author?: Maybe<User>;
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    expiresAt?: Maybe<Scalars['DateTime']>;
    hasNoBranding: Scalars['Boolean'];
    id: Scalars['ID'];
    isDeactivated: Scalars['Boolean'];
    isDeactivatedReason?: Maybe<Scalars['String']>;
    isTrial: Scalars['Boolean'];
    type: SandboxType;
};
export type SandboxChatHistoryInput = {
    filters?: InputMaybe<SavedChatsFiltersInput>;
    sandboxRenderSettings: SandboxRenderSettingsInput;
};
export type SandboxPromotionRuntimeSettings = IntegrationRuntimeSettings & {
    __typename?: 'SandboxPromotionRuntimeSettings';
    apiKey: Scalars['String'];
    chatSubjectName?: Maybe<Scalars['String']>;
    getHelpCallToActions?: Maybe<Array<GetHelpCallToAction>>;
    integrationId: Scalars['ID'];
    integrationUrl?: Maybe<Scalars['String']>;
    organizationId: Scalars['ID'];
    organizationPortalDisplayPreferences: PortalDisplayPreferences;
    quickQuestions?: Maybe<Array<Scalars['String']>>;
};
export type SandboxPromotionSettings = {
    __typename?: 'SandboxPromotionSettings';
    integrationSettings?: Maybe<SandboxPromotionRuntimeSettings>;
    promotionType: PromotionType;
};
export type SandboxPromotionSettingsInput = {
    integrationId: Scalars['ID'];
    promotionType: PromotionType;
};
export type SandboxRenderSettings = {
    __typename?: 'SandboxRenderSettings';
    chatHistory: Array<SavedChat>;
    displayName: Scalars['String'];
    expiresAt?: Maybe<Scalars['DateTime']>;
    hasNoBranding: Scalars['Boolean'];
    id: Scalars['ID'];
    isDeactivated: Scalars['Boolean'];
    isDeactivatedReason?: Maybe<Scalars['String']>;
    promotionSettings?: Maybe<SandboxPromotionSettings>;
    shouldShowChatButton: Scalars['Boolean'];
    type: SandboxType;
    url: Scalars['String'];
    widgetSettings?: Maybe<SandboxWidgetSettings>;
};
export type SandboxRenderSettingsInput = {
    organizationAlias: Scalars['ID'];
    sandboxId: Scalars['ID'];
};
export declare enum SandboxType {
    Chat = "CHAT",
    ChatWithPromo = "CHAT_WITH_PROMO",
    Demo = "DEMO",
    SearchAndChat = "SEARCH_AND_CHAT"
}
export type SandboxWidgetSettings = IntegrationRuntimeSettings & {
    __typename?: 'SandboxWidgetSettings';
    apiKey: Scalars['String'];
    chatSubjectName?: Maybe<Scalars['String']>;
    getHelpCallToActions?: Maybe<Array<GetHelpCallToAction>>;
    integrationId: Scalars['ID'];
    organizationDisplayName: Scalars['String'];
    organizationId: Scalars['ID'];
    organizationPortalDisplayPreferences: PortalDisplayPreferences;
    quickQuestions?: Maybe<Array<Scalars['String']>>;
};
export type SavedChat = {
    __typename?: 'SavedChat';
    chatSessionId: Scalars['ID'];
    createdAt: Scalars['DateTime'];
    lastMessageAt: Scalars['DateTime'];
    title: Scalars['String'];
    userId?: Maybe<Scalars['ID']>;
};
export type SavedChatsFiltersInput = {
    tags?: InputMaybe<Array<Scalars['String']>>;
};
export type SearchAndChatFilters = {
    __typename?: 'SearchAndChatFilters';
    attributes?: Maybe<Scalars['JSONObject']>;
    product?: Maybe<Scalars['String']>;
    productVersion?: Maybe<Scalars['String']>;
    sourceIds?: Maybe<Array<Scalars['String']>>;
};
export type SearchAndChatFiltersInput = {
    attributes?: InputMaybe<Scalars['JSONObject']>;
    product?: InputMaybe<Scalars['String']>;
    productVersion?: InputMaybe<Scalars['String']>;
    sourceIds?: InputMaybe<Array<Scalars['String']>>;
};
export type SearchFiltersInput = {
    attributes?: InputMaybe<Scalars['JSON']>;
    limit?: InputMaybe<Scalars['Int']>;
    product?: InputMaybe<Scalars['String']>;
    productVersion?: InputMaybe<Scalars['String']>;
    sourceIds?: InputMaybe<Scalars['String']>;
    sources?: InputMaybe<Array<RecordType>>;
};
export type SearchHit = {
    hitOnRoot: Scalars['Boolean'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    rootRecord: SearchRootRecord;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type SearchInput = {
    filters?: InputMaybe<SearchFiltersInput>;
    integrationId?: InputMaybe<Scalars['ID']>;
    organizationId?: InputMaybe<Scalars['ID']>;
    searchMode?: InputMaybe<SearchMode>;
    searchQuery: Scalars['String'];
};
export declare enum SearchMode {
    Auto = "AUTO",
    Intelligent = "INTELLIGENT",
    Keyword = "KEYWORD"
}
export type SearchProperties = {
    __typename?: 'SearchProperties';
    filters?: Maybe<SearchAndChatFilters>;
    query: Scalars['String'];
    searchMode: SearchMode;
};
export type SearchPropertiesInput = {
    filters?: InputMaybe<SearchAndChatFiltersInput>;
    query?: InputMaybe<Scalars['String']>;
    searchMode: SearchMode;
};
export type SearchResult = {
    __typename?: 'SearchResult';
    searchHits: Array<SearchHit>;
    searchQuery: Scalars['String'];
};
export type SearchRootRecord = {
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type SelfServeDemo = {
    __typename?: 'SelfServeDemo';
    createdAt: Scalars['DateTime'];
    email: Scalars['String'];
    error?: Maybe<SelfServeDemoError>;
    errorMessage?: Maybe<Scalars['String']>;
    isEmailVerified?: Maybe<Scalars['Boolean']>;
    productUrl: Scalars['String'];
    status?: Maybe<SelfServeDemoStatus>;
    token: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare enum SelfServeDemoError {
    OrganizationAlreadyExists = "ORGANIZATION_ALREADY_EXISTS",
    OrganizationCreationFailed = "ORGANIZATION_CREATION_FAILED",
    Other = "OTHER",
    QueueDemoCreationFailed = "QUEUE_DEMO_CREATION_FAILED",
    QueueDemoGenerationFailed = "QUEUE_DEMO_GENERATION_FAILED",
    UserAlreadyRequestedDemo = "USER_ALREADY_REQUESTED_DEMO"
}
export type SelfServeDemoGetInput = {
    email: Scalars['String'];
    token: Scalars['String'];
};
export declare enum SelfServeDemoStatus {
    Converted = "CONVERTED",
    DemoCreationInitiated = "DEMO_CREATION_INITIATED",
    DemoReadyEmailSent = "DEMO_READY_EMAIL_SENT",
    EmailVerificationPending = "EMAIL_VERIFICATION_PENDING"
}
export type SetDefaultProjectForOrganizationInput = {
    projectId?: InputMaybe<Scalars['ID']>;
};
export type SetDefaultProjectForOrganizationResult = {
    __typename?: 'SetDefaultProjectForOrganizationResult';
    organization: Organization;
    project?: Maybe<Project>;
    success: Scalars['Boolean'];
};
export type SetDefaultProjectForUserInput = {
    projectId?: InputMaybe<Scalars['ID']>;
};
export type SetDefaultProjectForUserResult = {
    __typename?: 'SetDefaultProjectForUserResult';
    project?: Maybe<Project>;
    success: Scalars['Boolean'];
    user: User;
};
export type SlackBotIntegrationSettingsInput = {
    channelId?: InputMaybe<Scalars['ID']>;
    workspaceId: Scalars['ID'];
};
export type SlackClient = {
    __typename?: 'SlackClient';
    channelId: Scalars['String'];
};
export type SlackClientInput = {
    channelId: Scalars['ID'];
};
export type SlackCreateIntegrationConfiguration = {
    autoReplyChannels: Array<Scalars['String']>;
    continueInWebChatUrl?: InputMaybe<Scalars['String']>;
    enabledForChannels?: InputMaybe<Array<Scalars['String']>>;
    isDefaultForWorkspace?: InputMaybe<Scalars['Boolean']>;
    negativeFeedbackCallback?: InputMaybe<SlackIntegrationNegativeFeedbackCallbackInput>;
    workspaceId: Scalars['String'];
};
export type SlackCreateSourceConfiguration = {
    channelIds?: InputMaybe<Array<Scalars['String']>>;
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    isDefaultForWorkspace?: InputMaybe<Scalars['Boolean']>;
    workspaceId: Scalars['String'];
};
export type SlackIntegrationConfiguration = {
    __typename?: 'SlackIntegrationConfiguration';
    autoReplyChannels: Array<Scalars['String']>;
    continueInWebChatUrl?: Maybe<Scalars['String']>;
    enabledForChannels?: Maybe<Array<Scalars['String']>>;
    isDefaultForWorkspace?: Maybe<Scalars['Boolean']>;
    negativeFeedbackCallback?: Maybe<SlackIntegrationNegativeFeedbackCallback>;
    type: IntegrationType;
    workspaceId: Scalars['String'];
};
export type SlackIntegrationNegativeFeedbackCallback = SlackTagCallback;
export type SlackIntegrationNegativeFeedbackCallbackInput = {
    tag?: InputMaybe<SlackTagCallbackInput>;
};
export type SlackSource = Source & {
    __typename?: 'SlackSource';
    channelIds: Array<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isDefaultForWorkspace: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    workspaceId: Scalars['String'];
};
export type SlackTagCallback = {
    __typename?: 'SlackTagCallback';
    botIds?: Maybe<Array<Scalars['String']>>;
    groupIds?: Maybe<Array<Scalars['String']>>;
    userIds?: Maybe<Array<Scalars['String']>>;
};
export type SlackTagCallbackInput = {
    botIds?: InputMaybe<Array<Scalars['String']>>;
    groupIds?: InputMaybe<Array<Scalars['String']>>;
    remove?: InputMaybe<Scalars['Boolean']>;
    userIds?: InputMaybe<Array<Scalars['String']>>;
};
export type SlackUpdateIntegrationConfiguration = {
    autoReplyChannels: Array<Scalars['String']>;
    continueInWebChatUrl?: InputMaybe<Scalars['String']>;
    enabledForChannels?: InputMaybe<Array<Scalars['String']>>;
    isDefaultForWorkspace?: InputMaybe<Scalars['Boolean']>;
    negativeFeedbackCallback?: InputMaybe<SlackIntegrationNegativeFeedbackCallbackInput>;
    workspaceId?: InputMaybe<Scalars['String']>;
};
export type SlackUpdateSourceConfiguration = {
    channelIds?: InputMaybe<Array<Scalars['String']>>;
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    isDefaultForWorkspace?: InputMaybe<Scalars['Boolean']>;
    workspaceId?: InputMaybe<Scalars['String']>;
};
export type Source = {
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory?: Maybe<Array<SourceSyncJob>>;
};
export type SourceChatMessage = {
    __typename?: 'SourceChatMessage';
    chatSessionId: Scalars['ID'];
    userMessage: UserMessage;
};
export type SourceIndex = {
    __typename?: 'SourceIndex';
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    indexingEngine: IndexingEngine;
    isEnabled: Scalars['Boolean'];
    jobHistory: Array<IndexingJob>;
    lastJob?: Maybe<IndexingJob>;
    lastSuccessfulJob?: Maybe<IndexingJob>;
};
export type SourceSyncJob = {
    __typename?: 'SourceSyncJob';
    endTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
    indexingJobs: Array<IndexingJob>;
    startTime: Scalars['DateTime'];
    status: SourceSyncJobStatus;
    statusMessage: Scalars['String'];
    type: SourceSyncJobType;
};
export declare enum SourceSyncJobStatus {
    Cancelled = "CANCELLED",
    Failed = "FAILED",
    Processing = "PROCESSING",
    Queued = "QUEUED",
    Successful = "SUCCESSFUL"
}
export declare enum SourceSyncJobType {
    Full = "FULL",
    Incremental = "INCREMENTAL"
}
export type StackOverflowAnswer = {
    __typename?: 'StackOverflowAnswer';
    content: Scalars['String'];
    contentHtml: Scalars['String'];
    id: Scalars['ID'];
    score: Scalars['Int'];
    url: Scalars['String'];
};
export type StackOverflowCreateSourceConfiguration = {
    displayName: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    tags: Array<Scalars['String']>;
};
export type StackOverflowHit = SearchHit & {
    __typename?: 'StackOverflowHit';
    hitOnRoot: Scalars['Boolean'];
    id: Scalars['ID'];
    preview?: Maybe<Scalars['String']>;
    rootRecord: StackOverflowRecord;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export type StackOverflowRecord = SearchRootRecord & {
    __typename?: 'StackOverflowRecord';
    body?: Maybe<Scalars['String']>;
    bodyHtml?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    markedAsCorrectAnswer?: Maybe<StackOverflowAnswer>;
    preview?: Maybe<Scalars['String']>;
    score: Scalars['Int'];
    tags: Array<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    topVotedAnswer?: Maybe<StackOverflowAnswer>;
    url?: Maybe<Scalars['String']>;
};
export type StackOverflowSource = Source & {
    __typename?: 'StackOverflowSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
    tags: Array<Scalars['String']>;
};
export type StackOverflowUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
    tags?: InputMaybe<Array<Scalars['String']>>;
};
export type SubmitRevisedAnswerInput = {
    answer: UserAnswerInput;
    chatMode: ChatMode;
    chatSessionId: Scalars['String'];
    createdAt?: InputMaybe<Scalars['DateTime']>;
    originalAnswer: BotMessageInput;
    question: UserMessageInput;
};
export type SubmitRevisedAnswerResult = {
    __typename?: 'SubmitRevisedAnswerResult';
    alternativeQuestions?: Maybe<Array<Scalars['String']>>;
    revisedAnswer: RevisedAnswer;
    success: Scalars['Boolean'];
};
export type Subscription = {
    __typename?: 'Subscription';
    continueChatResult: ChatResult;
    newSessionChatResult: ChatResult;
};
export type SubscriptionContinueChatResultArgs = {
    input: ContinueChatResultInput;
};
export type SubscriptionNewSessionChatResultArgs = {
    input: NewSessionChatResultInput;
};
export type ThirdPartyDocumentationGap = DocumentationGap & {
    __typename?: 'ThirdPartyDocumentationGap';
    description: Scalars['String'];
    label: Scalars['String'];
    sourceChatMessages?: Maybe<Array<SourceChatMessage>>;
};
export type ThirdPartyDocumentationGapInput = {
    description: Scalars['String'];
    label: Scalars['String'];
    sourceMessageIds?: InputMaybe<Array<Scalars['String']>>;
};
export type ThirdPartyFeatureGap = DocumentationGap & {
    __typename?: 'ThirdPartyFeatureGap';
    description: Scalars['String'];
    label: Scalars['String'];
    sourceChatMessages?: Maybe<Array<SourceChatMessage>>;
};
export type UpdateBuiltInIconInput = {
    name: Scalars['String'];
};
export type UpdateConfigurableIconInput = {
    builtIn?: InputMaybe<UpdateBuiltInIconInput>;
    custom?: InputMaybe<UpdateCustomIconInput>;
};
export type UpdateCustomIconInput = {
    url: Scalars['String'];
};
export type UpdateCustomQuestionAnswerInput = {
    alternativeQuestions?: InputMaybe<Array<Scalars['String']>>;
    answer?: InputMaybe<UserAnswerInput>;
    customQuestionAnswerId: Scalars['ID'];
    isEnabled?: InputMaybe<Scalars['Boolean']>;
    question?: InputMaybe<UserQuestionInput>;
};
export type UpdateCustomQuestionAnswerResult = {
    __typename?: 'UpdateCustomQuestionAnswerResult';
    customQuestionAnswer: CustomQuestionAnswer;
    success: Scalars['Boolean'];
};
export type UpdateEnabledIndexesForSourceInput = {
    indexes: Array<UpdateIsEnabledForIndex>;
    sourceId: Scalars['ID'];
};
export type UpdateEnabledIndexesForSourceResult = {
    __typename?: 'UpdateEnabledIndexesForSourceResult';
    indexes: Array<Maybe<SourceIndex>>;
    source: Source;
    success: Scalars['Boolean'];
};
export type UpdateGetHelpCallToActionInput = {
    icon?: InputMaybe<UpdateConfigurableIconInput>;
    id: Scalars['ID'];
    label?: InputMaybe<Scalars['String']>;
    url?: InputMaybe<Scalars['String']>;
};
export type UpdateGetHelpCallToActionResult = {
    __typename?: 'UpdateGetHelpCallToActionResult';
    getHelpCallToAction: GetHelpCallToAction;
    success: Scalars['Boolean'];
};
export type UpdateIndexingJobInput = {
    endTime?: InputMaybe<Scalars['DateTime']>;
    indexingJobId: Scalars['ID'];
    status?: InputMaybe<IndexingJobStatus>;
    statusMessage?: InputMaybe<Scalars['String']>;
};
export type UpdateIndexingJobResult = {
    __typename?: 'UpdateIndexingJobResult';
    job: IndexingJob;
    success: Scalars['Boolean'];
};
export type UpdateIntegrationConfiguration = {
    discordBot?: InputMaybe<DiscordUpdateIntegrationConfiguration>;
    mintlify?: InputMaybe<MintlifyUpdateIntegrationConfiguration>;
    slackBot?: InputMaybe<SlackUpdateIntegrationConfiguration>;
    web?: InputMaybe<WebUpdateIntegrationConfiguration>;
};
export type UpdateIntegrationInput = {
    configuration?: InputMaybe<UpdateIntegrationConfiguration>;
    displayName?: InputMaybe<Scalars['String']>;
    integrationId: Scalars['ID'];
    isDeactivated?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
    userTokenSettings?: InputMaybe<UpdateUserTokenSettingsInput>;
};
export type UpdateIntegrationResult = {
    __typename?: 'UpdateIntegrationResult';
    integration: Integration;
    success: Scalars['Boolean'];
};
export type UpdateIsEnabledForIndex = {
    indexId: Scalars['ID'];
    isEnabled: Scalars['Boolean'];
};
export type UpdateOrganizationInput = {
    displayName?: InputMaybe<Scalars['String']>;
    portalDisplayPreferences?: InputMaybe<PortalDisplayPreferencesInput>;
};
export type UpdateOrganizationResult = {
    __typename?: 'UpdateOrganizationResult';
    organization: Organization;
    success: Scalars['Boolean'];
};
export type UpdateProjectChatSubjectSubtopic = {
    description: Scalars['String'];
    id?: InputMaybe<Scalars['ID']>;
    name: Scalars['String'];
    remove?: InputMaybe<Scalars['Boolean']>;
};
export type UpdateProjectHelpCallToActionInput = {
    icon: CreateConfigurableIconInput;
    id?: InputMaybe<Scalars['ID']>;
    label: Scalars['String'];
    remove?: InputMaybe<Scalars['Boolean']>;
    url: Scalars['String'];
};
export type UpdateProjectInput = {
    chatSubjectName?: InputMaybe<Scalars['String']>;
    description?: InputMaybe<Scalars['String']>;
    displayName?: InputMaybe<Scalars['String']>;
    endUserDescription?: InputMaybe<Scalars['String']>;
    getHelpCallToActions?: InputMaybe<Array<UpdateProjectHelpCallToActionInput>>;
    guidanceRules?: InputMaybe<Array<GuidanceRuleInput>>;
    oneLineDescription?: InputMaybe<Scalars['String']>;
    programmingLanguages?: InputMaybe<Array<Scalars['String']>>;
    projectId: Scalars['ID'];
    quickQuestions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
    tone?: InputMaybe<Scalars['String']>;
};
export type UpdateProjectResult = {
    __typename?: 'UpdateProjectResult';
    project: Project;
    success: Scalars['Boolean'];
};
export type UpdateRevisedAnswerInput = {
    alternativeQuestions?: InputMaybe<Array<Scalars['String']>>;
    answer: UserAnswerInput;
    revisedAnswerId: Scalars['ID'];
};
export type UpdateRevisedAnswerResult = {
    __typename?: 'UpdateRevisedAnswerResult';
    revisedAnswer: RevisedAnswer;
    success: Scalars['Boolean'];
};
export type UpdateSavedChatInput = {
    chatSessionId: Scalars['ID'];
    lastMessageAt?: InputMaybe<Scalars['DateTime']>;
    title?: InputMaybe<Scalars['String']>;
};
export type UpdateSavedChatResult = {
    __typename?: 'UpdateSavedChatResult';
    savedChat: SavedChat;
    success: Scalars['Boolean'];
};
export type UpdateSelfServeDemoInput = {
    email: Scalars['String'];
    error?: InputMaybe<SelfServeDemoError>;
    errorMessage?: InputMaybe<Scalars['String']>;
    isEmailVerified?: InputMaybe<Scalars['Boolean']>;
    status?: InputMaybe<SelfServeDemoStatus>;
    token: Scalars['String'];
};
export type UpdateSelfServiceDemoResult = {
    __typename?: 'UpdateSelfServiceDemoResult';
    demo: SelfServeDemo;
};
export type UpdateSourceConfiguration = {
    customIndexes?: InputMaybe<CustomIndexesUpdateSourceConfiguration>;
    customQuestionAnswers?: InputMaybe<CustomQuestionAnswersUpdateSourceConfiguration>;
    discord?: InputMaybe<DiscordUpdateSourceConfiguration>;
    discourse?: InputMaybe<DiscourseUpdateSourceConfiguration>;
    docusaurus?: InputMaybe<DocusaurusCreateSourceConfiguration>;
    generalWeb?: InputMaybe<GeneralWebUpdateSourceConfiguration>;
    gitbook?: InputMaybe<GitbookCreateSourceConfiguration>;
    github?: InputMaybe<GitHubUpdateSourceConfiguration>;
    readme?: InputMaybe<ReadmeCreateSourceConfiguration>;
    redocly?: InputMaybe<RedoclyCreateSourceConfiguration>;
    revisedAnswers?: InputMaybe<RevisedAnswersUpdateSourceConfiguration>;
    slack?: InputMaybe<SlackUpdateSourceConfiguration>;
    stackoverflow?: InputMaybe<StackOverflowUpdateSourceConfiguration>;
    zendesk?: InputMaybe<ZendeskUpdateSourceConfiguration>;
};
export type UpdateSourceInput = {
    configuration: UpdateSourceConfiguration;
    sourceId: Scalars['ID'];
};
export type UpdateSourceResult = {
    __typename?: 'UpdateSourceResult';
    source: Source;
    success: Scalars['Boolean'];
};
export type UpdateUserTokenSettingsInput = {
    isRequiredForAccess?: InputMaybe<Scalars['Boolean']>;
    issuer?: InputMaybe<Scalars['String']>;
    verificationKey?: InputMaybe<Scalars['String']>;
};
export type UploadOrganizationIconInput = {
    file: Scalars['Upload'];
    isDark?: InputMaybe<Scalars['Boolean']>;
};
export type UploadOrganizationIconResult = {
    __typename?: 'UploadOrganizationIconResult';
    organization: Organization;
    success: Scalars['Boolean'];
    url: Scalars['String'];
};
export type UrlMatchPattern = {
    __typename?: 'UrlMatchPattern';
    matchType: UrlMatchType;
    pattern: Scalars['String'];
};
export type UrlMatchPatternInput = {
    matchType: UrlMatchType;
    pattern: Scalars['String'];
};
export declare enum UrlMatchType {
    Exact = "EXACT",
    Regex = "REGEX"
}
export type UrlMatchingPatternsInput = {
    excludePatterns?: InputMaybe<Array<UrlMatchPatternInput>>;
    includePatterns?: InputMaybe<Array<UrlMatchPatternInput>>;
};
export type UrlMatchingPatternsResult = {
    __typename?: 'UrlMatchingPatternsResult';
    excludePatterns?: Maybe<Array<UrlMatchPattern>>;
    includePatterns?: Maybe<Array<UrlMatchPattern>>;
};
export type User = {
    __typename?: 'User';
    createdAt: Scalars['DateTime'];
    defaultProject?: Maybe<Project>;
    email?: Maybe<Scalars['String']>;
    emailVerified?: Maybe<Scalars['Boolean']>;
    familyName?: Maybe<Scalars['String']>;
    givenName?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    nickname?: Maybe<Scalars['String']>;
    organization?: Maybe<Organization>;
    permissions: Array<Scalars['String']>;
    phoneNumber?: Maybe<Scalars['String']>;
    phoneNumberVerified?: Maybe<Scalars['Boolean']>;
    savedChats: Array<SavedChat>;
};
export type UserAnswer = ChatMessage & {
    __typename?: 'UserAnswer';
    citations: Array<ChatCitation>;
    content: Scalars['String'];
    createdAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
};
export type UserAnswerInput = {
    citations?: InputMaybe<Array<ChatCitationInput>>;
    content: Scalars['String'];
};
export declare enum UserIdentificationType {
    Anonymous = "ANONYMOUS",
    Cookied = "COOKIED",
    IdProvided = "ID_PROVIDED",
    Token = "TOKEN"
}
export type UserInvitationStatus = {
    __typename?: 'UserInvitationStatus';
    auth0InvitationId: Scalars['String'];
    auth0OrganizationId: Scalars['String'];
    createdAt: Scalars['DateTime'];
    email: Scalars['String'];
    organizationAlias: Scalars['String'];
    organizationId: Scalars['String'];
    redeemedAt?: Maybe<Scalars['DateTime']>;
    roles: Array<Scalars['String']>;
    rolesIds: Array<Scalars['String']>;
    status: InvitationStatus;
};
export type UserMessage = ChatMessage & {
    __typename?: 'UserMessage';
    attributes?: Maybe<Scalars['JSON']>;
    content: Scalars['String'];
    context?: Maybe<Scalars['String']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    id: Scalars['ID'];
};
export type UserMessageInput = {
    content: Scalars['String'];
    id: Scalars['ID'];
};
export type UserQuestionInput = {
    content: Scalars['String'];
};
export type UserTokenSettings = {
    __typename?: 'UserTokenSettings';
    isRequiredForAccess: Scalars['Boolean'];
    issuer: Scalars['String'];
    verificationKey: Scalars['String'];
};
export declare enum UserType {
    External = "EXTERNAL",
    Internal = "INTERNAL"
}
export type WebCreateIntegrationConfiguration = {
    isUrlRefererValidationEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export type WebIntegrationConfiguration = {
    __typename?: 'WebIntegrationConfiguration';
    isUrlRefererValidationEnabled?: Maybe<Scalars['Boolean']>;
    type: IntegrationType;
    url?: Maybe<Scalars['String']>;
};
export type WebUpdateIntegrationConfiguration = {
    isUrlRefererValidationEnabled?: InputMaybe<Scalars['Boolean']>;
    url?: InputMaybe<Scalars['String']>;
};
export declare enum WebWidgetInteractionType {
    ChatButton = "CHAT_BUTTON",
    CustomTrigger = "CUSTOM_TRIGGER",
    EmbeddedChat = "EMBEDDED_CHAT",
    SearchBar = "SEARCH_BAR"
}
export type ZendeskCreateSourceConfiguration = {
    displayName: Scalars['String'];
    helpCenterUrl: Scalars['String'];
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
};
export type ZendeskSource = Source & {
    __typename?: 'ZendeskSource';
    createdAt: Scalars['DateTime'];
    displayName: Scalars['String'];
    helpCenterUrl: Scalars['String'];
    id: Scalars['ID'];
    indexes: Array<SourceIndex>;
    isAutoRefreshEnabled: Scalars['Boolean'];
    isHidden: Scalars['Boolean'];
    isOwnedByOrganization: Scalars['Boolean'];
    isRestricted: Scalars['Boolean'];
    syncJobHistory: Array<SourceSyncJob>;
};
export type ZendeskUpdateSourceConfiguration = {
    displayName?: InputMaybe<Scalars['String']>;
    helpCenterUrl?: InputMaybe<Scalars['String']>;
    isAutoRefreshEnabled?: InputMaybe<Scalars['Boolean']>;
};
export type GetSearchRootRecordsQueryVariables = Exact<{
    ids: Array<Scalars['ID']> | Scalars['ID'];
}>;
export type GetSearchRootRecordsQuery = {
    __typename?: 'Query';
    getSearchRootRecords: Array<{
        __typename: 'DiscourseRecord';
        body?: string | null;
        categoryBreadcrumbs: Array<string>;
        createdAt: any;
        id: string;
        title?: string | null;
        url?: string | null;
        preview?: string | null;
    } | {
        __typename: 'DocumentationRecord';
        pathBreadcrumbs?: Array<string> | null;
        contentType: string;
        id: string;
        title?: string | null;
        url?: string | null;
        preview?: string | null;
    } | {
        __typename: 'GitHubIssueRecord';
        body?: string | null;
        state: GitHubIssueState;
        createdAt: any;
        id: string;
        title?: string | null;
        url?: string | null;
        preview?: string | null;
    } | {
        __typename: 'StackOverflowRecord';
        body?: string | null;
        tags: Array<string>;
        createdAt: any;
        id: string;
        title?: string | null;
        url?: string | null;
        preview?: string | null;
    }>;
};
export type OnNewSessionChatResultSubscriptionVariables = Exact<{
    messageInput: Scalars['String'];
    messageContext?: InputMaybe<Scalars['String']>;
    organizationId: Scalars['ID'];
    integrationId?: InputMaybe<Scalars['ID']>;
    chatMode?: InputMaybe<ChatMode>;
    filters?: InputMaybe<ChatFiltersInput>;
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    tags?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
    workflowId?: InputMaybe<Scalars['String']>;
    context?: InputMaybe<Scalars['String']>;
    guidance?: InputMaybe<Scalars['String']>;
    includeAIAnnotations: Scalars['Boolean'];
    environment?: InputMaybe<Scalars['String']>;
}>;
export type OnNewSessionChatResultSubscription = {
    __typename?: 'Subscription';
    newSessionChatResult: {
        __typename?: 'ChatResult';
        isEnd: boolean;
        sessionId: string;
        message: {
            __typename: 'BotMessage';
            id: string;
            content: string;
            citations: Array<{
                __typename?: 'ChatCitation';
                citationNumber: number;
                title?: string | null;
                url: string;
                rootRecordId?: string | null;
                rootRecordType?: RecordType | null;
            }>;
        };
        aiAnnotations?: {
            __typename?: 'AiAnnotations';
            shouldEscalateToSupport?: {
                __typename?: 'EscalationMessage';
                strict?: boolean | null;
                standard?: boolean | null;
            } | null;
        } | null;
    };
};
export type OnContinueChatResultSubscriptionVariables = Exact<{
    messageInput: Scalars['String'];
    sessionId: Scalars['ID'];
    messageContext?: InputMaybe<Scalars['String']>;
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    includeAIAnnotations: Scalars['Boolean'];
}>;
export type OnContinueChatResultSubscription = {
    __typename?: 'Subscription';
    continueChatResult: {
        __typename?: 'ChatResult';
        isEnd: boolean;
        sessionId: string;
        message: {
            __typename: 'BotMessage';
            id: string;
            content: string;
            citations: Array<{
                __typename?: 'ChatCitation';
                citationNumber: number;
                title?: string | null;
                url: string;
                rootRecordId?: string | null;
                rootRecordType?: RecordType | null;
            }>;
        };
        aiAnnotations?: {
            __typename?: 'AiAnnotations';
            shouldEscalateToSupport?: {
                __typename?: 'EscalationMessage';
                strict?: boolean | null;
                standard?: boolean | null;
            } | null;
        } | null;
    };
};
export type LogUsageEventMutationVariables = Exact<{
    input: LogUsageEventInput;
}>;
export type LogUsageEventMutation = {
    __typename?: 'Mutation';
    logUsageEvent: {
        __typename?: 'LogUsageEventResult';
        success: boolean;
    };
};
export type GetSearchResultsQueryVariables = Exact<{
    searchInput: SearchInput;
}>;
export type GetSearchResultsQuery = {
    __typename?: 'Query';
    search: {
        __typename?: 'SearchResult';
        searchQuery: string;
        searchHits: Array<{
            __typename?: 'DiscourseHit';
            id: string;
            hitOnRoot: boolean;
            url?: string | null;
            title?: string | null;
            preview?: string | null;
            rootRecord: {
                __typename: 'DiscourseRecord';
                body?: string | null;
                bodyHtml?: string | null;
                categoryBreadcrumbs: Array<string>;
                createdAt: any;
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
            };
        } | {
            __typename?: 'DocumentationHit';
            id: string;
            hitOnRoot: boolean;
            url?: string | null;
            title?: string | null;
            preview?: string | null;
            rootRecord: {
                __typename: 'DiscourseRecord';
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
            } | {
                __typename: 'DocumentationRecord';
                pathBreadcrumbs?: Array<string> | null;
                contentType: string;
                firstContent: string;
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
                topLevelHeadings: Array<{
                    __typename?: 'DocumentationContentLevel';
                    anchor?: string | null;
                    url?: string | null;
                    htmlTag: string;
                    content: string;
                }>;
                firstContentPath: Array<{
                    __typename?: 'DocumentationContentLevel';
                    anchor?: string | null;
                    url?: string | null;
                    htmlTag: string;
                    content: string;
                }>;
            } | {
                __typename: 'GitHubIssueRecord';
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
            } | {
                __typename: 'StackOverflowRecord';
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
            };
            pathHeadings: Array<{
                __typename?: 'DocumentationContentLevel';
                anchor?: string | null;
                url?: string | null;
                htmlTag: string;
                content: string;
            }>;
            content: {
                __typename?: 'DocumentationContentLevel';
                anchor?: string | null;
                url?: string | null;
                htmlTag: string;
                content: string;
                contentHtml: string;
            };
        } | {
            __typename?: 'GitHubIssueHit';
            id: string;
            hitOnRoot: boolean;
            url?: string | null;
            title?: string | null;
            preview?: string | null;
            rootRecord: {
                __typename: 'GitHubIssueRecord';
                body?: string | null;
                state: GitHubIssueState;
                createdAt: any;
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
                reactions: Array<{
                    __typename?: 'GitHubReaction';
                    reactionType: ReactionType;
                    count: number;
                }>;
                commentsWithMostPositiveReactions: Array<{
                    __typename?: 'GitHubIssueComment';
                    id: string;
                    url: string;
                    body?: string | null;
                    commentDate: any;
                    reactions: Array<{
                        __typename?: 'GitHubReaction';
                        reactionType: ReactionType;
                        count: number;
                    }>;
                }>;
            };
        } | {
            __typename?: 'StackOverflowHit';
            id: string;
            hitOnRoot: boolean;
            url?: string | null;
            title?: string | null;
            preview?: string | null;
            rootRecord: {
                __typename: 'StackOverflowRecord';
                body?: string | null;
                tags: Array<string>;
                createdAt: any;
                score: number;
                id: string;
                title?: string | null;
                url?: string | null;
                preview?: string | null;
                topVotedAnswer?: {
                    __typename?: 'StackOverflowAnswer';
                    url: string;
                    score: number;
                    content: string;
                } | null;
                markedAsCorrectAnswer?: {
                    __typename?: 'StackOverflowAnswer';
                    url: string;
                    score: number;
                    content: string;
                } | null;
            };
        }>;
    };
};
export type GetChatSessionQueryVariables = Exact<{
    id: Scalars['ID'];
}>;
export type GetChatSessionQuery = {
    __typename?: 'Query';
    getChatSession: {
        __typename?: 'ChatSession';
        id: string;
        organizationId: string;
        chatMode: ChatMode;
        workflowId?: string | null;
        messages: Array<{
            __typename?: 'BotMessage';
            id: string;
            content: string;
            citations: Array<{
                __typename?: 'ChatCitation';
                citationNumber: number;
                title?: string | null;
                url: string;
                rootRecordId?: string | null;
                rootRecordType?: RecordType | null;
            }>;
        } | {
            __typename?: 'UserAnswer';
            id: string;
            content: string;
        } | {
            __typename?: 'UserMessage';
            context?: string | null;
            attributes?: any | null;
            id: string;
            content: string;
        }>;
        filters?: {
            __typename?: 'ChatFilters';
            product?: string | null;
            productVersion?: string | null;
            attributes?: any | null;
        } | null;
    };
};
export type CopyChatSessionMutationVariables = Exact<{
    sessionId: Scalars['ID'];
    isSharedSession: Scalars['Boolean'];
}>;
export type CopyChatSessionMutation = {
    __typename?: 'Mutation';
    copyChatSession: string;
};
export declare const GetSearchRootRecordsDocument: DocumentNode<GetSearchRootRecordsQuery, Exact<{
    ids: Array<Scalars['ID']> | Scalars['ID'];
}>>;
export declare const OnNewSessionChatResultDocument: DocumentNode<OnNewSessionChatResultSubscription, Exact<{
    messageInput: Scalars['String'];
    messageContext?: InputMaybe<string> | undefined;
    organizationId: Scalars['ID'];
    integrationId?: InputMaybe<string> | undefined;
    chatMode?: InputMaybe<ChatMode> | undefined;
    filters?: InputMaybe<ChatFiltersInput> | undefined;
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    tags?: InputMaybe<string | string[]> | undefined;
    workflowId?: InputMaybe<string> | undefined;
    context?: InputMaybe<string> | undefined;
    guidance?: InputMaybe<string> | undefined;
    includeAIAnnotations: Scalars['Boolean'];
    environment?: InputMaybe<string> | undefined;
}>>;
export declare const OnContinueChatResultDocument: DocumentNode<OnContinueChatResultSubscription, Exact<{
    messageInput: Scalars['String'];
    sessionId: Scalars['ID'];
    messageContext?: InputMaybe<string> | undefined;
    messageAttributes?: InputMaybe<Scalars['JSON']>;
    includeAIAnnotations: Scalars['Boolean'];
}>>;
export declare const LogUsageEventDocument: DocumentNode<LogUsageEventMutation, Exact<{
    input: LogUsageEventInput;
}>>;
export declare const GetSearchResultsDocument: DocumentNode<GetSearchResultsQuery, Exact<{
    searchInput: SearchInput;
}>>;
export declare const GetChatSessionDocument: DocumentNode<GetChatSessionQuery, Exact<{
    id: Scalars['ID'];
}>>;
export declare const CopyChatSessionDocument: DocumentNode<CopyChatSessionMutation, Exact<{
    sessionId: Scalars['ID'];
    isSharedSession: Scalars['Boolean'];
}>>;
