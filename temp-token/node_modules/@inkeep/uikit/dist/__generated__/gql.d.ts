import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
declare const documents: {
    "\n  query GetSearchRootRecords($ids: [ID!]!) {\n    getSearchRootRecords(ids: $ids) {\n      __typename\n      id\n      title\n      url\n      preview\n      ... on DocumentationRecord {\n        pathBreadcrumbs\n        contentType\n      }\n      ... on GitHubIssueRecord {\n        body\n        state\n        createdAt\n      }\n      ... on DiscourseRecord {\n        body\n        categoryBreadcrumbs\n        createdAt\n      }\n      ... on StackOverflowRecord {\n        body\n        tags\n        createdAt\n      }\n    }\n  }\n": DocumentNode<types.GetSearchRootRecordsQuery, types.Exact<{
        ids: string | string[];
    }>>;
    "\n  subscription OnNewSessionChatResult(\n    $messageInput: String!\n    $messageContext: String\n    $organizationId: ID!\n    $integrationId: ID\n    $chatMode: ChatMode\n    $filters: ChatFiltersInput\n    $messageAttributes: JSON\n    $tags: [String!]\n    $workflowId: String\n    $context: String\n    $guidance: String\n    $includeAIAnnotations: Boolean!\n    $environment: String\n  ) {\n    newSessionChatResult(\n      input: {\n        messageInput: $messageInput\n        messageContext: $messageContext\n        organizationId: $organizationId\n        integrationId: $integrationId\n        chatMode: $chatMode\n        filters: $filters\n        messageAttributes: $messageAttributes\n        tags: $tags\n        workflowId: $workflowId\n        context: $context\n        guidance: $guidance\n        environment: $environment\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n": DocumentNode<types.OnNewSessionChatResultSubscription, types.Exact<{
        messageInput: string;
        messageContext?: types.InputMaybe<string> | undefined;
        organizationId: string;
        integrationId?: types.InputMaybe<string> | undefined;
        chatMode?: types.InputMaybe<types.ChatMode> | undefined;
        filters?: types.InputMaybe<types.ChatFiltersInput> | undefined;
        messageAttributes?: any;
        tags?: types.InputMaybe<string | string[]> | undefined;
        workflowId?: types.InputMaybe<string> | undefined;
        context?: types.InputMaybe<string> | undefined;
        guidance?: types.InputMaybe<string> | undefined;
        includeAIAnnotations: boolean;
        environment?: types.InputMaybe<string> | undefined;
    }>>;
    "\n  subscription OnContinueChatResult(\n    $messageInput: String!\n    $sessionId: ID!\n    $messageContext: String\n    $messageAttributes: JSON\n    $includeAIAnnotations: Boolean!\n  ) {\n    continueChatResult(\n      input: {\n        messageInput: $messageInput\n        sessionId: $sessionId\n        messageContext: $messageContext\n        messageAttributes: $messageAttributes\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n": DocumentNode<types.OnContinueChatResultSubscription, types.Exact<{
        messageInput: string;
        sessionId: string;
        messageContext?: types.InputMaybe<string> | undefined;
        messageAttributes?: any;
        includeAIAnnotations: boolean;
    }>>;
    "\n  mutation LogUsageEvent($input: LogUsageEventInput!) {\n    logUsageEvent(input: $input) {\n      success\n    }\n  }\n": DocumentNode<types.LogUsageEventMutation, types.Exact<{
        input: types.LogUsageEventInput;
    }>>;
    "\n  query GetSearchResults($searchInput: SearchInput!) {\n    search(searchInput: $searchInput) {\n      searchHits {\n        id\n        hitOnRoot\n        url\n        title\n        preview\n\n        ... on DocumentationHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DocumentationRecord {\n              pathBreadcrumbs\n              contentType\n              topLevelHeadings {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContentPath {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContent\n            }\n          }\n          pathHeadings {\n            anchor\n            url\n            htmlTag\n            content\n          }\n          content {\n            anchor\n            url\n            htmlTag\n            content\n            contentHtml\n          }\n        }\n\n        ... on StackOverflowHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on StackOverflowRecord {\n              body\n              tags\n              createdAt\n              score\n              topVotedAnswer {\n                url\n                score\n                content\n              }\n              markedAsCorrectAnswer {\n                url\n                score\n                content\n              }\n            }\n          }\n        }\n        ... on GitHubIssueHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on GitHubIssueRecord {\n              body\n              state\n              createdAt\n              reactions {\n                reactionType\n                count\n              }\n              commentsWithMostPositiveReactions {\n                id\n                url\n                body\n                commentDate\n                reactions {\n                  reactionType\n                  count\n                }\n              }\n            }\n          }\n        }\n\n        ... on DiscourseHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DiscourseRecord {\n              body\n              bodyHtml\n              categoryBreadcrumbs\n              createdAt\n            }\n          }\n        }\n      }\n      searchQuery\n    }\n  }\n": DocumentNode<types.GetSearchResultsQuery, types.Exact<{
        searchInput: types.SearchInput;
    }>>;
    "\n  query GetChatSession($id: ID!) {\n    getChatSession(id: $id) {\n      id\n      organizationId\n      chatMode\n      workflowId\n      messages {\n        id\n        content\n        ... on UserMessage {\n          context\n          attributes\n        }\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      filters {\n        product\n        productVersion\n        attributes\n      }\n    }\n  }\n": DocumentNode<types.GetChatSessionQuery, types.Exact<{
        id: string;
    }>>;
    "\n  mutation CopyChatSession($sessionId: ID!, $isSharedSession: Boolean!) {\n    copyChatSession(sessionId: $sessionId, isSharedSession: $isSharedSession)\n  }\n": DocumentNode<types.CopyChatSessionMutation, types.Exact<{
        sessionId: string;
        isSharedSession: boolean;
    }>>;
};
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export declare function gql(source: string): unknown;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  query GetSearchRootRecords($ids: [ID!]!) {\n    getSearchRootRecords(ids: $ids) {\n      __typename\n      id\n      title\n      url\n      preview\n      ... on DocumentationRecord {\n        pathBreadcrumbs\n        contentType\n      }\n      ... on GitHubIssueRecord {\n        body\n        state\n        createdAt\n      }\n      ... on DiscourseRecord {\n        body\n        categoryBreadcrumbs\n        createdAt\n      }\n      ... on StackOverflowRecord {\n        body\n        tags\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSearchRootRecords($ids: [ID!]!) {\n    getSearchRootRecords(ids: $ids) {\n      __typename\n      id\n      title\n      url\n      preview\n      ... on DocumentationRecord {\n        pathBreadcrumbs\n        contentType\n      }\n      ... on GitHubIssueRecord {\n        body\n        state\n        createdAt\n      }\n      ... on DiscourseRecord {\n        body\n        categoryBreadcrumbs\n        createdAt\n      }\n      ... on StackOverflowRecord {\n        body\n        tags\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  subscription OnNewSessionChatResult(\n    $messageInput: String!\n    $messageContext: String\n    $organizationId: ID!\n    $integrationId: ID\n    $chatMode: ChatMode\n    $filters: ChatFiltersInput\n    $messageAttributes: JSON\n    $tags: [String!]\n    $workflowId: String\n    $context: String\n    $guidance: String\n    $includeAIAnnotations: Boolean!\n    $environment: String\n  ) {\n    newSessionChatResult(\n      input: {\n        messageInput: $messageInput\n        messageContext: $messageContext\n        organizationId: $organizationId\n        integrationId: $integrationId\n        chatMode: $chatMode\n        filters: $filters\n        messageAttributes: $messageAttributes\n        tags: $tags\n        workflowId: $workflowId\n        context: $context\n        guidance: $guidance\n        environment: $environment\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription OnNewSessionChatResult(\n    $messageInput: String!\n    $messageContext: String\n    $organizationId: ID!\n    $integrationId: ID\n    $chatMode: ChatMode\n    $filters: ChatFiltersInput\n    $messageAttributes: JSON\n    $tags: [String!]\n    $workflowId: String\n    $context: String\n    $guidance: String\n    $includeAIAnnotations: Boolean!\n    $environment: String\n  ) {\n    newSessionChatResult(\n      input: {\n        messageInput: $messageInput\n        messageContext: $messageContext\n        organizationId: $organizationId\n        integrationId: $integrationId\n        chatMode: $chatMode\n        filters: $filters\n        messageAttributes: $messageAttributes\n        tags: $tags\n        workflowId: $workflowId\n        context: $context\n        guidance: $guidance\n        environment: $environment\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  subscription OnContinueChatResult(\n    $messageInput: String!\n    $sessionId: ID!\n    $messageContext: String\n    $messageAttributes: JSON\n    $includeAIAnnotations: Boolean!\n  ) {\n    continueChatResult(\n      input: {\n        messageInput: $messageInput\n        sessionId: $sessionId\n        messageContext: $messageContext\n        messageAttributes: $messageAttributes\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription OnContinueChatResult(\n    $messageInput: String!\n    $sessionId: ID!\n    $messageContext: String\n    $messageAttributes: JSON\n    $includeAIAnnotations: Boolean!\n  ) {\n    continueChatResult(\n      input: {\n        messageInput: $messageInput\n        sessionId: $sessionId\n        messageContext: $messageContext\n        messageAttributes: $messageAttributes\n      }\n    ) {\n      isEnd\n      sessionId\n      message {\n        id\n        content\n        __typename\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      aiAnnotations @include(if: $includeAIAnnotations) {\n        shouldEscalateToSupport {\n          strict\n          standard\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  mutation LogUsageEvent($input: LogUsageEventInput!) {\n    logUsageEvent(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation LogUsageEvent($input: LogUsageEventInput!) {\n    logUsageEvent(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  query GetSearchResults($searchInput: SearchInput!) {\n    search(searchInput: $searchInput) {\n      searchHits {\n        id\n        hitOnRoot\n        url\n        title\n        preview\n\n        ... on DocumentationHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DocumentationRecord {\n              pathBreadcrumbs\n              contentType\n              topLevelHeadings {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContentPath {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContent\n            }\n          }\n          pathHeadings {\n            anchor\n            url\n            htmlTag\n            content\n          }\n          content {\n            anchor\n            url\n            htmlTag\n            content\n            contentHtml\n          }\n        }\n\n        ... on StackOverflowHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on StackOverflowRecord {\n              body\n              tags\n              createdAt\n              score\n              topVotedAnswer {\n                url\n                score\n                content\n              }\n              markedAsCorrectAnswer {\n                url\n                score\n                content\n              }\n            }\n          }\n        }\n        ... on GitHubIssueHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on GitHubIssueRecord {\n              body\n              state\n              createdAt\n              reactions {\n                reactionType\n                count\n              }\n              commentsWithMostPositiveReactions {\n                id\n                url\n                body\n                commentDate\n                reactions {\n                  reactionType\n                  count\n                }\n              }\n            }\n          }\n        }\n\n        ... on DiscourseHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DiscourseRecord {\n              body\n              bodyHtml\n              categoryBreadcrumbs\n              createdAt\n            }\n          }\n        }\n      }\n      searchQuery\n    }\n  }\n"): (typeof documents)["\n  query GetSearchResults($searchInput: SearchInput!) {\n    search(searchInput: $searchInput) {\n      searchHits {\n        id\n        hitOnRoot\n        url\n        title\n        preview\n\n        ... on DocumentationHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DocumentationRecord {\n              pathBreadcrumbs\n              contentType\n              topLevelHeadings {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContentPath {\n                anchor\n                url\n                htmlTag\n                content\n              }\n              firstContent\n            }\n          }\n          pathHeadings {\n            anchor\n            url\n            htmlTag\n            content\n          }\n          content {\n            anchor\n            url\n            htmlTag\n            content\n            contentHtml\n          }\n        }\n\n        ... on StackOverflowHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on StackOverflowRecord {\n              body\n              tags\n              createdAt\n              score\n              topVotedAnswer {\n                url\n                score\n                content\n              }\n              markedAsCorrectAnswer {\n                url\n                score\n                content\n              }\n            }\n          }\n        }\n        ... on GitHubIssueHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on GitHubIssueRecord {\n              body\n              state\n              createdAt\n              reactions {\n                reactionType\n                count\n              }\n              commentsWithMostPositiveReactions {\n                id\n                url\n                body\n                commentDate\n                reactions {\n                  reactionType\n                  count\n                }\n              }\n            }\n          }\n        }\n\n        ... on DiscourseHit {\n          rootRecord {\n            __typename\n            id\n            title\n            url\n            preview\n            ... on DiscourseRecord {\n              body\n              bodyHtml\n              categoryBreadcrumbs\n              createdAt\n            }\n          }\n        }\n      }\n      searchQuery\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  query GetChatSession($id: ID!) {\n    getChatSession(id: $id) {\n      id\n      organizationId\n      chatMode\n      workflowId\n      messages {\n        id\n        content\n        ... on UserMessage {\n          context\n          attributes\n        }\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      filters {\n        product\n        productVersion\n        attributes\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChatSession($id: ID!) {\n    getChatSession(id: $id) {\n      id\n      organizationId\n      chatMode\n      workflowId\n      messages {\n        id\n        content\n        ... on UserMessage {\n          context\n          attributes\n        }\n        ... on BotMessage {\n          citations {\n            citationNumber\n            title\n            url\n            rootRecordId\n            rootRecordType\n          }\n        }\n      }\n      filters {\n        product\n        productVersion\n        attributes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function gql(source: "\n  mutation CopyChatSession($sessionId: ID!, $isSharedSession: Boolean!) {\n    copyChatSession(sessionId: $sessionId, isSharedSession: $isSharedSession)\n  }\n"): (typeof documents)["\n  mutation CopyChatSession($sessionId: ID!, $isSharedSession: Boolean!) {\n    copyChatSession(sessionId: $sessionId, isSharedSession: $isSharedSession)\n  }\n"];
export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
export {};
