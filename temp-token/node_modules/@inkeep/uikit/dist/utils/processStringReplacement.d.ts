interface StringMatchRulesInterface {
    ruleType: 'Regex' | 'Substring';
}
export type RegexMatch = StringMatchRulesInterface & {
    ruleType: 'Regex';
    pattern: string;
};
export type SubstringMatch = StringMatchRulesInterface & {
    ruleType: 'Substring';
    string: string;
    useExactWordMatch?: boolean;
};
export type StringMatchingRule = RegexMatch | SubstringMatch;
export interface StringReplacementRule {
    matchingRule: StringMatchingRule;
    replaceWith: string;
    isCaseSensitive?: boolean;
    replaceInBreadCrumbs?: boolean;
    replaceInTitles?: boolean;
    replaceIfFirstWord?: boolean;
}
export declare function processStringReplacementMatchingRule(input: string, rule?: StringReplacementRule): string;
export declare function processStringReplacement({ input, stringReplacementRules, applyRulePredicate, }: {
    input?: string | null;
    stringReplacementRules: StringReplacementRule[];
    applyRulePredicate: (rule: StringReplacementRule) => boolean;
}): string | null | undefined;
export {};
