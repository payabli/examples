/// <reference types="react" />
import { ApolloError } from '@apollo/client/errors';
import { OnContinueChatResultSubscription } from '../../../__generated__/graphql';
import { type MessageArray } from './AIChatPage';
import { AIAnnotations } from './SubscribeToNewMessageForNewChat';
export declare const ON_CONTINUE_CHAT_RESULT: import("@graphql-typed-document-node/core").TypedDocumentNode<OnContinueChatResultSubscription, import("../../../__generated__/graphql").Exact<{
    messageInput: string;
    sessionId: string;
    messageContext?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    messageAttributes?: any;
    includeAIAnnotations: boolean;
}>>;
interface SubscribeToNewMessageFromExistingChatProps {
    messages: MessageArray;
    setMessages: React.Dispatch<React.SetStateAction<MessageArray>>;
    sessionId: string;
    setIsListeningForResponseContinuedChat: React.Dispatch<React.SetStateAction<boolean>>;
    setResponseError: React.Dispatch<React.SetStateAction<ApolloError | string | null>>;
    setIsResponseTruncated: React.Dispatch<React.SetStateAction<boolean>>;
    setAIAnnotations: React.Dispatch<React.SetStateAction<AIAnnotations>>;
}
declare const SubscribeToNewMessageFromExistingChat: ({ messages, setMessages, sessionId, setIsListeningForResponseContinuedChat, setResponseError, setIsResponseTruncated, setAIAnnotations, }: SubscribeToNewMessageFromExistingChatProps) => import("react/jsx-runtime").JSX.Element;
export default SubscribeToNewMessageFromExistingChat;
