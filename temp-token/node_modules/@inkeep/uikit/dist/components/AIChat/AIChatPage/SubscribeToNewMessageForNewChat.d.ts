import React from 'react';
import { ApolloError } from '@apollo/client/errors';
import { OnNewSessionChatResultSubscription } from '../../../__generated__/graphql';
import { ChatMode } from '../../InkeepWidgetProps';
import { type MessageArray } from './AIChatPage';
export declare function cleanMessage(isEnd: boolean, messageContent: string, chatMode: ChatMode): string;
export declare const ON_RECEIVE_RESPONSE_TO_LAST_QUESTION: import("@graphql-typed-document-node/core").TypedDocumentNode<OnNewSessionChatResultSubscription, import("../../../__generated__/graphql").Exact<{
    messageInput: string;
    messageContext?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    organizationId: string;
    integrationId?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    chatMode?: import("../../../__generated__/graphql").InputMaybe<import("../../../__generated__/graphql").ChatMode> | undefined;
    filters?: import("../../../__generated__/graphql").InputMaybe<import("../../../__generated__/graphql").ChatFiltersInput> | undefined;
    messageAttributes?: any;
    tags?: import("../../../__generated__/graphql").InputMaybe<string | string[]> | undefined;
    workflowId?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    context?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    guidance?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
    includeAIAnnotations: boolean;
    environment?: import("../../../__generated__/graphql").InputMaybe<string> | undefined;
}>>;
interface SubscribeToNewMessageForNewChatProps {
    messages: MessageArray;
    setMessages: React.Dispatch<React.SetStateAction<MessageArray>>;
    sessionId: string;
    setSessionId: (newSessionId: string) => void;
    setIsListeningForResponseNewChat: React.Dispatch<React.SetStateAction<boolean>>;
    setResponseError: React.Dispatch<React.SetStateAction<ApolloError | string | null>>;
    setIsResponseTruncated: React.Dispatch<React.SetStateAction<boolean>>;
    setAIAnnotations: React.Dispatch<React.SetStateAction<AIAnnotations>>;
}
export type AIAnnotations = OnNewSessionChatResultSubscription['newSessionChatResult']['aiAnnotations'];
declare const SubscribeToNewMessageForNewChat: React.MemoExoticComponent<({ messages, setMessages, setIsListeningForResponseNewChat, sessionId, setSessionId, setResponseError, setIsResponseTruncated, setAIAnnotations, }: SubscribeToNewMessageForNewChatProps) => import("react/jsx-runtime").JSX.Element>;
export default SubscribeToNewMessageForNewChat;
