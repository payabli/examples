import { type PrismTheme } from 'prism-react-renderer';
import { ColorModeProviderProps } from '@inkeep/color-mode';
import { ThemePropsContext, UserThemeProps } from '../../../components/src/components.ts';
import { UserProvidedColorScheme } from '@inkeep/preset/color-scheme';
import { AiChatPageWrapperVariantProps, AlertVariantProps, AvatarVariantProps, BadgeVariantProps, ButtonVariantProps, CardVariantProps, CheckboxVariantProps, CloseButtonVariantProps, CodeVariantProps, FormControlVariantProps, HeadingVariantProps, IconVariantProps, InputVariantProps, KbdVariantProps, LinkVariantProps, ModalVariantProps, PopoverVariantProps, SearchBarTriggerVariantProps, SelectVariantProps, SkeletonVariantProps, SwitchRecipeVariantProps, TableVariantProps, TabsVariantProps, TagVariantProps, TextareaVariantProps, type TokenCategory, Tokens, TooltipVariantProps } from '../../../styled-system/system.js';
import type { WithStylesProps } from '../hocs/withStyles';
export interface SyntaxHighlighterTheme {
    lightTheme?: PrismTheme;
    darkTheme?: PrismTheme;
}
export type ColorMode = Omit<ColorModeProviderProps, 'children' | 'rootId' | 'shadowHostId'>;
export interface UserTheme extends Record<string, unknown>, WithStylesProps {
    tokens?: UserTokens;
    primaryColors?: UserProvidedColorScheme;
    components?: InkeepThemeComponents;
    syntaxHighlighter?: SyntaxHighlighterTheme;
}
export type UserTokens = {
    [Category in TokenCategory]?: {
        [TokenName in Tokens[Category]]?: number | string;
    };
};
export interface InkeepThemeComponents extends ThemePropsContext {
    AIChatPageWrapper?: UserThemeProps<AiChatPageWrapperVariantProps>;
    PreviewContentHeader?: UserThemeProps;
    SearchBarTrigger?: UserThemeProps<SearchBarTriggerVariantProps>;
    Alert?: UserThemeProps<AlertVariantProps>;
    Avatar?: UserThemeProps<AvatarVariantProps>;
    Badge?: UserThemeProps<BadgeVariantProps>;
    Button?: UserThemeProps<ButtonVariantProps>;
    Card?: UserThemeProps<CardVariantProps>;
    Checkbox?: UserThemeProps<CheckboxVariantProps>;
    CloseButton?: UserThemeProps<CloseButtonVariantProps>;
    Code?: UserThemeProps<CodeVariantProps>;
    Heading?: UserThemeProps<HeadingVariantProps>;
    Icon?: UserThemeProps<IconVariantProps>;
    Kbd?: UserThemeProps<KbdVariantProps>;
    FormControl?: UserThemeProps<FormControlVariantProps>;
    Input?: UserThemeProps<InputVariantProps>;
    Link?: UserThemeProps<LinkVariantProps>;
    Modal?: UserThemeProps<ModalVariantProps>;
    Popover?: UserThemeProps<PopoverVariantProps>;
    Select?: UserThemeProps<SelectVariantProps>;
    Skeleton?: UserThemeProps<SkeletonVariantProps>;
    SwitchRecipe?: UserThemeProps<SwitchRecipeVariantProps>;
    Table?: UserThemeProps<TableVariantProps>;
    Tabs?: UserThemeProps<TabsVariantProps>;
    Tag?: UserThemeProps<TagVariantProps>;
    Textarea?: UserThemeProps<TextareaVariantProps>;
    Tooltip?: UserThemeProps<TooltipVariantProps>;
}
