import { FieldValues } from 'react-hook-form';
import { CustomIcon } from '../Icons/BuiltInIconRenderer';
type InputType = 'CHECKBOX' | 'EMAIL' | 'FILE' | 'SELECT' | 'TEXT' | 'TEXTAREA';
export declare const defaultInputValues: {
    TEXT: string;
    EMAIL: string;
    CHECKBOX: boolean;
    TEXTAREA: string;
    FILE: undefined;
    SELECT: string;
};
export declare enum SpecialFieldNames {
    IncludeChatSession = "include_chat_session"
}
export declare const specialFieldDefaults: {
    INCLUDE_CHAT_SESSION: {
        inputType: InputType;
        label: string;
        name: SpecialFieldNames;
    };
};
export interface IncludeChatSessionField {
    type: 'INCLUDE_CHAT_SESSION';
    label?: string;
    required?: boolean;
    defaultValue?: boolean;
    isHidden?: boolean;
}
export interface SelectOption {
    label: string;
    value: string;
}
export interface BaseFormField {
    type: 'STANDARD_FIELD';
    name: string;
    label: string;
    required?: boolean;
    isHidden?: boolean;
}
interface CheckboxFieldType extends BaseFormField {
    inputType: 'CHECKBOX';
    defaultValue?: boolean;
}
interface SelectFieldType extends BaseFormField {
    inputType: 'SELECT';
    selectOptions: SelectOption[];
    defaultValue?: string;
    placeholder?: string;
}
interface TextFieldType extends BaseFormField {
    inputType: 'EMAIL' | 'TEXT' | 'TEXTAREA';
    defaultValue?: string;
    placeholder?: string;
}
interface FileFieldType extends BaseFormField {
    inputType: 'FILE';
}
export interface FormField extends BaseFormField {
    inputType: InputType;
    defaultValue?: boolean | string;
    selectOptions?: SelectOption[];
    placeholder?: string;
}
export type FieldType = CheckboxFieldType | FileFieldType | IncludeChatSessionField | SelectFieldType | TextFieldType;
interface UserMessage {
    role: 'user';
    content: string;
}
interface AssistantMessage {
    role: 'assistant';
    content: string;
}
export type Message = AssistantMessage | UserMessage;
export interface ChatSession {
    messages: Message[];
    chatSessionId: string;
}
export interface Client {
    currentUrl: string;
}
export interface SubmitCallbackArgs {
    formDetails: FieldValues;
    chatSession: ChatSession | null;
    client: Client;
}
export type SubmitCallback = (values: SubmitCallbackArgs) => Promise<{
    success: boolean;
}>;
export interface SuccessConfirmationButton {
    label: string;
    icon?: CustomIcon;
    closeFormAction?: CloseFormAction;
}
export interface SuccessConfirmationPageProps {
    heading?: string;
    message?: string;
    successConfirmationButton?: SuccessConfirmationButton;
}
export interface FormConfig {
    heading?: string;
    description?: string;
    fields: FieldType[];
    submitButtonLabel?: string;
    submitCallback: SubmitCallback;
    successConfirmationPage?: SuccessConfirmationPageProps;
    closeFormAction?: CloseFormAction;
}
export interface FormConfigWithChatSession {
    formConfig: FormConfig;
    chatSession: ChatSession;
}
export type CloseFormAction = BackToChatFormAction | ModalCloseFormAction;
interface BackToChatFormAction {
    type: 'BACK_TO_CHAT';
}
interface ModalCloseFormAction {
    type: 'CLOSE_MODAL';
}
export {};
