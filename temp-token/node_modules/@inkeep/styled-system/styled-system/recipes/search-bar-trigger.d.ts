/* eslint-disable */
import type { ConditionalValue } from '../types/index';
import type { DistributiveOmit, Pretty } from '../types/system-types';

interface SearchBarTriggerVariant {
  size: "expand" | "compact" | "shrink" | "medium"
variant: "emphasized" | "subtle"
}

type SearchBarTriggerVariantMap = {
  [key in keyof SearchBarTriggerVariant]: Array<SearchBarTriggerVariant[key]>
}

export type SearchBarTriggerVariantProps = {
  [key in keyof SearchBarTriggerVariant]?: ConditionalValue<SearchBarTriggerVariant[key]> | undefined
}

export interface SearchBarTriggerRecipe {
  __type: SearchBarTriggerVariantProps
  (props?: SearchBarTriggerVariantProps): Pretty<Record<"container" | "wrapper" | "text" | "kbd" | "icon", string>>
  raw: (props?: SearchBarTriggerVariantProps) => SearchBarTriggerVariantProps
  variantMap: SearchBarTriggerVariantMap
  variantKeys: Array<keyof SearchBarTriggerVariant>
  splitVariantProps<Props extends SearchBarTriggerVariantProps>(props: Props): [SearchBarTriggerVariantProps, Pretty<DistributiveOmit<Props, keyof SearchBarTriggerVariantProps>>]
}


export declare const searchBarTrigger: SearchBarTriggerRecipe