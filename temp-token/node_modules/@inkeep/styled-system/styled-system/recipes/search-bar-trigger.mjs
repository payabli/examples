import { splitProps, getSlotCompoundVariant } from '../helpers.mjs';
import { createRecipe } from './create-recipe.mjs';

const searchBarTriggerDefaultVariants = {
  "size": "compact",
  "variant": "subtle"
}
const searchBarTriggerCompoundVariants = []

const searchBarTriggerSlotNames = [
  [
    "container",
    "search-bar-trigger__container"
  ],
  [
    "wrapper",
    "search-bar-trigger__wrapper"
  ],
  [
    "text",
    "search-bar-trigger__text"
  ],
  [
    "kbd",
    "search-bar-trigger__kbd"
  ],
  [
    "icon",
    "search-bar-trigger__icon"
  ]
]
const searchBarTriggerSlotFns = /* @__PURE__ */ searchBarTriggerSlotNames.map(([slotName, slotKey]) => [slotName, createRecipe(slotKey, searchBarTriggerDefaultVariants, getSlotCompoundVariant(searchBarTriggerCompoundVariants, slotName))])

const searchBarTriggerFn = (props = {}) => {
  return Object.fromEntries(searchBarTriggerSlotFns.map(([slotName, slotFn]) => [slotName, slotFn(props)]))
}

const searchBarTriggerVariantKeys = [
  "size",
  "variant"
]

export const searchBarTrigger = /* @__PURE__ */ Object.assign(searchBarTriggerFn, {
  __recipe__: false,
  __name__: 'searchBarTrigger',
  raw: (props) => props,
  variantKeys: searchBarTriggerVariantKeys,
  variantMap: {
  "size": [
    "expand",
    "compact",
    "shrink",
    "medium"
  ],
  "variant": [
    "emphasized",
    "subtle"
  ]
},
  splitVariantProps(props) {
    return splitProps(props, searchBarTriggerVariantKeys)
  },
})