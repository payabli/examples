import { splitProps, getSlotCompoundVariant } from '../helpers.mjs';
import { createRecipe } from './create-recipe.mjs';

const contentParserDefaultVariants = {}
const contentParserCompoundVariants = []

const contentParserSlotNames = [
  [
    "span",
    "content-parser__span"
  ],
  [
    "sup",
    "content-parser__sup"
  ],
  [
    "text",
    "content-parser__text"
  ],
  [
    "ol",
    "content-parser__ol"
  ],
  [
    "ul",
    "content-parser__ul"
  ],
  [
    "li",
    "content-parser__li"
  ],
  [
    "image",
    "content-parser__image"
  ],
  [
    "link",
    "content-parser__link"
  ],
  [
    "table",
    "content-parser__table"
  ],
  [
    "thead",
    "content-parser__thead"
  ],
  [
    "tbody",
    "content-parser__tbody"
  ],
  [
    "tr",
    "content-parser__tr"
  ],
  [
    "th",
    "content-parser__th"
  ],
  [
    "td",
    "content-parser__td"
  ],
  [
    "code",
    "content-parser__code"
  ],
  [
    "heading",
    "content-parser__heading"
  ]
]
const contentParserSlotFns = /* @__PURE__ */ contentParserSlotNames.map(([slotName, slotKey]) => [slotName, createRecipe(slotKey, contentParserDefaultVariants, getSlotCompoundVariant(contentParserCompoundVariants, slotName))])

const contentParserFn = (props = {}) => {
  return Object.fromEntries(contentParserSlotFns.map(([slotName, slotFn]) => [slotName, slotFn(props)]))
}

const contentParserVariantKeys = []

export const contentParser = /* @__PURE__ */ Object.assign(contentParserFn, {
  __recipe__: false,
  __name__: 'contentParser',
  raw: (props) => props,
  variantKeys: contentParserVariantKeys,
  variantMap: {},
  splitVariantProps(props) {
    return splitProps(props, contentParserVariantKeys)
  },
})