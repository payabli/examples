import { splitProps, getSlotCompoundVariant } from '../helpers.mjs';
import { createRecipe } from './create-recipe.mjs';

const cardDefaultVariants = {
  "variant": "elevated",
  "size": "md"
}
const cardCompoundVariants = []

const cardSlotNames = [
  [
    "container",
    "card__container"
  ],
  [
    "body",
    "card__body"
  ],
  [
    "header",
    "card__header"
  ],
  [
    "footer",
    "card__footer"
  ]
]
const cardSlotFns = /* @__PURE__ */ cardSlotNames.map(([slotName, slotKey]) => [slotName, createRecipe(slotKey, cardDefaultVariants, getSlotCompoundVariant(cardCompoundVariants, slotName))])

const cardFn = (props = {}) => {
  return Object.fromEntries(cardSlotFns.map(([slotName, slotFn]) => [slotName, slotFn(props)]))
}

const cardVariantKeys = [
  "variant",
  "size"
]

export const card = /* @__PURE__ */ Object.assign(cardFn, {
  __recipe__: false,
  __name__: 'card',
  raw: (props) => props,
  variantKeys: cardVariantKeys,
  variantMap: {
  "variant": [
    "elevated",
    "outline",
    "filled",
    "unstyled"
  ],
  "size": [
    "sm",
    "md",
    "lg"
  ]
},
  splitVariantProps(props) {
    return splitProps(props, cardVariantKeys)
  },
})