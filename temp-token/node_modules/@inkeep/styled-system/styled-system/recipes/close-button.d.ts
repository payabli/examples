/* eslint-disable */
import type { ConditionalValue } from '../types/index';
import type { DistributiveOmit, Pretty } from '../types/system-types';

interface CloseButtonVariant {
  size: "lg" | "md" | "sm"
}

type CloseButtonVariantMap = {
  [key in keyof CloseButtonVariant]: Array<CloseButtonVariant[key]>
}

export type CloseButtonVariantProps = {
  [key in keyof CloseButtonVariant]?: ConditionalValue<CloseButtonVariant[key]> | undefined
}

export interface CloseButtonRecipe {
  __type: CloseButtonVariantProps
  (props?: CloseButtonVariantProps): string
  raw: (props?: CloseButtonVariantProps) => CloseButtonVariantProps
  variantMap: CloseButtonVariantMap
  variantKeys: Array<keyof CloseButtonVariant>
  splitVariantProps<Props extends CloseButtonVariantProps>(props: Props): [CloseButtonVariantProps, Pretty<DistributiveOmit<Props, keyof CloseButtonVariantProps>>]
}


export declare const closeButton: CloseButtonRecipe