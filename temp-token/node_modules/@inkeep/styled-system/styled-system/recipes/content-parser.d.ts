/* eslint-disable */
import type { ConditionalValue } from '../types/index';
import type { DistributiveOmit, Pretty } from '../types/system-types';

interface ContentParserVariant {
  
}

type ContentParserVariantMap = {
  [key in keyof ContentParserVariant]: Array<ContentParserVariant[key]>
}

export type ContentParserVariantProps = {
  [key in keyof ContentParserVariant]?: ConditionalValue<ContentParserVariant[key]> | undefined
}

export interface ContentParserRecipe {
  __type: ContentParserVariantProps
  (props?: ContentParserVariantProps): Pretty<Record<"span" | "sup" | "text" | "ol" | "ul" | "li" | "image" | "link" | "table" | "thead" | "tbody" | "tr" | "th" | "td" | "code" | "heading", string>>
  raw: (props?: ContentParserVariantProps) => ContentParserVariantProps
  variantMap: ContentParserVariantMap
  variantKeys: Array<keyof ContentParserVariant>
  splitVariantProps<Props extends ContentParserVariantProps>(props: Props): [ContentParserVariantProps, Pretty<DistributiveOmit<Props, keyof ContentParserVariantProps>>]
}


export declare const contentParser: ContentParserRecipe