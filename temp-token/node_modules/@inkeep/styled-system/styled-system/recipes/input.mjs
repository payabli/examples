import { splitProps, getSlotCompoundVariant } from '../helpers.mjs';
import { createRecipe } from './create-recipe.mjs';

const inputDefaultVariants = {
  "size": "md",
  "variant": "outline"
}
const inputCompoundVariants = []

const inputSlotNames = [
  [
    "group",
    "input__group"
  ],
  [
    "field",
    "input__field"
  ],
  [
    "addon",
    "input__addon"
  ]
]
const inputSlotFns = /* @__PURE__ */ inputSlotNames.map(([slotName, slotKey]) => [slotName, createRecipe(slotKey, inputDefaultVariants, getSlotCompoundVariant(inputCompoundVariants, slotName))])

const inputFn = (props = {}) => {
  return Object.fromEntries(inputSlotFns.map(([slotName, slotFn]) => [slotName, slotFn(props)]))
}

const inputVariantKeys = [
  "size",
  "variant"
]

export const input = /* @__PURE__ */ Object.assign(inputFn, {
  __recipe__: false,
  __name__: 'input',
  raw: (props) => props,
  variantKeys: inputVariantKeys,
  variantMap: {
  "size": [
    "lg",
    "md",
    "sm",
    "xs"
  ],
  "variant": [
    "outline",
    "filled",
    "flushed",
    "unstyled"
  ]
},
  splitVariantProps(props) {
    return splitProps(props, inputVariantKeys)
  },
})