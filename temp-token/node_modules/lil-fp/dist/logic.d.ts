declare const match: <T, R>(...fns: ((v: T) => R)[]) => (v: T) => NonNullable<R> | undefined;
declare function when<T, U extends T, R>(predicate: (v: T) => boolean, fn: (v: U) => R): (v: T) => R | undefined;
declare function when<T, U extends T, R>(predicate: (v: T) => v is U, fn: (v: U) => R): (v: T) => R | undefined;
declare const otherwise: <T, R>(fn: (v: T) => R) => (v: T) => R | undefined;
declare const orElse: <T, U>(u: U | (() => U)) => (v: T | null | undefined) => T | U;

export { match, orElse, otherwise, when };
