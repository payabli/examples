import {
  __export
} from "./chunk-LLLY6SAS.mjs";

// src/arr.ts
var arr_exports = {};
__export(arr_exports, {
  at: () => at,
  compact: () => compact,
  concat: () => concat,
  every: () => every,
  filter: () => filter,
  filterMap: () => filterMap,
  flat: () => flat,
  forEach: () => forEach,
  from: () => from,
  has: () => has,
  head: () => head,
  map: () => map,
  next: () => next,
  prev: () => prev,
  reduce: () => reduce,
  some: () => some,
  tail: () => tail,
  uniq: () => uniq
});
var from = (v) => Array.from(v), filter = (f) => (arr) => arr.filter(f), map = (f) => (arr) => arr.map(f), reduce = (f, init) => (arr) => arr.reduce(f, init), filterMap = (f) => (arr) => arr.reduce((acc, v, index, arr2) => {
  let x = f(v, index, arr2);
  return x == null ? acc : [...acc, x];
}, []), forEach = (f) => (arr) => arr.forEach(f), next = (i, loop) => (arr) => arr[(i + 1) % (loop ? arr.length : arr.length - 1)], prev = (i, loop) => (arr) => arr[(i - 1 + (loop ? arr.length : 0)) % arr.length], head = (arr) => arr[0], tail = (arr) => arr[arr.length - 1], at = (i) => (arr) => arr.at(i), uniq = (arr) => [...new Set(arr)], some = (f) => (arr) => arr.some(f), every = (f) => (arr) => arr.every(f), has = (v) => (arr) => arr.includes(v), concat = (...others) => (v) => v.concat(...others), compact = (arr) => arr.filter((v) => v != null), flat = () => (arr) => arr.flat();

export {
  from,
  filter,
  map,
  reduce,
  filterMap,
  forEach,
  next,
  prev,
  head,
  tail,
  at,
  uniq,
  some,
  every,
  has,
  concat,
  compact,
  flat,
  arr_exports
};
