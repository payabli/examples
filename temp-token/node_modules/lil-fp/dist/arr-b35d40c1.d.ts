/**
 * Creates an array from an iterable object.
 */
declare const from: <T>(v: Iterable<T> | ArrayLike<T> | T[]) => T[];
/**
 * Returns the elements of an array that meet the condition specified in a callback function.
 */
declare const filter: <T>(f: (v: T, index: number, array: T[]) => boolean) => (arr: T[]) => T[];
/**
 * Calls a defined callback function on each element of an array, and returns an array that contains the results.
 */
declare const map: <T, U>(f: (v: T, index: number, array: T[]) => U) => (arr: T[]) => U[];
/**
 * Calls the specified callback function for all the elements in an array.
 *
 * The return value of the callback function is the accumulated result,
 * and is provided as an argument in the next call to the callback function.
 */
declare const reduce: <T, U>(f: (acc: U, v: T, index: number, array: T[]) => U, init: U) => (arr: T[]) => U;
/**
 * Calls the specified callback function for all the elements in an array.
 * The return value is the non-nullable result of the callback function.
 */
declare const filterMap: <T, U>(f: (v: T, index: number, array: T[]) => U | null | undefined) => (arr: T[]) => U[];
/**
 * Performs the specified action for each element in an array.
 */
declare const forEach: <T>(f: (v: T, index: number, array: T[]) => void) => (arr: T[]) => void;
/**
 * Returns the next element of an array based on the current index.
 */
declare const next: <T>(i: number, loop: boolean) => (arr: T[]) => T | undefined;
/**
 * Returns the previous element of an array based on the current index.
 */
declare const prev: <T>(i: number, loop: boolean) => (arr: T[]) => T | undefined;
/**
 * Returns the first element of an array.
 */
declare const head: <T>(arr: T[]) => T | undefined;
/**
 * Returns the last element of an array.
 */
declare const tail: <T>(arr: T[]) => T | undefined;
/**
 * Returns the element of an array at the specified index.
 */
declare const at: <T>(i: number) => (arr: T[]) => T | undefined;
/**
 * Returns the unique elements of an array.
 */
declare const uniq: <T>(arr: T[]) => T[];
/**
 * Determines whether the specified callback function returns true for any element of an array.
 */
declare const some: <T>(f: (v: T, index: number, array: T[]) => boolean) => (arr: T[]) => boolean;
/**
 * Determines whether the specified callback function returns true for all elements of an array.
 */
declare const every: <T>(f: (v: T, index: number, array: T[]) => boolean) => (arr: T[]) => boolean;
/**
 * Determines whether an array includes a certain element
 */
declare const has: <T>(v: T) => (arr: T[]) => boolean;
/**
 * Combines two or more arrays
 */
declare const concat: <T>(...others: T[][]) => (v: T[]) => T[];
/**
 * Removes nullish values from an array
 */
declare const compact: <T>(arr: (T | null | undefined)[]) => T[];
/**
 * Flattens an array of arrays
 */
declare const flat: <T>() => (arr: T[][]) => T[];

declare const arr_at: typeof at;
declare const arr_compact: typeof compact;
declare const arr_concat: typeof concat;
declare const arr_every: typeof every;
declare const arr_filter: typeof filter;
declare const arr_filterMap: typeof filterMap;
declare const arr_flat: typeof flat;
declare const arr_forEach: typeof forEach;
declare const arr_from: typeof from;
declare const arr_has: typeof has;
declare const arr_head: typeof head;
declare const arr_map: typeof map;
declare const arr_next: typeof next;
declare const arr_prev: typeof prev;
declare const arr_reduce: typeof reduce;
declare const arr_some: typeof some;
declare const arr_tail: typeof tail;
declare const arr_uniq: typeof uniq;
declare namespace arr {
  export {
    arr_at as at,
    arr_compact as compact,
    arr_concat as concat,
    arr_every as every,
    arr_filter as filter,
    arr_filterMap as filterMap,
    arr_flat as flat,
    arr_forEach as forEach,
    arr_from as from,
    arr_has as has,
    arr_head as head,
    arr_map as map,
    arr_next as next,
    arr_prev as prev,
    arr_reduce as reduce,
    arr_some as some,
    arr_tail as tail,
    arr_uniq as uniq,
  };
}

export { arr as a, filter as b, filterMap as c, forEach as d, at as e, from as f, every as g, head as h, has as i, concat as j, compact as k, flat as l, map as m, next as n, prev as p, reduce as r, some as s, tail as t, uniq as u };
