// src/func.ts
function pipe(input, ...functions) {
  return functions.reduce((acc, fn) => fn(acc), input);
}
function flow(...functions) {
  return (input) => functions.reduce((acc, fn) => fn(acc), input);
}
function tap(fn) {
  return (value) => (fn(value), value);
}
var log = (label, fn) => (v) => (console.log(`${label}: `, fn?.(v) ?? v), v), cast = (v) => v, noop = () => {
}, identity = (v) => v, memo = (fn) => {
  let cache = /* @__PURE__ */ Object.create(null);
  return (arg) => (cache[arg] === void 0 && (cache[arg] = fn(arg)), cache[arg]);
}, tryCatch = (fn, onError) => (v) => {
  try {
    return fn(v);
  } catch (err) {
    return cast(onError?.(err, v));
  }
};

export {
  pipe,
  flow,
  tap,
  log,
  cast,
  noop,
  identity,
  memo,
  tryCatch
};
