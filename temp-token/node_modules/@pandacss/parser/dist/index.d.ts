import { ProjectOptions as ProjectOptions$1, SourceFile } from 'ts-morph';
import { ResultItem, Config, ConfigTsOptions, Runtime, PandaHookable } from '@pandacss/types';
import { Generator } from '@pandacss/generator';

declare class ParserResult {
    jsx: Set<ResultItem>;
    css: Set<ResultItem>;
    cva: Set<ResultItem>;
    sva: Set<ResultItem>;
    recipe: Map<string, Set<ResultItem>>;
    pattern: Map<string, Set<ResultItem>>;
    filePath: string | undefined;
    set(name: 'cva' | 'css' | 'sva', result: ResultItem): void;
    setCva(result: ResultItem): void;
    setSva(result: ResultItem): void;
    setJsx(result: ResultItem): void;
    setPattern(name: string, result: ResultItem): void;
    setRecipe(name: string, result: ResultItem): void;
    isEmpty(): boolean;
    setFilePath(filePath: string): this;
    toArray(): ResultItem[];
    toJSON(): {
        css: ResultItem[];
        cva: ResultItem[];
        sva: ResultItem[];
        jsx: ResultItem[];
        recipe: {
            [k: string]: ResultItem[];
        };
        pattern: {
            [k: string]: ResultItem[];
        };
    };
    merge(result: ParserResult): this;
    static fromJSON(json: string): ParserResult;
}
declare const createParserResult: () => ParserResult;

type ParserPatternNode = Generator['patterns']['details'][number];
type ParserRecipeNode = Generator['recipes']['details'][number];
type ParserNodeOptions = ParserPatternNode | ParserRecipeNode;
interface ParserOptions {
    importMap: Record<'css' | 'recipe' | 'pattern' | 'jsx', string[]>;
    jsx: {
        framework: string | undefined;
        factory: string;
        styleProps: Exclude<Config['jsxStyleProps'], undefined>;
        nodes: ParserNodeOptions[];
        isStyleProp: (prop: string) => boolean;
    };
    patternKeys: string[];
    recipeKeys: string[];
    getRecipesByJsxName: (jsxName: string) => ParserRecipeNode[];
    getPatternsByJsxName: (jsxName: string) => ParserPatternNode[];
    tsOptions?: ConfigTsOptions;
    join: Runtime['path']['join'];
}

type ProjectOptions = Partial<ProjectOptions$1> & {
    readFile: Runtime['fs']['readFileSync'];
    getFiles: () => string[];
    hooks: PandaHookable;
    parserOptions: ParserOptions;
    tsOptions?: ConfigTsOptions;
};

declare const createProject: ({ getFiles, readFile, parserOptions, hooks, ...projectOptions }: ProjectOptions) => PandaProject;
interface PandaProject {
    getSourceFile: (filePath: string) => SourceFile | undefined;
    removeSourceFile: (filePath: string) => void;
    createSourceFile: (filePath: string) => SourceFile;
    addSourceFile: (filePath: string, content: string) => SourceFile;
    parseSourceFile: (filePath: string) => ParserResult | undefined;
    reloadSourceFile: (filePath: string) => void;
    reloadSourceFiles: () => void;
    files: string[];
    getFiles: () => string[];
    readFile: (filePath: string) => string;
}

export { PandaProject, ParserResult, createParserResult, createProject };
