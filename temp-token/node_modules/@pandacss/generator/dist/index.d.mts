import * as _pandacss_types from '@pandacss/types';
import { UserConfig, PatternConfig, Dict, ArtifactFilters, ConfigResultWithHooks, RequiredBy, StudioOptions, HashOptions, PrefixOptions, Theme, CascadeLayers, TSConfig, ArtifactId, ParserResultType } from '@pandacss/types';
import { Utility, Recipes, Conditions, Layers, Stylesheet, RecipeContext, RecipeNode } from '@pandacss/core';
import { TokenDictionary } from '@pandacss/token-dictionary';

declare class FileEngine {
    private config;
    constructor(config: UserConfig);
    private get forceConsistentTypeExtension();
    private get outExtension();
    ext(file: string): string;
    extDts(file: string): string;
    private __extDts;
    import(mod: string, file: string): string;
    importType(mod: string, file: string): string;
    exportType(mod: string, file: string): string;
    exportStar(file: string): string;
    exportTypeStar(file: string): string;
    isTypeFile(file: string): boolean;
}

declare class JsxEngine {
    private config;
    constructor(config: UserConfig);
    private get jsxFactory();
    get styleProps(): "all" | "none" | "minimal";
    get framework(): ("solid" | "react" | "preact" | "vue" | "qwik") | undefined;
    get factoryName(): string;
    get upperName(): string;
    get typeName(): string;
    get variantName(): string;
    get componentName(): string;
}

declare class PathEngine {
    private config;
    constructor(config: UserConfig);
    private get cwd();
    private get emitPackage();
    private get outdir();
    private getFilePath;
    get root(): string[];
    get css(): string[];
    get token(): string[];
    get types(): string[];
    get recipe(): string[];
    get pattern(): string[];
    get outCss(): string[];
    get jsx(): string[];
}

declare class Patterns {
    patterns: Record<string, PatternConfig>;
    details: PatternDetail[];
    constructor(config: UserConfig);
    private createDetail;
    get keys(): string[];
    getConfig(name: string): PatternConfig;
    transform(name: string, data: Dict): Dict;
    getNames(name: string): PatternNames;
    find: (jsxName: string) => string;
    filter: (jsxName: string) => PatternDetail[];
    isEmpty(): boolean;
    saveOne(name: string, pattern: PatternConfig): void;
    remove(name: string): void;
    filterDetails(filters?: ArtifactFilters): PatternDetail[];
}
interface PatternNames {
    upperName: string;
    baseName: string;
    dashName: string;
    styleFnName: string;
    jsxName: string;
}
interface PatternDetail extends PatternNames {
    props: string[];
    blocklistType: string;
    config: PatternConfig;
    type: 'pattern';
    match: RegExp;
    jsx: NonNullable<PatternConfig['jsx']>;
}

declare class Context {
    conf: ConfigResultWithHooks;
    studio: RequiredBy<NonNullable<StudioOptions['studio']>, 'outdir'>;
    tokens: TokenDictionary;
    utility: Utility;
    recipes: Recipes;
    conditions: Conditions;
    patterns: Patterns;
    layers: Layers;
    jsx: JsxEngine;
    paths: PathEngine;
    file: FileEngine;
    stylesheet: Stylesheet;
    properties: Set<string>;
    isValidProperty: (key: string) => boolean;
    constructor(conf: ConfigResultWithHooks);
    get config(): UserConfig;
    get hooks(): _pandacss_types.PandaHookable;
    get isTemplateLiteralSyntax(): boolean;
    get hash(): HashOptions;
    get prefix(): PrefixOptions;
    createTokenDictionary(theme: Theme): TokenDictionary;
    createUtility(config: UserConfig): Utility;
    createConditions(config: UserConfig): Conditions;
    createLayers(layers: CascadeLayers): Layers;
    setupCompositions(theme: Theme): void;
    setupProperties(): void;
    private get baseSheetContext();
    createSheet(): Stylesheet;
    createRecipes(theme: Theme, context: RecipeContext): Recipes;
}

declare const artifactsGenerated: (ctx: Context) => () => string;
declare const configExists: (cmd: string) => string;
declare const thankYou: () => string;
declare const codegenComplete: () => string;
declare const noExtract: () => string;
declare const watch: () => string;
declare const configWatch: () => string;
declare const buildComplete: (count: number) => string;
declare const cssArtifactComplete: (type: string) => string;
declare const getMessages: (ctx: Context) => {
    artifactsGenerated: () => string;
    configExists: (cmd: string) => string;
    thankYou: () => string;
    codegenComplete: () => string;
    noExtract: () => string;
    watch: () => string;
    buildComplete: (count: number) => string;
    configWatch: () => string;
    cssArtifactComplete: (type: string) => string;
};

declare const messages_artifactsGenerated: typeof artifactsGenerated;
declare const messages_buildComplete: typeof buildComplete;
declare const messages_codegenComplete: typeof codegenComplete;
declare const messages_configExists: typeof configExists;
declare const messages_configWatch: typeof configWatch;
declare const messages_cssArtifactComplete: typeof cssArtifactComplete;
declare const messages_getMessages: typeof getMessages;
declare const messages_noExtract: typeof noExtract;
declare const messages_thankYou: typeof thankYou;
declare const messages_watch: typeof watch;
declare namespace messages {
  export {
    messages_artifactsGenerated as artifactsGenerated,
    messages_buildComplete as buildComplete,
    messages_codegenComplete as codegenComplete,
    messages_configExists as configExists,
    messages_configWatch as configWatch,
    messages_cssArtifactComplete as cssArtifactComplete,
    messages_getMessages as getMessages,
    messages_noExtract as noExtract,
    messages_thankYou as thankYou,
    messages_watch as watch,
  };
}

interface ParserImportMap {
    css: string[];
    recipe: string[];
    pattern: string[];
    jsx: string[];
}
interface ParserJsxOptions {
    framework: Context['jsx']['framework'];
    factory: Context['jsx']['factoryName'];
    styleProps: Context['jsx']['styleProps'];
    isStyleProp: Context['isValidProperty'];
    nodes: Array<PatternDetail | RecipeNode>;
}
interface ParserOptions {
    importMap: ParserImportMap;
    jsx: ParserJsxOptions;
    patternKeys: Context['patterns']['keys'];
    recipeKeys: Context['recipes']['keys'];
    getRecipesByJsxName: Context['recipes']['filter'];
    getPatternsByJsxName: Context['patterns']['filter'];
    compilerOptions: TSConfig['compilerOptions'];
    tsOptions: ConfigResultWithHooks['tsOptions'];
}

type CssArtifactType = 'preflight' | 'tokens' | 'static' | 'global' | 'keyframes';
declare class Generator extends Context {
    messages: ReturnType<typeof getMessages>;
    parserOptions: ParserOptions;
    constructor(conf: ConfigResultWithHooks);
    getArtifacts(ids?: ArtifactId[] | undefined): _pandacss_types.Artifact[];
    appendCss(type: CssArtifactType): void;
    appendLayerParams(): void;
    appendBaselineCss(): void;
    appendParserCss(...results: Array<ParserResultType | undefined>): void;
    getCss(): string;
}

export { CssArtifactType, Generator, messages };
