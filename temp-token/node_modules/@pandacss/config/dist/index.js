"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  bundleConfigFile: () => bundleConfigFile,
  convertTsPathsToRegexes: () => convertTsPathsToRegexes,
  findConfigFile: () => findConfigFile,
  getConfigDependencies: () => getConfigDependencies,
  getResolvedConfig: () => getResolvedConfig,
  loadConfigFile: () => loadConfigFile,
  mergeConfigs: () => mergeConfigs,
  resolveConfigFile: () => resolveConfigFile
});
module.exports = __toCommonJS(src_exports);

// src/find-config.ts
var import_sync = __toESM(require("escalade/sync"));
var import_path = require("path");
var configs = [".ts", ".js", ".mts", ".mjs", ".cts", ".cjs"];
var pandaConfigRegex = new RegExp(`panda.config(${configs.join("|")})$`);
var isPandaConfig = (file) => pandaConfigRegex.test(file);
function findConfigFile({ cwd, file }) {
  if (file)
    return (0, import_path.resolve)(cwd, file);
  return (0, import_sync.default)(cwd, (_dir, paths) => {
    return paths.find(isPandaConfig);
  });
}

// src/get-mod-deps.ts
var import_fs = __toESM(require("fs"));
var import_path4 = __toESM(require("path"));

// src/ts-config-paths.ts
var import_path2 = require("path");
function convertTsPathsToRegexes(paths, baseUrl) {
  const sortedPatterns = Object.keys(paths).sort((a, b) => getPrefixLength(b) - getPrefixLength(a));
  const resolved = [];
  for (let pattern of sortedPatterns) {
    const relativePaths = paths[pattern];
    pattern = escapeStringRegexp(pattern).replace(/\*/g, "(.+)");
    resolved.push({
      pattern: new RegExp("^" + pattern + "$"),
      paths: relativePaths.map((relativePath) => (0, import_path2.resolve)(baseUrl, relativePath))
    });
  }
  return resolved;
}
function getPrefixLength(pattern) {
  const prefixLength = pattern.indexOf("*");
  return pattern.substr(0, prefixLength).length;
}
function escapeStringRegexp(string) {
  return string.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// src/resolve-ts-path-pattern.ts
var import_path3 = require("path");
var resolveTsPathPattern = (pathMappings, moduleSpecifier) => {
  for (const mapping of pathMappings) {
    const match = moduleSpecifier.match(mapping.pattern);
    if (!match) {
      continue;
    }
    for (const pathTemplate of mapping.paths) {
      let starCount = 0;
      const mappedId = pathTemplate.replace(/\*/g, () => {
        const matchIndex = Math.min(++starCount, match.length - 1);
        return match[matchIndex];
      });
      return mappedId.split(import_path3.sep).join(import_path3.posix.sep);
    }
  }
};

// src/get-mod-deps.ts
var import_typescript = __toESM(require("typescript"));
var jsExtensions = [".js", ".cjs", ".mjs"];
var jsResolutionOrder = ["", ".js", ".cjs", ".mjs", ".ts", ".cts", ".mts", ".jsx", ".tsx"];
var tsResolutionOrder = ["", ".ts", ".cts", ".mts", ".tsx", ".js", ".cjs", ".mjs", ".jsx"];
function resolveWithExtension(file, extensions) {
  for (const ext of extensions) {
    const full = `${file}${ext}`;
    if (import_fs.default.existsSync(full) && import_fs.default.statSync(full).isFile()) {
      return full;
    }
  }
  for (const ext of extensions) {
    const full = `${file}/index${ext}`;
    if (import_fs.default.existsSync(full)) {
      return full;
    }
  }
  return null;
}
var importRegex = /import[\s\S]*?['"](.{3,}?)['"]/gi;
var importFromRegex = /import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi;
var requireRegex = /require\(['"`](.+)['"`]\)/gi;
var exportRegex = /export[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi;
function getDeps(opts, fromAlias) {
  const { filename, seen } = opts;
  const { moduleResolution: _, ...compilerOptions } = opts.compilerOptions ?? {};
  const absoluteFile = resolveWithExtension(
    import_path4.default.resolve(opts.cwd, filename),
    jsExtensions.includes(opts.ext) ? jsResolutionOrder : tsResolutionOrder
  );
  if (absoluteFile === null)
    return;
  if (fromAlias) {
    opts.foundModuleAliases.set(fromAlias, absoluteFile);
  }
  if (seen.size > 1 && seen.has(absoluteFile))
    return;
  seen.add(absoluteFile);
  const contents = import_fs.default.readFileSync(absoluteFile, "utf-8");
  const fileDeps = [
    ...contents.matchAll(importRegex),
    ...contents.matchAll(importFromRegex),
    ...contents.matchAll(requireRegex),
    ...contents.matchAll(exportRegex)
  ];
  if (!fileDeps.length)
    return;
  const nextOpts = {
    // Resolve new base for new imports/requires
    cwd: import_path4.default.dirname(absoluteFile),
    ext: import_path4.default.extname(absoluteFile),
    seen,
    baseUrl: opts.baseUrl,
    pathMappings: opts.pathMappings,
    foundModuleAliases: opts.foundModuleAliases
  };
  fileDeps.forEach((match) => {
    const mod = match[1];
    if (mod[0] === ".") {
      getDeps(Object.assign({}, nextOpts, { filename: mod }));
      return;
    }
    try {
      const found = import_typescript.default.resolveModuleName(mod, absoluteFile, compilerOptions, import_typescript.default.sys).resolvedModule;
      if (found && found.extension === ".ts") {
        getDeps(Object.assign({}, nextOpts, { filename: found.resolvedFileName }));
        return;
      }
      if (!opts.pathMappings)
        return;
      const filename2 = resolveTsPathPattern(opts.pathMappings, mod);
      if (!filename2)
        return;
      getDeps(Object.assign({}, nextOpts, { filename: filename2 }), mod);
    } catch (err) {
    }
  });
}
function getConfigDependencies(filePath, tsOptions = { pathMappings: [] }, compilerOptions) {
  if (filePath === null)
    return { deps: /* @__PURE__ */ new Set(), aliases: /* @__PURE__ */ new Map() };
  const foundModuleAliases = /* @__PURE__ */ new Map();
  const deps = /* @__PURE__ */ new Set();
  deps.add(filePath);
  getDeps({
    filename: filePath,
    ext: import_path4.default.extname(filePath),
    cwd: import_path4.default.dirname(filePath),
    seen: deps,
    baseUrl: tsOptions.baseUrl,
    pathMappings: tsOptions.pathMappings ?? [],
    foundModuleAliases,
    compilerOptions
  });
  return { deps, aliases: foundModuleAliases };
}

// src/bundle.ts
var import_bundle_n_require = require("bundle-n-require");
async function bundle(filepath, cwd) {
  const { mod: config, dependencies } = await (0, import_bundle_n_require.bundleNRequire)(filepath, {
    cwd,
    interopDefault: true
  });
  return { config: config?.default ?? config, dependencies };
}

// src/merge-config.ts
var import_merge_anything = require("merge-anything");

// src/utils.ts
var isObject = (value) => {
  return Object.prototype.toString.call(value) === "[object Object]";
};
function mergeWith(target, ...sources) {
  const customizer = sources.pop();
  for (const source of sources) {
    for (const key in source) {
      const merged = customizer(target[key], source[key]);
      if (merged === void 0) {
        if (isObject(target[key]) && isObject(source[key])) {
          target[key] = mergeWith({}, target[key], source[key], customizer);
        } else {
          target[key] = source[key];
        }
      } else {
        target[key] = merged;
      }
    }
  }
  return target;
}
function assign(target, ...sources) {
  for (const source of sources) {
    for (const key in source) {
      if (!target?.hasOwnProperty?.(key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}

// src/merge-config.ts
function getExtends(items) {
  return items.reduce((merged, { extend }) => {
    if (!extend)
      return merged;
    return mergeWith(merged, extend, (originalValue, newValue) => {
      if (newValue === void 0) {
        return originalValue ?? [];
      }
      if (originalValue === void 0) {
        return [newValue];
      }
      if (Array.isArray(originalValue)) {
        return [newValue, ...originalValue];
      }
      return [newValue, originalValue];
    });
  }, {});
}
function mergeRecords(records) {
  return {
    ...records.reduce((acc, record) => assign(acc, record), {}),
    extend: getExtends(records)
  };
}
function mergeExtensions(records) {
  const { extend = [], ...restProps } = mergeRecords(records);
  return mergeWith(restProps, extend, (obj, extensions) => {
    return (0, import_merge_anything.mergeAndConcat)({}, obj, ...extensions);
  });
}
var isEmptyObject = (obj) => typeof obj === "object" && Object.keys(obj).length === 0;
var compact = (obj) => {
  return Object.keys(obj).reduce((acc, key) => {
    if (obj[key] !== void 0 && !isEmptyObject(obj[key])) {
      acc[key] = obj[key];
    }
    return acc;
  }, {});
};
function mergeConfigs(configs2) {
  const mergedResult = assign(
    {
      conditions: mergeExtensions(configs2.map((config) => config.conditions ?? {})),
      theme: mergeExtensions(configs2.map((config) => config.theme ?? {})),
      patterns: mergeExtensions(configs2.map((config) => config.patterns ?? {})),
      utilities: mergeExtensions(configs2.map((config) => config.utilities ?? {})),
      globalCss: mergeExtensions(configs2.map((config) => config.globalCss ?? {})),
      staticCss: mergeExtensions(configs2.map((config) => config.staticCss ?? {}))
    },
    ...configs2
  );
  return compact(mergedResult);
}

// src/get-resolved-config.ts
async function getResolvedConfig(config, cwd) {
  const presets = config.presets ?? [];
  const configs2 = [];
  while (presets.length > 0) {
    const preset = await presets.shift();
    if (typeof preset === "string") {
      const presetModule = await bundle(preset, cwd);
      configs2.unshift(await presetModule.config);
      presets.unshift(...await presetModule.config.presets ?? []);
    } else {
      configs2.unshift(preset);
      presets.unshift(...preset.presets ?? []);
    }
  }
  configs2.unshift(config);
  return mergeConfigs(configs2);
}

// src/load-config.ts
var import_error = require("@pandacss/error");
var import_logger = require("@pandacss/logger");
var import_shared = require("@pandacss/shared");

// src/bundled-preset.ts
var import_preset_base = require("@pandacss/preset-base");
var import_preset_panda = require("@pandacss/preset-panda");
var bundledPresets = {
  "@pandacss/preset-base": import_preset_base.preset,
  "@pandacss/preset-panda": import_preset_panda.preset,
  "@pandacss/dev/presets": import_preset_panda.preset
};
var bundledPresetsNames = Object.keys(bundledPresets);
var isBundledPreset = (preset) => bundledPresetsNames.includes(preset);
var getBundledPreset = (preset) => {
  return typeof preset === "string" && isBundledPreset(preset) ? bundledPresets[preset] : void 0;
};

// src/load-config.ts
async function loadConfigFile(options) {
  const result = await bundleConfigFile(options);
  return resolveConfigFile(result, options.cwd);
}
async function resolveConfigFile(result, cwd) {
  const presets = /* @__PURE__ */ new Set();
  if (!result.config.eject) {
    presets.add(import_preset_base.preset);
  }
  if (result.config.presets) {
    result.config.presets.forEach((preset) => {
      presets.add(getBundledPreset(preset) ?? preset);
    });
  } else if (!result.config.eject) {
    presets.add(import_preset_panda.preset);
  }
  result.config.presets = Array.from(presets);
  const mergedConfig = await getResolvedConfig(result.config, cwd);
  const serialized = (0, import_shared.stringifyJson)(mergedConfig);
  const deserialize = () => (0, import_shared.parseJson)(serialized);
  return { ...result, serialized, deserialize, config: mergedConfig };
}
async function bundleConfigFile(options) {
  const { cwd, file } = options;
  const filePath = findConfigFile({ cwd, file });
  if (!filePath) {
    throw new import_error.ConfigNotFoundError();
  }
  import_logger.logger.debug("config:path", filePath);
  const result = await bundle(filePath, cwd);
  if (typeof result.config !== "object") {
    throw new import_error.ConfigError(`\u{1F4A5} Config must export or return an object.`);
  }
  return {
    ...result,
    config: result.config,
    path: filePath
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bundleConfigFile,
  convertTsPathsToRegexes,
  findConfigFile,
  getConfigDependencies,
  getResolvedConfig,
  loadConfigFile,
  mergeConfigs,
  resolveConfigFile
});
