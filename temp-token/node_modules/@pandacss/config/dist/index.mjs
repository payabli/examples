import {
  mergeConfigs
} from "./chunk-TCZHQ5GD.mjs";
import {
  resolveTsPathPattern
} from "./chunk-RPIVZP2I.mjs";

// src/find-config.ts
import findUp from "escalade/sync";
import { resolve } from "path";
var configs = [".ts", ".js", ".mts", ".mjs", ".cts", ".cjs"];
var pandaConfigRegex = new RegExp(`panda.config(${configs.join("|")})$`);
var isPandaConfig = (file) => pandaConfigRegex.test(file);
function findConfigFile({ cwd, file }) {
  if (file)
    return resolve(cwd, file);
  return findUp(cwd, (_dir, paths) => {
    return paths.find(isPandaConfig);
  });
}

// src/get-mod-deps.ts
import fs from "fs";
import path from "path";

// src/ts-config-paths.ts
import { resolve as resolve2 } from "path";
function convertTsPathsToRegexes(paths, baseUrl) {
  const sortedPatterns = Object.keys(paths).sort((a, b) => getPrefixLength(b) - getPrefixLength(a));
  const resolved = [];
  for (let pattern of sortedPatterns) {
    const relativePaths = paths[pattern];
    pattern = escapeStringRegexp(pattern).replace(/\*/g, "(.+)");
    resolved.push({
      pattern: new RegExp("^" + pattern + "$"),
      paths: relativePaths.map((relativePath) => resolve2(baseUrl, relativePath))
    });
  }
  return resolved;
}
function getPrefixLength(pattern) {
  const prefixLength = pattern.indexOf("*");
  return pattern.substr(0, prefixLength).length;
}
function escapeStringRegexp(string) {
  return string.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// src/get-mod-deps.ts
import ts from "typescript";
var jsExtensions = [".js", ".cjs", ".mjs"];
var jsResolutionOrder = ["", ".js", ".cjs", ".mjs", ".ts", ".cts", ".mts", ".jsx", ".tsx"];
var tsResolutionOrder = ["", ".ts", ".cts", ".mts", ".tsx", ".js", ".cjs", ".mjs", ".jsx"];
function resolveWithExtension(file, extensions) {
  for (const ext of extensions) {
    const full = `${file}${ext}`;
    if (fs.existsSync(full) && fs.statSync(full).isFile()) {
      return full;
    }
  }
  for (const ext of extensions) {
    const full = `${file}/index${ext}`;
    if (fs.existsSync(full)) {
      return full;
    }
  }
  return null;
}
var importRegex = /import[\s\S]*?['"](.{3,}?)['"]/gi;
var importFromRegex = /import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi;
var requireRegex = /require\(['"`](.+)['"`]\)/gi;
var exportRegex = /export[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi;
function getDeps(opts, fromAlias) {
  const { filename, seen } = opts;
  const { moduleResolution: _, ...compilerOptions } = opts.compilerOptions ?? {};
  const absoluteFile = resolveWithExtension(
    path.resolve(opts.cwd, filename),
    jsExtensions.includes(opts.ext) ? jsResolutionOrder : tsResolutionOrder
  );
  if (absoluteFile === null)
    return;
  if (fromAlias) {
    opts.foundModuleAliases.set(fromAlias, absoluteFile);
  }
  if (seen.size > 1 && seen.has(absoluteFile))
    return;
  seen.add(absoluteFile);
  const contents = fs.readFileSync(absoluteFile, "utf-8");
  const fileDeps = [
    ...contents.matchAll(importRegex),
    ...contents.matchAll(importFromRegex),
    ...contents.matchAll(requireRegex),
    ...contents.matchAll(exportRegex)
  ];
  if (!fileDeps.length)
    return;
  const nextOpts = {
    // Resolve new base for new imports/requires
    cwd: path.dirname(absoluteFile),
    ext: path.extname(absoluteFile),
    seen,
    baseUrl: opts.baseUrl,
    pathMappings: opts.pathMappings,
    foundModuleAliases: opts.foundModuleAliases
  };
  fileDeps.forEach((match) => {
    const mod = match[1];
    if (mod[0] === ".") {
      getDeps(Object.assign({}, nextOpts, { filename: mod }));
      return;
    }
    try {
      const found = ts.resolveModuleName(mod, absoluteFile, compilerOptions, ts.sys).resolvedModule;
      if (found && found.extension === ".ts") {
        getDeps(Object.assign({}, nextOpts, { filename: found.resolvedFileName }));
        return;
      }
      if (!opts.pathMappings)
        return;
      const filename2 = resolveTsPathPattern(opts.pathMappings, mod);
      if (!filename2)
        return;
      getDeps(Object.assign({}, nextOpts, { filename: filename2 }), mod);
    } catch (err) {
    }
  });
}
function getConfigDependencies(filePath, tsOptions = { pathMappings: [] }, compilerOptions) {
  if (filePath === null)
    return { deps: /* @__PURE__ */ new Set(), aliases: /* @__PURE__ */ new Map() };
  const foundModuleAliases = /* @__PURE__ */ new Map();
  const deps = /* @__PURE__ */ new Set();
  deps.add(filePath);
  getDeps({
    filename: filePath,
    ext: path.extname(filePath),
    cwd: path.dirname(filePath),
    seen: deps,
    baseUrl: tsOptions.baseUrl,
    pathMappings: tsOptions.pathMappings ?? [],
    foundModuleAliases,
    compilerOptions
  });
  return { deps, aliases: foundModuleAliases };
}

// src/bundle.ts
import { bundleNRequire } from "bundle-n-require";
async function bundle(filepath, cwd) {
  const { mod: config, dependencies } = await bundleNRequire(filepath, {
    cwd,
    interopDefault: true
  });
  return { config: config?.default ?? config, dependencies };
}

// src/get-resolved-config.ts
async function getResolvedConfig(config, cwd) {
  const presets = config.presets ?? [];
  const configs2 = [];
  while (presets.length > 0) {
    const preset = await presets.shift();
    if (typeof preset === "string") {
      const presetModule = await bundle(preset, cwd);
      configs2.unshift(await presetModule.config);
      presets.unshift(...await presetModule.config.presets ?? []);
    } else {
      configs2.unshift(preset);
      presets.unshift(...preset.presets ?? []);
    }
  }
  configs2.unshift(config);
  return mergeConfigs(configs2);
}

// src/load-config.ts
import { ConfigError, ConfigNotFoundError } from "@pandacss/error";
import { logger } from "@pandacss/logger";
import { parseJson, stringifyJson } from "@pandacss/shared";

// src/bundled-preset.ts
import { preset as presetBase } from "@pandacss/preset-base";
import { preset as presetPanda } from "@pandacss/preset-panda";
var bundledPresets = {
  "@pandacss/preset-base": presetBase,
  "@pandacss/preset-panda": presetPanda,
  "@pandacss/dev/presets": presetPanda
};
var bundledPresetsNames = Object.keys(bundledPresets);
var isBundledPreset = (preset) => bundledPresetsNames.includes(preset);
var getBundledPreset = (preset) => {
  return typeof preset === "string" && isBundledPreset(preset) ? bundledPresets[preset] : void 0;
};

// src/load-config.ts
async function loadConfigFile(options) {
  const result = await bundleConfigFile(options);
  return resolveConfigFile(result, options.cwd);
}
async function resolveConfigFile(result, cwd) {
  const presets = /* @__PURE__ */ new Set();
  if (!result.config.eject) {
    presets.add(presetBase);
  }
  if (result.config.presets) {
    result.config.presets.forEach((preset) => {
      presets.add(getBundledPreset(preset) ?? preset);
    });
  } else if (!result.config.eject) {
    presets.add(presetPanda);
  }
  result.config.presets = Array.from(presets);
  const mergedConfig = await getResolvedConfig(result.config, cwd);
  const serialized = stringifyJson(mergedConfig);
  const deserialize = () => parseJson(serialized);
  return { ...result, serialized, deserialize, config: mergedConfig };
}
async function bundleConfigFile(options) {
  const { cwd, file } = options;
  const filePath = findConfigFile({ cwd, file });
  if (!filePath) {
    throw new ConfigNotFoundError();
  }
  logger.debug("config:path", filePath);
  const result = await bundle(filePath, cwd);
  if (typeof result.config !== "object") {
    throw new ConfigError(`\u{1F4A5} Config must export or return an object.`);
  }
  return {
    ...result,
    config: result.config,
    path: filePath
  };
}
export {
  bundleConfigFile,
  convertTsPathsToRegexes,
  findConfigFile,
  getConfigDependencies,
  getResolvedConfig,
  loadConfigFile,
  mergeConfigs,
  resolveConfigFile
};
