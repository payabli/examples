"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ConditionError: () => ConditionError,
  ConfigError: () => ConfigError,
  ConfigNotFoundError: () => ConfigNotFoundError,
  NotFoundError: () => NotFoundError,
  PandaError: () => PandaError,
  TokenError: () => TokenError
});
module.exports = __toCommonJS(src_exports);
var PandaError = class extends Error {
  code;
  hint;
  constructor(code, message, opts) {
    super(message);
    this.code = `ERR_PANDA_${code}`;
    this.hint = opts?.hint;
  }
};
var TokenError = class extends PandaError {
  constructor(message) {
    super("INVALID_TOKEN", message);
  }
};
var ConfigNotFoundError = class extends PandaError {
  constructor() {
    const message = `Cannot find config file: panda.config.ts or panda.config.js/cjs/mjs/mts/cts. Did you forget to run \`panda init\`?`;
    super("NO_CONFIG", message);
  }
};
var ConfigError = class extends PandaError {
  constructor(message) {
    super("CONFIG_ERROR", message);
  }
};
var NotFoundError = class extends PandaError {
  constructor({ name, type }) {
    super("NOT_FOUND", `${type} not found: \`${name}\``);
  }
};
var ConditionError = class extends PandaError {
  constructor(message) {
    super("CONDITION", message);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConditionError,
  ConfigError,
  ConfigNotFoundError,
  NotFoundError,
  PandaError,
  TokenError
});
