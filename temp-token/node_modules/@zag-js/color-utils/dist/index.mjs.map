{"version":3,"sources":["../src/color.ts","../src/utils.ts","../src/rgb-color.ts","../src/hsl-color.ts","../src/hsb-color.ts","../src/parse-color.ts"],"sourcesContent":["import type { ColorType, ColorFormat, ColorChannel, ColorChannelRange, ColorAxes } from \"./types\"\n\nexport abstract class Color implements ColorType {\n  abstract toFormat(format: ColorFormat): ColorType\n  abstract toString(format: ColorFormat | \"css\"): string\n  abstract clone(): ColorType\n  abstract getChannelRange(channel: ColorChannel): ColorChannelRange\n  abstract getColorSpace(): ColorFormat\n  abstract getColorChannels(): [ColorChannel, ColorChannel, ColorChannel]\n\n  toHexInt(): number {\n    return this.toFormat(\"rgb\").toHexInt()\n  }\n\n  getChannelValue(channel: ColorChannel): number {\n    if (channel in this) {\n      return this[channel]\n    }\n\n    throw new Error(\"Unsupported color channel: \" + channel)\n  }\n\n  withChannelValue(channel: ColorChannel, value: number): ColorType {\n    if (channel in this) {\n      let clone = this.clone()\n      clone[channel] = value\n      return clone\n    }\n\n    throw new Error(\"Unsupported color channel: \" + channel)\n  }\n\n  getColorSpaceAxes(xyChannels: { xChannel?: ColorChannel; yChannel?: ColorChannel }): ColorAxes {\n    let { xChannel, yChannel } = xyChannels\n    let xCh = xChannel || this.getColorChannels().find((c) => c !== yChannel)\n    let yCh = yChannel || this.getColorChannels().find((c) => c !== xCh)\n    let zCh = this.getColorChannels().find((c) => c !== xCh && c !== yCh)\n    return { xChannel: xCh!, yChannel: yCh!, zChannel: zCh! }\n  }\n\n  isEqual(color: ColorType): boolean {\n    return this.toHexInt() === color.toHexInt() && this.getChannelValue(\"alpha\") === color.getChannelValue(\"alpha\")\n  }\n}\n","export function mod(n: number, m: number) {\n  return ((n % m) + m) % m\n}\n\nexport function toFixedNumber(num: number, digits: number) {\n  return Math.round(Math.pow(10, digits) * num) / Math.pow(10, digits)\n}\n\nexport function clampValue(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Color } from \"./color\"\nimport { HSBColor } from \"./hsb-color\"\nimport { HSLColor } from \"./hsl-color\"\nimport type { ColorChannel, ColorChannelRange, ColorFormat, ColorType } from \"./types\"\nimport { clampValue, toFixedNumber } from \"./utils\"\n\nexport class RGBColor extends Color {\n  constructor(\n    private red: number,\n    private green: number,\n    private blue: number,\n    private alpha: number,\n  ) {\n    super()\n  }\n\n  static parse(value: string) {\n    let colors: (number | undefined)[] = []\n\n    // matching #rgb, #rgba, #rrggbb, #rrggbbaa\n    if (/^#[\\da-f]+$/i.test(value) && [4, 5, 7, 9].includes(value.length)) {\n      const values = (value.length < 6 ? value.replace(/[^#]/gi, \"$&$&\") : value).slice(1).split(\"\")\n      while (values.length > 0) {\n        colors.push(parseInt(values.splice(0, 2).join(\"\"), 16))\n      }\n      colors[3] = colors[3] !== undefined ? colors[3] / 255 : undefined\n    }\n\n    // matching rgb(rrr, ggg, bbb), rgba(rrr, ggg, bbb, 0.a)\n    const match = value.match(/^rgba?\\((.*)\\)$/)\n\n    if (match?.[1]) {\n      colors = match[1]\n        .split(\",\")\n        .map((value) => Number(value.trim()))\n        .map((num, i) => clampValue(num, 0, i < 3 ? 255 : 1))\n    }\n\n    //@ts-expect-error\n    return colors.length < 3 ? undefined : new RGBColor(colors[0], colors[1], colors[2], colors[3] ?? 1)\n  }\n\n  toString(format: ColorFormat | \"css\") {\n    switch (format) {\n      case \"hex\":\n        return (\n          \"#\" +\n          (\n            this.red.toString(16).padStart(2, \"0\") +\n            this.green.toString(16).padStart(2, \"0\") +\n            this.blue.toString(16).padStart(2, \"0\")\n          ).toUpperCase()\n        )\n      case \"hexa\":\n        return (\n          \"#\" +\n          (\n            this.red.toString(16).padStart(2, \"0\") +\n            this.green.toString(16).padStart(2, \"0\") +\n            this.blue.toString(16).padStart(2, \"0\") +\n            Math.round(this.alpha * 255)\n              .toString(16)\n              .padStart(2, \"0\")\n          ).toUpperCase()\n        )\n      case \"rgb\":\n        return `rgb(${this.red}, ${this.green}, ${this.blue})`\n      case \"css\":\n      case \"rgba\":\n        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`\n      default:\n        return this.toFormat(format).toString(format)\n    }\n  }\n\n  toFormat(format: ColorFormat): ColorType {\n    switch (format) {\n      case \"hex\":\n      case \"hexa\":\n      case \"rgb\":\n      case \"rgba\":\n        return this\n      case \"hsb\":\n      case \"hsba\":\n        return this.toHSB()\n      case \"hsl\":\n      case \"hsla\":\n        return this.toHSL()\n      default:\n        throw new Error(\"Unsupported color conversion: rgb -> \" + format)\n    }\n  }\n\n  toHexInt(): number {\n    return (this.red << 16) | (this.green << 8) | this.blue\n  }\n\n  /**\n   * Converts an RGB color value to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): ColorType {\n    const red = this.red / 255\n    const green = this.green / 255\n    const blue = this.blue / 255\n    const min = Math.min(red, green, blue)\n    const brightness = Math.max(red, green, blue)\n    const chroma = brightness - min\n    const saturation = brightness === 0 ? 0 : chroma / brightness\n    let hue = 0 // achromatic\n\n    if (chroma !== 0) {\n      switch (brightness) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0)\n          break\n        case green:\n          hue = (blue - red) / chroma + 2\n          break\n        case blue:\n          hue = (red - green) / chroma + 4\n          break\n      }\n\n      hue /= 6\n    }\n\n    return new HSBColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha,\n    )\n  }\n\n  /**\n   * Converts an RGB color value to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): ColorType {\n    const red = this.red / 255\n    const green = this.green / 255\n    const blue = this.blue / 255\n    const min = Math.min(red, green, blue)\n    const max = Math.max(red, green, blue)\n    const lightness = (max + min) / 2\n    const chroma = max - min\n\n    let hue = -1\n    let saturation = -1\n\n    if (chroma === 0) {\n      hue = saturation = 0 // achromatic\n    } else {\n      saturation = chroma / (lightness < 0.5 ? max + min : 2 - max - min)\n\n      switch (max) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0)\n          break\n        case green:\n          hue = (blue - red) / chroma + 2\n          break\n        case blue:\n          hue = (red - green) / chroma + 4\n          break\n      }\n\n      hue /= 6\n    }\n\n    return new HSLColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(lightness * 100, 2),\n      this.alpha,\n    )\n  }\n\n  clone(): ColorType {\n    return new RGBColor(this.red, this.green, this.blue, this.alpha)\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case \"red\":\n      case \"green\":\n      case \"blue\":\n        return { minValue: 0x0, maxValue: 0xff, step: 0x1, pageSize: 0x11 }\n      case \"alpha\":\n        return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 }\n      default:\n        throw new Error(\"Unknown color channel: \" + channel)\n    }\n  }\n\n  getColorSpace(): ColorFormat {\n    return \"rgb\"\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = [\"red\", \"green\", \"blue\"]\n\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return RGBColor.colorChannels\n  }\n}\n","import { Color } from \"./color\"\nimport { HSBColor } from \"./hsb-color\"\nimport { RGBColor } from \"./rgb-color\"\nimport type { ColorChannel, ColorChannelRange, ColorFormat, ColorType } from \"./types\"\nimport { clampValue, mod, toFixedNumber } from \"./utils\"\n\nexport const HSL_REGEX =\n  /hsl\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsla\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/\n\nexport class HSLColor extends Color {\n  constructor(\n    private hue: number,\n    private saturation: number,\n    private lightness: number,\n    private alpha: number,\n  ) {\n    super()\n  }\n\n  static parse(value: string): HSLColor | void {\n    let m: RegExpMatchArray | null\n    if ((m = value.match(HSL_REGEX))) {\n      const [h, s, l, a] = (m[1] ?? m[2]).split(\",\").map((n) => Number(n.trim().replace(\"%\", \"\")))\n      return new HSLColor(mod(h, 360), clampValue(s, 0, 100), clampValue(l, 0, 100), clampValue(a ?? 1, 0, 1))\n    }\n  }\n\n  toString(format: ColorFormat | \"css\") {\n    switch (format) {\n      case \"hex\":\n        return this.toRGB().toString(\"hex\")\n      case \"hexa\":\n        return this.toRGB().toString(\"hexa\")\n      case \"hsl\":\n        return `hsl(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%)`\n      case \"css\":\n      case \"hsla\":\n        return `hsla(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%, ${\n          this.alpha\n        })`\n      default:\n        return this.toFormat(format).toString(format)\n    }\n  }\n  toFormat(format: ColorFormat): ColorType {\n    switch (format) {\n      case \"hsl\":\n      case \"hsla\":\n        return this\n      case \"hsb\":\n      case \"hsba\":\n        return this.toHSB()\n      case \"rgb\":\n      case \"rgba\":\n        return this.toRGB()\n      default:\n        throw new Error(\"Unsupported color conversion: hsl -> \" + format)\n    }\n  }\n\n  /**\n   * Converts a HSL color to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): ColorType {\n    let saturation = this.saturation / 100\n    let lightness = this.lightness / 100\n    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness)\n    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness)\n    return new HSBColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha,\n    )\n  }\n\n  /**\n   * Converts a HSL color to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): ColorType {\n    let hue = this.hue\n    let saturation = this.saturation / 100\n    let lightness = this.lightness / 100\n    let a = saturation * Math.min(lightness, 1 - lightness)\n    let fn = (n: number, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)\n    return new RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), this.alpha)\n  }\n\n  clone(): ColorType {\n    return new HSLColor(this.hue, this.saturation, this.lightness, this.alpha)\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case \"hue\":\n        return { minValue: 0, maxValue: 360, step: 1, pageSize: 15 }\n      case \"saturation\":\n      case \"lightness\":\n        return { minValue: 0, maxValue: 100, step: 1, pageSize: 10 }\n      case \"alpha\":\n        return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 }\n      default:\n        throw new Error(\"Unknown color channel: \" + channel)\n    }\n  }\n\n  getColorSpace(): ColorFormat {\n    return \"hsl\"\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = [\"hue\", \"saturation\", \"lightness\"]\n\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSLColor.colorChannels\n  }\n}\n","import { Color } from \"./color\"\nimport { HSLColor } from \"./hsl-color\"\nimport { RGBColor } from \"./rgb-color\"\nimport type { ColorChannel, ColorChannelRange, ColorFormat, ColorType } from \"./types\"\nimport { clampValue, mod, toFixedNumber } from \"./utils\"\n\nconst HSB_REGEX =\n  /hsb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/\n\nexport class HSBColor extends Color {\n  constructor(\n    private hue: number,\n    private saturation: number,\n    private brightness: number,\n    private alpha: number,\n  ) {\n    super()\n  }\n\n  static parse(value: string): HSBColor | void {\n    let m: RegExpMatchArray | null\n    if ((m = value.match(HSB_REGEX))) {\n      const [h, s, b, a] = (m[1] ?? m[2]).split(\",\").map((n) => Number(n.trim().replace(\"%\", \"\")))\n      return new HSBColor(mod(h, 360), clampValue(s, 0, 100), clampValue(b, 0, 100), clampValue(a ?? 1, 0, 1))\n    }\n  }\n\n  toString(format: ColorFormat | \"css\") {\n    switch (format) {\n      case \"css\":\n        return this.toHSL().toString(\"css\")\n      case \"hex\":\n        return this.toRGB().toString(\"hex\")\n      case \"hexa\":\n        return this.toRGB().toString(\"hexa\")\n      case \"hsb\":\n        return `hsb(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%)`\n      case \"hsba\":\n        return `hsba(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%, ${\n          this.alpha\n        })`\n      default:\n        return this.toFormat(format).toString(format)\n    }\n  }\n\n  toFormat(format: ColorFormat): ColorType {\n    switch (format) {\n      case \"hsb\":\n      case \"hsba\":\n        return this\n      case \"hsl\":\n      case \"hsla\":\n        return this.toHSL()\n      case \"rgb\":\n      case \"rgba\":\n        return this.toRGB()\n      default:\n        throw new Error(\"Unsupported color conversion: hsb -> \" + format)\n    }\n  }\n\n  /**\n   * Converts a HSB color to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): ColorType {\n    let saturation = this.saturation / 100\n    let brightness = this.brightness / 100\n    let lightness = brightness * (1 - saturation / 2)\n    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness)\n\n    return new HSLColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(lightness * 100, 2),\n      this.alpha,\n    )\n  }\n\n  /**\n   * Converts a HSV color value to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): ColorType {\n    let hue = this.hue\n    let saturation = this.saturation / 100\n    let brightness = this.brightness / 100\n\n    let fn = (n: number, k = (n + hue / 60) % 6) =>\n      brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0)\n\n    return new RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), this.alpha)\n  }\n\n  clone(): ColorType {\n    return new HSBColor(this.hue, this.saturation, this.brightness, this.alpha)\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case \"hue\":\n        return { minValue: 0, maxValue: 360, step: 1, pageSize: 15 }\n      case \"saturation\":\n      case \"brightness\":\n        return { minValue: 0, maxValue: 100, step: 1, pageSize: 10 }\n      case \"alpha\":\n        return { minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1 }\n      default:\n        throw new Error(\"Unknown color channel: \" + channel)\n    }\n  }\n\n  getColorSpace(): ColorFormat {\n    return \"hsb\"\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = [\"hue\", \"saturation\", \"brightness\"]\n\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSBColor.colorChannels\n  }\n}\n","import { HSBColor } from \"./hsb-color\"\nimport { HSLColor } from \"./hsl-color\"\nimport { RGBColor } from \"./rgb-color\"\nimport type { ColorType } from \"./types\"\n\nexport function parseColor(value: string): ColorType {\n  let result = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value)\n  if (!result) {\n    throw new Error(\"Invalid color value: \" + value)\n  }\n  return result\n}\n\nexport function normalizeColor(v: string | ColorType) {\n  if (typeof v === \"string\") {\n    return parseColor(v)\n  } else {\n    return v\n  }\n}\n"],"mappings":"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","names":["value"]}