type ColorFormat = "hex" | "hexa" | "rgb" | "rgba" | "hsl" | "hsla" | "hsb" | "hsba";
type ColorChannel = "hue" | "saturation" | "brightness" | "lightness" | "red" | "green" | "blue" | "alpha";
type ColorAxes = {
    xChannel: ColorChannel;
    yChannel: ColorChannel;
    zChannel: ColorChannel;
};
interface ColorChannelRange {
    /** The minimum value of the color channel. */
    minValue: number;
    /** The maximum value of the color channel. */
    maxValue: number;
    /** The step value of the color channel, used when incrementing and decrementing. */
    step: number;
    /** The page step value of the color channel, used when incrementing and decrementing. */
    pageSize: number;
}
interface ColorType {
    /** Converts the color to the given color format, and returns a new Color object. */
    toFormat(format: ColorFormat): ColorType;
    /** Converts the color to a string in the given format. */
    toString(format: ColorFormat | "css"): string;
    /** Converts the color to hex, and returns an integer representation. */
    toHexInt(): number;
    /**
     * Returns the numeric value for a given channel.
     * Throws an error if the channel is unsupported in the current color format.
     */
    getChannelValue(channel: ColorChannel): number;
    /**
     * Sets the numeric value for a given channel, and returns a new Color object.
     * Throws an error if the channel is unsupported in the current color format.
     */
    withChannelValue(channel: ColorChannel, value: number): ColorType;
    /**
     * Returns the minimum, maximum, and step values for a given channel.
     */
    getChannelRange(channel: ColorChannel): ColorChannelRange;
    /**
     * Returns the color space, 'rgb', 'hsb' or 'hsl', for the current color.
     */
    getColorSpace(): ColorFormat;
    /**
     * Returns the color space axes, xChannel, yChannel, zChannel.
     */
    getColorSpaceAxes(xyChannels: {
        xChannel?: ColorChannel;
        yChannel?: ColorChannel;
    }): ColorAxes;
    /**
     * Returns an array of the color channels within the current color space space.
     */
    getColorChannels(): [ColorChannel, ColorChannel, ColorChannel];
    /**
     * Returns a new Color object with the same values as the current color.
     */
    clone(): ColorType;
    /**
     * Whether the color is equal to another color.
     */
    isEqual(color: ColorType): boolean;
}

declare abstract class Color implements ColorType {
    abstract toFormat(format: ColorFormat): ColorType;
    abstract toString(format: ColorFormat | "css"): string;
    abstract clone(): ColorType;
    abstract getChannelRange(channel: ColorChannel): ColorChannelRange;
    abstract getColorSpace(): ColorFormat;
    abstract getColorChannels(): [ColorChannel, ColorChannel, ColorChannel];
    toHexInt(): number;
    getChannelValue(channel: ColorChannel): number;
    withChannelValue(channel: ColorChannel, value: number): ColorType;
    getColorSpaceAxes(xyChannels: {
        xChannel?: ColorChannel;
        yChannel?: ColorChannel;
    }): ColorAxes;
    isEqual(color: ColorType): boolean;
}

declare function parseColor(value: string): ColorType;
declare function normalizeColor(v: string | ColorType): ColorType;

export { Color, ColorAxes, ColorChannel, ColorChannelRange, ColorFormat, ColorType, normalizeColor, parseColor };
