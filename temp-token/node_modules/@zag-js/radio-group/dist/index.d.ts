import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "radio" | "radioLabel" | "radioControl" | "indicator">;

type ElementIds = Partial<{
    root: string;
    label: string;
    indicator: string;
    radio(value: string): string;
    radioLabel(value: string): string;
    radioControl(value: string): string;
    radioHiddenInput(value: string): string;
}>;
type PublicContext = DirectionProperty & CommonProperties & {
    /**
     * The ids of the elements in the radio. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The value of the checked radio
     */
    value: string | null;
    /**
     * The name of the input fields in the radio
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The associate form of the underlying input.
     */
    form?: string;
    /**
     * If `true`, the radio group will be disabled
     */
    disabled?: boolean;
    /**
     * Function called once a radio is checked
     * @param value the value of the checked radio
     */
    onChange?(details: {
        value: string;
    }): void;
    /**
     * Orientation of the radio group
     */
    orientation?: "horizontal" | "vertical";
};
type PrivateContext = Context<{}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * Whether the radio group is disabled
     */
    isDisabled: boolean;
}>;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "idle";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type RadioProps = {
    value: string;
    /**
     * If `true`, the radio will be disabled
     */
    disabled?: boolean;
    /**
     * If `true`, the radio is marked as invalid.
     */
    invalid?: boolean;
};
type RadioState = {
    isInteractive: boolean;
    isInvalid: boolean;
    isDisabled: boolean;
    isChecked: boolean;
    isFocused: boolean;
    isHovered: boolean;
    isActive: boolean;
};
type MachineApi<T extends PropTypes = PropTypes> = {
    /**
     * The current value of the radio group
     */
    value: string | null;
    /**
     * Function to set the value of the radio group
     */
    setValue(value: string): void;
    /**
     * Function to clear the value of the radio group
     */
    clearValue(): void;
    /**
     * Function to focus the radio group
     */
    focus: () => void;
    /**
     * Returns the state details of a radio input
     */
    getRadioState(props: RadioProps): RadioState;
    rootProps: T["element"];
    labelProps: T["element"];
    getRadioProps(props: RadioProps): T["label"];
    getRadioLabelProps(props: RadioProps): T["element"];
    getRadioControlProps(props: RadioProps): T["element"];
    getRadioHiddenInputProps(props: RadioProps): T["input"];
    indicatorProps: T["element"];
};

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, UserDefinedContext as Context, RadioProps, RadioState, anatomy, connect, machine };
