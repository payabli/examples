import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "image" | "fallback">;

type PublicContext = CommonProperties & {
    onLoad?: () => void;
    onError?: () => void;
};
type PrivateContext = Context<{}>;
type ComputedContext = Readonly<{}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "loading" | "error" | "loaded";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type MachineApi<T extends PropTypes = PropTypes> = {
    /**
     * Whether the image is loaded.
     */
    isLoaded: boolean;
    /**
     * Whether the fallback is shown.
     */
    showFallback: boolean;
    /**
     * Function to set new src.
     */
    setSrc(src: string): void;
    /**
     * Function to set loaded state.
     */
    setLoaded(): void;
    /**
     * Function to set error state.
     */
    setError(): void;
    rootProps: T["element"];
    imageProps: T["img"];
    fallbackProps: T["element"];
};

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, UserDefinedContext as Context, anatomy, connect, machine };
