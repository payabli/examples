"use client"

// src/index.ts
import { mergeProps } from "@zag-js/core";

// src/normalize-props.ts
import { createNormalizer } from "@zag-js/types";
var normalizeProps = createNormalizer((v) => v);

// src/portal.ts
import { createElement, useReducer, useRef } from "react";
import { createPortal } from "react-dom";

// src/use-layout-effect.ts
import { useEffect, useLayoutEffect } from "react";
var useSafeLayoutEffect = typeof document !== "undefined" ? useLayoutEffect : useEffect;

// src/portal.ts
function Portal(props) {
  const { children, target } = props;
  const node = useRef(null);
  const portalNode = useRef(null);
  const [, forceUpdate] = useReducer((s) => s + 1, 0);
  useSafeLayoutEffect(() => {
    if (!node.current)
      return;
    const doc = node.current.ownerDocument;
    portalNode.current = doc.createElement("zag-portal");
    doc.body.appendChild(portalNode.current);
    forceUpdate();
    return () => {
      if (portalNode.current) {
        doc.body.removeChild(portalNode.current);
      }
    };
  }, []);
  const targetNode = target?.current ?? portalNode.current;
  if (targetNode) {
    return createPortal(children, targetNode);
  }
  return createElement("span", { ref: node });
}

// src/use-snapshot.ts
import { snapshot, subscribe } from "@zag-js/store";
import { createProxy as createProxyToCompare, isChanged } from "proxy-compare";
import ReactExports, { useCallback, useEffect as useEffect2, useMemo, useRef as useRef2, useSyncExternalStore } from "react";
var { use } = ReactExports;
var targetCache = /* @__PURE__ */ new WeakMap();
function useSnapshot(proxyObject, options) {
  const notifyInSync = options?.sync;
  const lastSnapshot = useRef2();
  const lastAffected = useRef2();
  const currSnapshot = useSyncExternalStore(
    useCallback(
      (callback) => {
        const unsub = subscribe(proxyObject, callback, notifyInSync);
        callback();
        return unsub;
      },
      [proxyObject, notifyInSync]
    ),
    () => {
      const nextSnapshot = snapshot(proxyObject, use);
      try {
        if (lastSnapshot.current && lastAffected.current && !isChanged(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => snapshot(proxyObject, use)
  );
  const currAffected = /* @__PURE__ */ new WeakMap();
  useEffect2(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  const proxyCache = useMemo(() => /* @__PURE__ */ new WeakMap(), []);
  return createProxyToCompare(currSnapshot, currAffected, proxyCache, targetCache);
}

// src/use-actor.ts
function useActor(service) {
  const current = useSnapshot(service.state);
  const typedState = current;
  return [typedState, service.send];
}

// src/use-constant.ts
import { useRef as useRef3 } from "react";
function useConstant(fn) {
  const ref = useRef3();
  if (!ref.current)
    ref.current = { v: fn() };
  return ref.current.v;
}

// src/use-machine.ts
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = useConstant(() => {
    const instance = typeof machine === "function" ? machine() : machine;
    return context ? instance.withContext(context) : instance;
  });
  useSafeLayoutEffect(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    return () => {
      service.stop();
    };
  }, []);
  service.setOptions({ actions });
  service.setContext(context);
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = useSnapshot(service.state);
  const typedState = state;
  return [typedState, service.send, service];
}
export {
  Portal,
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService
};
//# sourceMappingURL=index.mjs.map