"use client"
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Portal: () => Portal,
  mergeProps: () => import_core.mergeProps,
  normalizeProps: () => normalizeProps,
  useActor: () => useActor,
  useMachine: () => useMachine,
  useService: () => useService
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@zag-js/core");

// src/normalize-props.ts
var import_types = require("@zag-js/types");
var normalizeProps = (0, import_types.createNormalizer)((v) => v);

// src/portal.ts
var import_react2 = require("react");
var import_react_dom = require("react-dom");

// src/use-layout-effect.ts
var import_react = require("react");
var useSafeLayoutEffect = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;

// src/portal.ts
function Portal(props) {
  const { children, target } = props;
  const node = (0, import_react2.useRef)(null);
  const portalNode = (0, import_react2.useRef)(null);
  const [, forceUpdate] = (0, import_react2.useReducer)((s) => s + 1, 0);
  useSafeLayoutEffect(() => {
    if (!node.current)
      return;
    const doc = node.current.ownerDocument;
    portalNode.current = doc.createElement("zag-portal");
    doc.body.appendChild(portalNode.current);
    forceUpdate();
    return () => {
      if (portalNode.current) {
        doc.body.removeChild(portalNode.current);
      }
    };
  }, []);
  const targetNode = target?.current ?? portalNode.current;
  if (targetNode) {
    return (0, import_react_dom.createPortal)(children, targetNode);
  }
  return (0, import_react2.createElement)("span", { ref: node });
}

// src/use-snapshot.ts
var import_store = require("@zag-js/store");
var import_proxy_compare = require("proxy-compare");
var import_react3 = __toESM(require("react"));
var { use } = import_react3.default;
var targetCache = /* @__PURE__ */ new WeakMap();
function useSnapshot(proxyObject, options) {
  const notifyInSync = options?.sync;
  const lastSnapshot = (0, import_react3.useRef)();
  const lastAffected = (0, import_react3.useRef)();
  const currSnapshot = (0, import_react3.useSyncExternalStore)(
    (0, import_react3.useCallback)(
      (callback) => {
        const unsub = (0, import_store.subscribe)(proxyObject, callback, notifyInSync);
        callback();
        return unsub;
      },
      [proxyObject, notifyInSync]
    ),
    () => {
      const nextSnapshot = (0, import_store.snapshot)(proxyObject, use);
      try {
        if (lastSnapshot.current && lastAffected.current && !(0, import_proxy_compare.isChanged)(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => (0, import_store.snapshot)(proxyObject, use)
  );
  const currAffected = /* @__PURE__ */ new WeakMap();
  (0, import_react3.useEffect)(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  const proxyCache = (0, import_react3.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  return (0, import_proxy_compare.createProxy)(currSnapshot, currAffected, proxyCache, targetCache);
}

// src/use-actor.ts
function useActor(service) {
  const current = useSnapshot(service.state);
  const typedState = current;
  return [typedState, service.send];
}

// src/use-constant.ts
var import_react4 = require("react");
function useConstant(fn) {
  const ref = (0, import_react4.useRef)();
  if (!ref.current)
    ref.current = { v: fn() };
  return ref.current.v;
}

// src/use-machine.ts
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = useConstant(() => {
    const instance = typeof machine === "function" ? machine() : machine;
    return context ? instance.withContext(context) : instance;
  });
  useSafeLayoutEffect(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    return () => {
      service.stop();
    };
  }, []);
  service.setOptions({ actions });
  service.setContext(context);
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = useSnapshot(service.state);
  const typedState = state;
  return [typedState, service.send, service];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Portal,
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService
});
//# sourceMappingURL=index.js.map