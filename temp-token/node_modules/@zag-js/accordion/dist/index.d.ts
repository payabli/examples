import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "item" | "trigger" | "content">;

type ElementIds = Partial<{
    root: string;
    item(value: string): string;
    content(value: string): string;
    trigger(value: string): string;
}>;
type ChangeDetails = {
    value: string[];
};
type FocusChangeDetails = {
    value: string | null;
};
type PublicContext = DirectionProperty & CommonProperties & {
    /**
     * The ids of the elements in the accordion. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Whether multple accordion items can be open at the same time.
     * @default false
     */
    multiple?: boolean;
    /**
     * Whether an accordion item can be collapsed after it has been opened.
     * @default false
     */
    collapsible?: boolean;
    /**
     * The `id` of the accordion item that is currently being opened.
     */
    value: string[];
    /**
     * Whether the accordion items are disabled
     */
    disabled?: boolean;
    /**
     * The callback fired when the state of opened/closed accordion items changes.
     */
    onChange?: (details: ChangeDetails) => void;
    /**
     * The callback fired when the focused accordion item changes.
     */
    onFocusChange?: (details: FocusChangeDetails) => void;
    /**
     *  The orientation of the accordion items.
     */
    orientation?: "horizontal" | "vertical";
};
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the accordion items are horizontal.
     */
    isHorizontal: boolean;
}>;
type PrivateContext = Context<{}>;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "idle" | "focused";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type ItemProps = {
    value: string;
    disabled?: boolean;
};
type ItemState = {
    isOpen: boolean;
    isFocused: boolean;
    isDisabled: boolean;
};
type MachineApi<T extends PropTypes = PropTypes> = {
    /**
     * The value of the focused accordion item.
     */
    focusedValue: string | null;
    /**
     * The value of the accordion
     */
    value: string[];
    /**
     * Sets the value of the accordion.
     */
    setValue: (value: string[]) => void;
    /**
     * Gets the state of an accordion item.
     */
    getItemState: (props: ItemProps) => ItemState;
    rootProps: T["element"];
    getItemProps(props: ItemProps): T["element"];
    getContentProps(props: ItemProps): T["element"];
    getTriggerProps(props: ItemProps): T["button"];
};

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, UserDefinedContext as Context, ItemProps, ItemState, anatomy, connect, machine };
