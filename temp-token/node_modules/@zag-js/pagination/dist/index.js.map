{"version":3,"sources":["../src/index.ts","../src/pagination.anatomy.ts","../src/pagination.connect.ts","../src/pagination.dom.ts","../src/pagination.utils.ts","../src/pagination.machine.ts"],"sourcesContent":["export { anatomy } from \"./pagination.anatomy\"\nexport { connect } from \"./pagination.connect\"\nexport { machine } from \"./pagination.machine\"\nexport type {\n  UserDefinedContext as Context,\n  EllipsisProps,\n  PageTriggerProps,\n  MachineApi as Api,\n} from \"./pagination.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"pagination\").parts(\n  \"root\",\n  \"pageTrigger\",\n  \"ellipsis\",\n  \"prevPageTrigger\",\n  \"nextPageTrigger\",\n)\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./pagination.anatomy\"\nimport { dom } from \"./pagination.dom\"\nimport type { EllipsisProps, PageTriggerProps, MachineApi, Send, State } from \"./pagination.types\"\nimport { utils } from \"./pagination.utils\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const totalPages = state.context.totalPages\n  const page = state.context.page\n  const translations = state.context.translations\n\n  const previousPage = state.context.previousPage\n  const nextPage = state.context.nextPage\n  const pageRange = state.context.pageRange\n\n  const type = state.context.type\n  const isButton = type === \"button\"\n\n  const isFirstPage = page === 1\n  const isLastPage = page === totalPages\n\n  return {\n    page,\n    totalPages,\n    pages: utils.getRange(state.context),\n    previousPage,\n    nextPage,\n    pageRange,\n    isFirstPage,\n    isLastPage,\n\n    slice<T>(data: T[]) {\n      return data.slice(pageRange.start, pageRange.end)\n    },\n\n    setCount(count: number) {\n      send({ type: \"SET_COUNT\", count })\n    },\n\n    setPageSize(size: number) {\n      send({ type: \"SET_PAGE_SIZE\", size })\n    },\n\n    setPage(page: number) {\n      send({ type: \"SET_PAGE\", page })\n    },\n\n    rootProps: normalize.element({\n      id: dom.getRootId(state.context),\n      ...parts.root.attrs,\n      \"aria-label\": translations.rootLabel,\n    }),\n\n    getEllipsisProps(props: EllipsisProps) {\n      return normalize.element({\n        id: dom.getEllipsisId(state.context, props.index),\n        ...parts.ellipsis.attrs,\n      })\n    },\n\n    getPageTriggerProps(page: PageTriggerProps) {\n      const index = page.value\n      const isCurrentPage = index === state.context.page\n\n      return normalize.element({\n        id: dom.getPageTriggerId(state.context, index),\n        ...parts.pageTrigger.attrs,\n        \"data-selected\": dataAttr(isCurrentPage),\n        \"aria-current\": isCurrentPage ? \"page\" : undefined,\n        \"aria-label\": translations.pageTriggerLabel?.({ page: index, totalPages }),\n        onClick() {\n          send({ type: \"SET_PAGE\", page: index })\n        },\n        ...(isButton && { type: \"button\" }),\n      })\n    },\n\n    prevPageTriggerProps: normalize.element({\n      id: dom.getPrevPageTriggerId(state.context),\n      ...parts.prevPageTrigger.attrs,\n      \"data-disabled\": dataAttr(isFirstPage),\n      \"aria-label\": translations.prevPageTriggerLabel,\n      onClick() {\n        send({ type: \"PREVIOUS_PAGE\" })\n      },\n      ...(isButton && { disabled: isFirstPage, type: \"button\" }),\n    }),\n\n    nextPageTriggerProps: normalize.element({\n      id: dom.getNextPageTriggerId(state.context),\n      ...parts.nextPageTrigger.attrs,\n      \"data-disabled\": dataAttr(isLastPage),\n      \"aria-label\": translations.nextPageTriggerLabel,\n      onClick() {\n        send({ type: \"NEXT_PAGE\" })\n      },\n      ...(isButton && { disabled: isLastPage, type: \"button\" }),\n    }),\n  }\n}\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./pagination.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `pagination:${ctx.id}`,\n  getPrevPageTriggerId: (ctx: Ctx) => ctx.ids?.prevPageTrigger ?? `pagination:${ctx.id}:prev`,\n  getNextPageTriggerId: (ctx: Ctx) => ctx.ids?.nextPageTrigger ?? `pagination:${ctx.id}:next`,\n  getEllipsisId: (ctx: Ctx, index: number) => ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`,\n  getPageTriggerId: (ctx: Ctx, page: number) => ctx.ids?.pageTrigger?.(page) ?? `pagination:${ctx.id}:item:${page}`,\n})\n","import type { MachineContext as Ctx, PaginationRange } from \"./pagination.types\"\n\nexport const utils = {\n  range: (start: number, end: number) => {\n    let length = end - start + 1\n    return Array.from({ length }, (_, idx) => idx + start)\n  },\n  transform: (items: (string | number)[]): PaginationRange => {\n    return items.map((value) => {\n      if (typeof value === \"number\") return { type: \"page\", value }\n      return { type: \"ellipsis\" }\n    })\n  },\n  getRange: (ctx: Omit<Ctx, \"items\">) => {\n    const totalPageNumbers = ctx.siblingCount + 5\n    if (totalPageNumbers >= ctx.totalPages) return utils.transform(utils.range(1, ctx.totalPages))\n\n    const ELLIPSIS = \"ellipsis\"\n\n    const leftSiblingIndex = Math.max(ctx.page - ctx.siblingCount, 1)\n    const rightSiblingIndex = Math.min(ctx.page + ctx.siblingCount, ctx.totalPages)\n\n    const showLeftEllipsis = leftSiblingIndex > 2\n    const showRightEllipsis = rightSiblingIndex < ctx.totalPages - 2\n\n    const firstPageIndex = 1\n    const lastPageIndex = ctx.totalPages\n\n    if (!showLeftEllipsis && showRightEllipsis) {\n      let leftItemCount = 3 + 2 * ctx.siblingCount\n      let leftRange = utils.range(1, leftItemCount)\n\n      return utils.transform([...leftRange, ELLIPSIS, ctx.totalPages])\n    }\n\n    if (showLeftEllipsis && !showRightEllipsis) {\n      let rightItemCount = 3 + 2 * ctx.siblingCount\n      let rightRange = utils.range(ctx.totalPages - rightItemCount + 1, ctx.totalPages)\n      return utils.transform([firstPageIndex, ELLIPSIS, ...rightRange])\n    }\n\n    if (showLeftEllipsis && showRightEllipsis) {\n      let middleRange = utils.range(leftSiblingIndex, rightSiblingIndex)\n      return utils.transform([firstPageIndex, ELLIPSIS, ...middleRange, ELLIPSIS, lastPageIndex])\n    }\n\n    return []\n  },\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./pagination.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"pagination\",\n      initial: \"idle\",\n      context: {\n        pageSize: 10,\n        siblingCount: 1,\n        page: 1,\n        type: \"button\",\n        translations: {\n          rootLabel: \"pagination\",\n          prevPageTriggerLabel: \"previous page\",\n          nextPageTriggerLabel: \"next page\",\n          pageTriggerLabel({ page, totalPages }) {\n            const isLastPage = totalPages > 1 && page === totalPages\n            return `${isLastPage ? \"last page, \" : \"\"}page ${page}`\n          },\n          ...ctx.translations,\n        },\n        ...ctx,\n      },\n\n      watch: {\n        pageSize: [\"setPageIfNeeded\"],\n      },\n\n      computed: {\n        totalPages: (ctx) => Math.ceil(ctx.count / ctx.pageSize),\n        previousPage: (ctx) => (ctx.page === 1 ? null : ctx.page - 1),\n        nextPage: (ctx) => (ctx.page === ctx.totalPages ? null : ctx.page + 1),\n        pageRange: (ctx) => {\n          const start = (ctx.page - 1) * ctx.pageSize\n          const end = start + ctx.pageSize\n          return { start, end }\n        },\n        isValidPage: (ctx) => ctx.page >= 1 && ctx.page <= ctx.totalPages,\n      },\n\n      on: {\n        SET_COUNT: [\n          {\n            guard: \"isValidCount\",\n            actions: [\"setCount\", \"goToFirstPage\"],\n          },\n          {\n            actions: \"setCount\",\n          },\n        ],\n        SET_PAGE: {\n          guard: \"isValidPage\",\n          actions: \"setPage\",\n        },\n        SET_PAGE_SIZE: {\n          actions: \"setPageSize\",\n        },\n        PREVIOUS_PAGE: {\n          guard: \"canGoToPrevPage\",\n          actions: \"goToPrevPage\",\n        },\n        NEXT_PAGE: {\n          guard: \"canGoToNextPage\",\n          actions: \"goToNextPage\",\n        },\n      },\n\n      states: {\n        idle: {},\n      },\n    },\n    {\n      guards: {\n        isValidPage: (ctx, evt) => evt.page >= 1 && evt.page <= ctx.totalPages,\n        isValidCount: (ctx, evt) => ctx.page > evt.count,\n        canGoToNextPage: (ctx) => ctx.page < ctx.totalPages,\n        canGoToPrevPage: (ctx) => ctx.page > 1,\n      },\n      actions: {\n        setCount(ctx, evt) {\n          ctx.count = evt.count\n        },\n        setPage(ctx, evt) {\n          ctx.page = evt.page\n        },\n        setPageSize(ctx, evt) {\n          ctx.pageSize = evt.size\n        },\n        goToFirstPage(ctx) {\n          set.page(ctx, 1)\n        },\n        goToPrevPage(ctx) {\n          set.page(ctx, ctx.page - 1)\n        },\n        goToNextPage(ctx) {\n          set.page(ctx, ctx.page + 1)\n        },\n        setPageIfNeeded(ctx, _evt) {\n          if (ctx.isValidPage) return\n          set.page(ctx, 1)\n        },\n      },\n    },\n  )\n}\n\nconst set = {\n  page: (ctx: MachineContext, value: number) => {\n    if (isEqual(ctx.page, value)) return\n    ctx.page = value\n    ctx.onChange?.({ page: ctx.page, pageSize: ctx.pageSize })\n  },\n}\n"],"mappings":"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","names":["import_dom_query","page","ctx"]}