import * as _zag_js_anatomy from '@zag-js/anatomy';
import { Orientation, RequiredBy, PropTypes, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import { ColorChannel, Color, ColorFormat } from '@zag-js/color-utils';
export { Color, ColorAxes, ColorChannel, ColorFormat, ColorType } from '@zag-js/color-utils';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.Anatomy<"area" | "areaThumb" | "areaGradient" | "channelSliderTrack" | "channelSliderTrackBackground" | "channelSliderThumb" | "channelInput" | "swatch" | "swatchBackground" | "content" | "label" | "eyeDropperTrigger">;

type ColorChannelProps = {
    channel: ColorChannel;
    orientation?: Orientation;
};
type ExtendedColorChannel = ColorChannel | "hex" | "css";
type ColorChannelInputProps = {
    channel: ExtendedColorChannel;
    orientation?: Orientation;
};
type ColorAreaProps = {
    xChannel: ColorChannel;
    yChannel: ColorChannel;
};
type ColorSwatchProps = {
    readOnly?: boolean;
    value: string | Color;
};
type ChangeDetails = {
    value: string;
    valueAsColor: Color;
};
type ElementIds = Partial<{
    content: string;
    area: string;
    areaGradient: string;
    areaThumb: string;
    channelInput(id: string): string;
    channelSliderTrack(id: ColorChannel): string;
    channelSliderThumb(id: ColorChannel): string;
}>;

type PublicContext = CommonProperties & {
    /**
     * The ids of the elements in the color picker. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The direction of the color picker
     */
    dir: "ltr" | "rtl";
    /**
     * The current color value
     */
    value: string;
    /**
     * Whether the color picker is disabled
     */
    disabled?: boolean;
    /**
     * Whether the color picker is read-only
     */
    readOnly?: boolean;
    /**
     * Handler that is called when the value changes, as the user drags.
     */
    onChange?: (details: ChangeDetails) => void;
    /**
     * Handler that is called when the user stops dragging.
     */
    onChangeEnd?: (details: ChangeDetails) => void;
    /**
     *  The name for the form input
     */
    name?: string;
};
type PrivateContext = Context<{}>;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the color picker is in RTL mode
     */
    isRtl: boolean;
    /**
     * @computed
     * Whether the color picker is interactive
     */
    isInteractive: boolean;
    /**
     * @computed
     * The color value as a Color object
     */
    valueAsColor: Color;
    /**
     * @computed
     * Whether the color picker is disabled
     */
    isDisabled: boolean;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "idle" | "focused" | "dragging";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
type MachineApi<T extends PropTypes = PropTypes> = {
    /**
     * Whether the color picker is being dragged
     */
    isDragging: boolean;
    /**
     * The current color value (as a string)
     */
    value: string;
    /**
     * The current color value (as a Color object)
     */
    valueAsColor: Color;
    /**
     * The alpha value of the color
     */
    alpha: number;
    /**
     * The current color channels of the color
     */
    channels: [ColorChannel, ColorChannel, ColorChannel];
    /**
     * Function to set the color value
     */
    setColor(value: string | Color): void;
    /**
     * Function to set the color value of a specific channel
     */
    setChannelValue(channel: ColorChannel, value: number): void;
    /**
     * Function to set the color format
     */
    setFormat(format: ColorFormat): void;
    /**
     * Function to set the color alpha
     */
    setAlpha(value: number): void;
    contentProps: T["element"];
    hiddenInputProps: T["input"];
    getAreaProps(props: ColorAreaProps): T["element"];
    getAreaGradientProps(props: ColorAreaProps): T["element"];
    getAreaThumbProps(props: ColorAreaProps): T["element"];
    getChannelSliderTrackProps(props: ColorChannelProps): T["element"];
    getChannelSliderBackgroundProps(props: ColorChannelProps): T["element"];
    getChannelSliderThumbProps(props: ColorChannelProps): T["element"];
    getChannelInputProps(props: ColorChannelInputProps): T["input"];
    eyeDropperTriggerProps: T["button"];
    getSwatchBackgroundProps(props: ColorSwatchProps): T["element"];
    getSwatchProps(props: ColorSwatchProps): T["element"];
};

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, ColorAreaProps, ColorChannelInputProps, ColorChannelProps, ColorSwatchProps, UserDefinedContext as Context, anatomy, connect, machine };
