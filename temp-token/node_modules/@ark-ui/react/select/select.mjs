'use client';
import { jsx } from 'react/jsx-runtime';
import { mergeProps } from '@zag-js/react';
import { forwardRef } from 'react';
import { createSplitProps } from '../create-split-props.mjs';
import { ark } from '../factory.mjs';
import { runIfFn } from '../run-if-fn.mjs';
import { SelectProvider } from './select-context.mjs';
import { useSelect } from './use-select.mjs';

const SelectImpl = (props, ref) => {
  const [useSelectProps, { children, ...localProps }] = createSplitProps()(
    props,
    [
      "closeOnSelect",
      "defaultValue",
      "dir",
      "disabled",
      "form",
      "getRootNode",
      "highlightedValue",
      "id",
      "ids",
      "invalid",
      "isItemDisabled",
      "items",
      "itemToString",
      "itemToValue",
      "loop",
      "multiple",
      "name",
      "onChange",
      "onClose",
      "onFocusOutside",
      "onHighlight",
      "onInteractOutside",
      "onOpen",
      "onPointerDownOutside",
      "open",
      "positioning",
      "readOnly",
      "selectOnBlur",
      "value"
    ]
  );
  const api = useSelect(useSelectProps);
  const view = runIfFn(children, api);
  const mergedProps = mergeProps(api.rootProps, localProps);
  return /* @__PURE__ */ jsx(SelectProvider, { value: api, children: /* @__PURE__ */ jsx(ark.div, { ...mergedProps, ref, children: view }) });
};
const Select = forwardRef(SelectImpl);

export { Select };
