import { ItemState, ItemProps, ItemGroupProps, ItemGroupLabelProps } from '@zag-js/select';
import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, DetailedHTMLProps, ButtonHTMLAttributes, RefAttributes, HTMLAttributes, ReactNode, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import type { CollectionItem } from '../types';
import { SelectComponent, type SelectProps } from './select';
import { SelectClearTrigger, type SelectClearTriggerProps } from './select-clear-trigger';
import { SelectContent, type SelectContentProps } from './select-content';
import { useSelectContext } from './select-context';
import { SelectControl, type SelectControlProps } from './select-control';
import { SelectItem, type SelectItemProps } from './select-item';
import { SelectItemGroup, type SelectItemGroupProps } from './select-item-group';
import { SelectItemGroupLabel, type SelectItemGroupLabelProps } from './select-item-group-label';
import { SelectItemIndicator, type SelectItemIndicatorProps } from './select-item-indicator';
import { SelectItemText, type SelectItemTextProps } from './select-item-text';
import { SelectLabel, type SelectLabelProps } from './select-label';
import { SelectPositioner, type SelectPositionerProps } from './select-positioner';
import { SelectTrigger, type SelectTriggerProps } from './select-trigger';
import { SelectValue, type SelectValueProps } from './select-value';
import { selectAnatomy } from './select.anatomy';
declare const Select: SelectComponent & {
    Root: SelectComponent;
    ClearTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Item: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "children"> & {
        children?: ReactNode | ((props: ItemState) => ReactNode);
    } & ItemProps & RefAttributes<HTMLDivElement>>;
    ItemGroup: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "id"> & ItemGroupProps & RefAttributes<HTMLDivElement>>;
    ItemGroupLabel: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "htmlFor"> & ItemGroupLabelProps & RefAttributes<HTMLDivElement>>;
    ItemIndicator: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    ItemText: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Positioner: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Value: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
};
export { Select, SelectClearTrigger, SelectContent, SelectControl, SelectItem, SelectItemGroup, SelectItemGroupLabel, SelectItemIndicator, SelectItemText, SelectLabel, SelectPositioner, SelectTrigger, SelectValue, selectAnatomy, useSelectContext, };
export type { CollectionItem, SelectClearTriggerProps, SelectContentProps, SelectControlProps, SelectItemGroupLabelProps, SelectItemGroupProps, SelectItemIndicatorProps, SelectItemProps, SelectItemTextProps, SelectLabelProps, SelectPositionerProps, SelectProps, SelectTriggerProps, SelectValueProps, };
