import { UseSliderProps, UseSliderReturn } from './use-slider';
import { HTMLArkProps } from '..';
import { Assign } from '../types';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, HTMLAttributes, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import { type SliderProps } from './slider';
import { useSliderContext } from './slider-context';
import { SliderControl, type SliderControlProps } from './slider-control';
import { SliderLabel, type SliderLabelProps } from './slider-label';
import { SliderMarker, type SliderMarkerProps } from './slider-marker';
import { SliderMarkerGroup, type SliderMarkerGroupProps } from './slider-marker-group';
import { SliderOutput, type SliderOutputProps } from './slider-output';
import { SliderRange, type SliderRangeProps } from './slider-range';
import { SliderThumb, type SliderThumbProps } from './slider-thumb';
import { SliderTrack, type SliderTrackProps } from './slider-track';
import { sliderAnatomy } from './slider.anatomy';
declare const Slider: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"div">, UseSliderProps>, "children"> & {
    children?: ReactNode | ((context: UseSliderReturn) => ReactNode);
} & RefAttributes<HTMLDivElement>> & {
    Root: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"div">, UseSliderProps>, "children"> & {
        children?: ReactNode | ((context: UseSliderReturn) => ReactNode);
    } & RefAttributes<HTMLDivElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Marker: ForwardRefExoticComponent<Omit<HTMLArkProps<"span">, "value"> & {
        value: number;
    } & RefAttributes<HTMLSpanElement>>;
    MarkerGroup: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Output: ForwardRefExoticComponent<Omit<HTMLArkProps<"output">, "children"> & {
        children?: ReactNode | ((context: UseSliderReturn) => ReactNode);
    } & RefAttributes<HTMLOutputElement>>;
    Range: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Thumb: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Track: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
};
export { Slider, SliderControl, SliderLabel, SliderMarker, SliderMarkerGroup, SliderOutput, SliderRange, SliderThumb, SliderTrack, sliderAnatomy, useSliderContext, };
export type { SliderControlProps, SliderLabelProps, SliderMarkerGroupProps, SliderMarkerProps, SliderOutputProps, SliderProps, SliderRangeProps, SliderThumbProps, SliderTrackProps, };
