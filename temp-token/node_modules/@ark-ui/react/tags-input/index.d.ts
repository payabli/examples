import { UseTagsInputProps } from './use-tags-input';
import { HTMLArkProps } from '..';
import { Assign } from '../types';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, ButtonHTMLAttributes, HTMLAttributes, InputHTMLAttributes, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import { Tag, type TagProps } from './tag';
import { TagDeleteTrigger, type TagDeleteTriggerProps } from './tag-delete-trigger';
import { TagInput, type TagInputProps } from './tag-input';
import { type TagsInputProps } from './tags-input';
import { TagsInputClearTrigger, type TagsInputClearTriggerProps } from './tags-input-clear-trigger';
import { useTagsInputContext, type TagsInputContext } from './tags-input-context';
import { TagsInputControl, type TagsInputControlProps } from './tags-input-control';
import { TagsInputInput, type TagsInputInputProps } from './tags-input-field';
import { TagsInputLabel, type TagsInputLabelProps } from './tags-input-label';
import { tagsInputAnatomy } from './tags-input.anatomy';
declare const TagsInput: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"input">, UseTagsInputProps>, "children"> & {
    children?: ReactNode | ((pages: UseTagsInputProps) => ReactNode);
} & RefAttributes<HTMLInputElement>> & {
    Root: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"input">, UseTagsInputProps>, "children"> & {
        children?: ReactNode | ((pages: UseTagsInputProps) => ReactNode);
    } & RefAttributes<HTMLInputElement>>;
    ClearTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Input: ForwardRefExoticComponent<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLInputElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Tag: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, keyof {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    }> & {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    TagInput: ForwardRefExoticComponent<Omit<HTMLArkProps<"input">, keyof {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    }> & {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    } & RefAttributes<HTMLInputElement>>;
    TagDeleteTrigger: ForwardRefExoticComponent<Omit<HTMLArkProps<"button">, keyof {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    }> & {
        index: string | number;
        value: string;
        disabled?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Tag, TagDeleteTrigger, TagInput, TagsInput, TagsInputClearTrigger, TagsInputControl, TagsInputInput, TagsInputLabel, tagsInputAnatomy, useTagsInputContext, };
export type { TagDeleteTriggerProps, TagInputProps, TagProps, TagsInputClearTriggerProps, TagsInputContext, TagsInputControlProps, TagsInputInputProps, TagsInputLabelProps, TagsInputProps, };
