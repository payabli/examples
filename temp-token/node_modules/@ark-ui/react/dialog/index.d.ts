import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, RefAttributes, DetailedHTMLProps, ButtonHTMLAttributes, HTMLAttributes } from 'react';
import { JSX } from 'react/jsx-runtime';
/// <reference types="react" />
import { type DialogProps } from './dialog';
import { DialogBackdrop, type DialogBackdropProps } from './dialog-backdrop';
import { DialogCloseTrigger, type DialogCloseTriggerProps } from './dialog-close-trigger';
import { DialogContainer, type DialogContainerProps } from './dialog-container';
import { DialogContent, type DialogContentProps } from './dialog-content';
import { useDialogContext } from './dialog-context';
import { DialogDescription, type DialogDescriptionProps } from './dialog-description';
import { DialogTitle, type DialogTitleProps } from './dialog-title';
import { DialogTrigger, type DialogTriggerProps } from './dialog-trigger';
import { dialogAnatomy } from './dialog.anatomy';
declare const Dialog: ((props: DialogProps) => JSX.Element) & {
    Root: (props: DialogProps) => JSX.Element;
    Backdrop: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    CloseTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Container: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    Description: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLParagraphElement>>;
    Title: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLHeadingElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Dialog, DialogBackdrop, DialogCloseTrigger, DialogContainer, DialogContent, DialogDescription, DialogTitle, DialogTrigger, dialogAnatomy, useDialogContext, };
export type { DialogBackdropProps, DialogCloseTriggerProps, DialogContainerProps, DialogContentProps, DialogDescriptionProps, DialogProps, DialogTitleProps, DialogTriggerProps, };
