import { UseSwitchProps, UseSwitchReturn } from './use-switch';
import { HTMLArkProps } from '..';
import { Assign } from '../types';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, HTMLAttributes } from 'react';
/// <reference types="react" />
import { type SwitchProps } from './switch';
import { useSwitchContext, type SwitchContext } from './switch-context';
import { SwitchControl, type SwitchControlProps } from './switch-control';
import { SwitchLabel, type SwitchLabelProps } from './switch-label';
import { SwitchThumb, type SwitchThumbProps } from './switch-thumb';
import { switchAnatomy } from './switch.anatomy';
declare const Switch: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"label">, UseSwitchProps>, "children"> & {
    children?: ReactNode | ((pages: UseSwitchReturn) => ReactNode);
} & RefAttributes<HTMLLabelElement>> & {
    Root: ForwardRefExoticComponent<Omit<Assign<HTMLArkProps<"label">, UseSwitchProps>, "children"> & {
        children?: ReactNode | ((pages: UseSwitchReturn) => ReactNode);
    } & RefAttributes<HTMLLabelElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
    Thumb: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
};
export { Switch, SwitchControl, SwitchLabel, SwitchThumb, switchAnatomy, useSwitchContext };
export type { SwitchContext, SwitchControlProps, SwitchLabelProps, SwitchProps, SwitchThumbProps };
