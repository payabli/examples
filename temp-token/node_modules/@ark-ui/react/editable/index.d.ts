import { UseEditableReturn, UseEditableProps } from './use-editable';
import { HTMLArkProps } from '..';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, HTMLAttributes, ButtonHTMLAttributes, InputHTMLAttributes, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import { type EditableProps } from './editable';
import { EditableArea, type EditableAreaProps } from './editable-area';
import { EditableCancelTrigger, type EditableCancelTriggerProps } from './editable-cancel-trigger';
import { useEditableContext } from './editable-context';
import { EditableControl, type EditableControlProps } from './editable-control';
import { EditableEditTrigger, type EditableEditTriggerProps } from './editable-edit-trigger';
import { EditableInput, type EditableInputProps } from './editable-input';
import { EditableLabel, type EditableLabelProps } from './editable-label';
import { EditablePreview, type EditablePreviewProps } from './editable-preview';
import { EditableSubmitTrigger, type EditableSubmitTriggerProps } from './editable-submit-trigger';
import { editableAnatomy } from './editable.anatomy';
declare const Editable: ForwardRefExoticComponent<Omit<Omit<HTMLArkProps<"div">, "children"> & {
    children?: ReactNode | ((pages: UseEditableReturn) => ReactNode);
}, keyof UseEditableProps> & UseEditableProps & RefAttributes<HTMLDivElement>> & {
    Root: ForwardRefExoticComponent<Omit<Omit<HTMLArkProps<"div">, "children"> & {
        children?: ReactNode | ((pages: UseEditableReturn) => ReactNode);
    }, keyof UseEditableProps> & UseEditableProps & RefAttributes<HTMLDivElement>>;
    Area: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    CancelTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    EditTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Input: ForwardRefExoticComponent<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLInputElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Preview: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
    SubmitTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Editable, EditableArea, EditableCancelTrigger, EditableControl, EditableEditTrigger, EditableInput, EditableLabel, EditablePreview, EditableSubmitTrigger, editableAnatomy, useEditableContext, };
export type { EditableAreaProps, EditableCancelTriggerProps, EditableControlProps, EditableEditTriggerProps, EditableInputProps, EditableLabelProps, EditablePreviewProps, EditableProps, EditableSubmitTriggerProps, };
