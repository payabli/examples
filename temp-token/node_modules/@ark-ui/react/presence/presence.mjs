'use client';
import { useRef, Children, cloneElement } from 'react';
import { composeRefs } from '../compose-refs.mjs';
import { createSplitProps } from '../create-split-props.mjs';
import { usePresence } from './use-presence.mjs';

const Presence = (props) => {
  const [presenceProps, { children, lazyMount, unmountOnExit }] = createSplitProps()(props, ["present", "onExitComplete"]);
  const api = usePresence(presenceProps);
  const wasEverPresent = useRef(false);
  if (api.isPresent) {
    wasEverPresent.current = true;
  }
  if (!api.isPresent && !wasEverPresent.current && lazyMount || unmountOnExit && !api.isPresent && wasEverPresent.current) {
    return null;
  }
  const onlyChild = Children.only(children);
  return cloneElement(onlyChild, {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ref: composeRefs(api.setNode, onlyChild.ref),
    hidden: !api.isPresent,
    ["data-state"]: presenceProps.present ? "open" : "closed",
    ...onlyChild.props
  });
};

export { Presence };
