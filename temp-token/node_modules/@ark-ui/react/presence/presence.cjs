'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const react = require('react');
const composeRefs = require('../compose-refs.cjs');
const createSplitProps = require('../create-split-props.cjs');
const usePresence = require('./use-presence.cjs');

const Presence = (props) => {
  const [presenceProps, { children, lazyMount, unmountOnExit }] = createSplitProps.createSplitProps()(props, ["present", "onExitComplete"]);
  const api = usePresence.usePresence(presenceProps);
  const wasEverPresent = react.useRef(false);
  if (api.isPresent) {
    wasEverPresent.current = true;
  }
  if (!api.isPresent && !wasEverPresent.current && lazyMount || unmountOnExit && !api.isPresent && wasEverPresent.current) {
    return null;
  }
  const onlyChild = react.Children.only(children);
  return react.cloneElement(onlyChild, {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ref: composeRefs.composeRefs(api.setNode, onlyChild.ref),
    hidden: !api.isPresent,
    ["data-state"]: presenceProps.present ? "open" : "closed",
    ...onlyChild.props
  });
};

exports.Presence = Presence;
