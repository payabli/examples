'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
const toast = require('@zag-js/toast');
const react = require('react');
const createContext = require('../create-context.cjs');
require('../environment/index.cjs');
const environmentContext = require('../environment/environment-context.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const toast__namespace = /*#__PURE__*/_interopNamespaceDefault(toast);

const [ToastContextProvider, useToast] = createContext.createContext();
const ToastProvider = (props) => {
  const { children, ...restProps } = props;
  const getRootNode = environmentContext.useEnvironmentContext();
  const context = { id: react.useId(), getRootNode, ...restProps };
  const [state, send] = react$1.useMachine(toast__namespace.group.machine(context));
  const api = toast__namespace.group.connect(state, send, react$1.normalizeProps);
  return /* @__PURE__ */ jsxRuntime.jsx(ToastContextProvider, { value: api, children });
};

exports.ToastProvider = ToastProvider;
exports.useToast = useToast;
