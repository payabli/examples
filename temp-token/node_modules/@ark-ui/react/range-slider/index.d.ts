import { UseRangeSliderProps, UseRangeSliderReturn } from './use-range-slider';
import { HTMLArkProps } from '..';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, HTMLAttributes, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import { type RangeSliderProps } from './range-slider';
import { useRangeSliderContext, type RangeSliderContext } from './range-slider-context';
import { RangeSliderControl, type RangeSliderControlProps } from './range-slider-control';
import { RangeSliderLabel, type RangeSliderLabelProps } from './range-slider-label';
import { RangeSliderMarker, type RangeSliderMarkerProps } from './range-slider-marker';
import { RangeSliderMarkerGroup, type RangeSliderMarkerGroupProps } from './range-slider-marker-group';
import { RangeSliderOutput, type RangeSliderOutputProps } from './range-slider-output';
import { RangeSliderRange, type RangeSliderRangeProps } from './range-slider-range';
import { RangeSliderThumb, type RangeSliderThumbProps } from './range-slider-thumb';
import { RangeSliderTrack, type RangeSliderTrackProps } from './range-slider-track';
import { rangeSliderAnatomy } from './range-slider.anatomy';
declare const RangeSlider: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "children" | keyof UseRangeSliderProps> & UseRangeSliderProps & {
    children?: ReactNode | ((api: UseRangeSliderReturn) => ReactNode);
} & RefAttributes<HTMLDivElement>> & {
    Root: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "children" | keyof UseRangeSliderProps> & UseRangeSliderProps & {
        children?: ReactNode | ((api: UseRangeSliderReturn) => ReactNode);
    } & RefAttributes<HTMLDivElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Marker: ForwardRefExoticComponent<Omit<HTMLArkProps<"span">, "value"> & {
        value: number;
    } & RefAttributes<HTMLSpanElement>>;
    MarkerGroup: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Output: ForwardRefExoticComponent<Omit<HTMLArkProps<"output">, "children"> & {
        children?: ReactNode | ((api: UseRangeSliderReturn) => ReactNode);
    } & RefAttributes<HTMLOutputElement>>;
    Range: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Thumb: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "index"> & {
        index: number;
    } & RefAttributes<HTMLDivElement>>;
    Track: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
};
export { RangeSlider, RangeSliderControl, RangeSliderLabel, RangeSliderMarker, RangeSliderMarkerGroup, RangeSliderOutput, RangeSliderRange, RangeSliderThumb, RangeSliderTrack, rangeSliderAnatomy, useRangeSliderContext, };
export type { RangeSliderContext, RangeSliderControlProps, RangeSliderLabelProps, RangeSliderMarkerGroupProps, RangeSliderMarkerProps, RangeSliderOutputProps, RangeSliderProps, RangeSliderRangeProps, RangeSliderThumbProps, RangeSliderTrackProps, };
