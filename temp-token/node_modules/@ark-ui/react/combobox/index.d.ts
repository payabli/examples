import { ItemProps, ItemGroupProps, ItemGroupLabelProps } from '@zag-js/combobox';
import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, DetailedHTMLProps, ButtonHTMLAttributes, RefAttributes, HTMLAttributes, InputHTMLAttributes, RefObject, LabelHTMLAttributes } from 'react';
/// <reference types="react" />
import type { CollectionItem } from '../types';
import { ComboboxComponent, type ComboboxProps } from './combobox';
import { ComboboxClearTrigger, type ComboboxClearTriggerProps } from './combobox-clear-trigger';
import { ComboboxContent, type ComboboxContentProps } from './combobox-content';
import { useComboboxContext, type ComboboxContext } from './combobox-context';
import { ComboboxControl, type ComboboxControlProps } from './combobox-control';
import { ComboboxInput, type ComboboxInputProps } from './combobox-input';
import { ComboboxItem, type ComboboxItemProps } from './combobox-item';
import { ComboboxItemGroup, type ComboboxItemGroupProps } from './combobox-item-group';
import { ComboboxItemGroupLabel, type ComboboxItemGroupLabelProps } from './combobox-item-group-label';
import { ComboboxItemIndicator, type ComboboxItemIndicatorProps } from './combobox-item-indicator';
import { ComboboxItemText, type ComboboxItemTextProps } from './combobox-item-text';
import { ComboboxLabel, type ComboboxLabelProps } from './combobox-label';
import { ComboboxPositioner, type ComboboxPositionerProps } from './combobox-positioner';
import { ComboboxTrigger, type ComboboxTriggerProps } from './combobox-trigger';
import { comboboxAnatomy } from './combobox.anatomy';
declare const Combobox: ComboboxComponent & {
    Root: ComboboxComponent;
    ClearTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Input: ForwardRefExoticComponent<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLInputElement>>;
    Item: ForwardRefExoticComponent<Omit<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined;
    } & {
        asChild?: boolean | undefined;
    }, "ref">, "item"> & ItemProps & RefAttributes<HTMLDivElement>>;
    ItemGroup: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "id"> & ItemGroupProps & RefAttributes<HTMLDivElement>>;
    ItemGroupLabel: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "htmlFor"> & ItemGroupLabelProps & RefAttributes<HTMLDivElement>>;
    ItemIndicator: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    ItemText: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLLabelElement>>;
    Positioner: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Combobox, ComboboxClearTrigger, ComboboxContent, ComboboxControl, ComboboxInput, ComboboxItem, ComboboxItemGroup, ComboboxItemGroupLabel, ComboboxItemIndicator, ComboboxItemText, ComboboxLabel, ComboboxPositioner, ComboboxTrigger, comboboxAnatomy, useComboboxContext, };
export type { CollectionItem, ComboboxClearTriggerProps, ComboboxContentProps, ComboboxContext, ComboboxControlProps, ComboboxInputProps, ComboboxItemGroupLabelProps, ComboboxItemGroupProps, ComboboxItemIndicatorProps, ComboboxItemProps, ComboboxItemTextProps, ComboboxLabelProps, ComboboxPositionerProps, ComboboxProps, ComboboxTriggerProps, };
