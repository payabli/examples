import { UseCheckboxProps, UseCheckboxReturn } from './use-checkbox';
import { HTMLArkProps } from '..';
import { ForwardRefExoticComponent, ReactNode, RefAttributes, DetailedHTMLProps, HTMLAttributes } from 'react';
/// <reference types="react" />
import type { CheckedState } from '@zag-js/checkbox';
import { type CheckboxProps } from './checkbox';
import { useCheckboxContext } from './checkbox-context';
import { CheckboxControl, type CheckboxControlProps } from './checkbox-control';
import { CheckboxLabel, type CheckboxLabelProps } from './checkbox-label';
import { checkboxAnatomy } from './checkbox.anatomy';
declare const Checkbox: ForwardRefExoticComponent<Omit<HTMLArkProps<"label">, "children" | keyof UseCheckboxProps> & Omit<UseCheckboxProps, "children"> & {
    children?: ReactNode | ((pages: UseCheckboxReturn) => ReactNode);
} & RefAttributes<HTMLLabelElement>> & {
    Root: ForwardRefExoticComponent<Omit<HTMLArkProps<"label">, "children" | keyof UseCheckboxProps> & Omit<UseCheckboxProps, "children"> & {
        children?: ReactNode | ((pages: UseCheckboxReturn) => ReactNode);
    } & RefAttributes<HTMLLabelElement>>;
    Control: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Label: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLSpanElement>>;
};
export { Checkbox, CheckboxControl, CheckboxLabel, checkboxAnatomy, useCheckboxContext };
export type { CheckboxControlProps, CheckboxLabelProps, CheckboxProps, CheckedState };
