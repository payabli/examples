'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const runIfFn = require('../run-if-fn.cjs');
const useEffectOnce = require('../use-effect-once.cjs');
const menuContext = require('./menu-context.cjs');
const useMenu = require('./use-menu.cjs');

const Menu = (props) => {
  const [menuProps, { children, isOpen }] = createSplitProps.createSplitProps()(props, [
    "anchorPoint",
    "aria-label",
    "closeOnSelect",
    "dir",
    "getRootNode",
    "highlightedId",
    "id",
    "ids",
    "loop",
    "onClose",
    "onFocusOutside",
    "onInteractOutside",
    "onOpen",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "positioning",
    "value"
  ]);
  const parentApi = menuContext.useMenuContext();
  const parentMachine = menuContext.useMenuMachineContext();
  const { api, machine } = useMenu.useMenu(menuProps);
  const view = runIfFn.runIfFn(children, {
    isOpen: api.isOpen,
    onClose: api.close
  });
  useEffectOnce.useEffectOnce(() => {
    if (!parentMachine)
      return;
    parentApi.setChild(machine);
    api.setParent(parentMachine);
  });
  react.useEffect(() => {
    if (isOpen && !api.isOpen) {
      api.open();
    }
  }, [isOpen, api]);
  const getTriggerItemProps = react.useCallback(
    () => parentApi.getTriggerItemProps(api),
    [api, parentApi]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(menuContext.MenuTriggerItemProvider, { value: getTriggerItemProps, children: /* @__PURE__ */ jsxRuntime.jsx(menuContext.MenuMachineProvider, { value: machine, children: /* @__PURE__ */ jsxRuntime.jsx(menuContext.MenuProvider, { value: api, children: view }) }) });
};

exports.Menu = Menu;
