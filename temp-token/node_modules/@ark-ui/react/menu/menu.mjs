'use client';
import { jsx } from 'react/jsx-runtime';
import { useEffect, useCallback } from 'react';
import { createSplitProps } from '../create-split-props.mjs';
import { runIfFn } from '../run-if-fn.mjs';
import { useEffectOnce } from '../use-effect-once.mjs';
import { useMenuContext, useMenuMachineContext, MenuTriggerItemProvider, MenuMachineProvider, MenuProvider } from './menu-context.mjs';
import { useMenu } from './use-menu.mjs';

const Menu = (props) => {
  const [menuProps, { children, isOpen }] = createSplitProps()(props, [
    "anchorPoint",
    "aria-label",
    "closeOnSelect",
    "dir",
    "getRootNode",
    "highlightedId",
    "id",
    "ids",
    "loop",
    "onClose",
    "onFocusOutside",
    "onInteractOutside",
    "onOpen",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "positioning",
    "value"
  ]);
  const parentApi = useMenuContext();
  const parentMachine = useMenuMachineContext();
  const { api, machine } = useMenu(menuProps);
  const view = runIfFn(children, {
    isOpen: api.isOpen,
    onClose: api.close
  });
  useEffectOnce(() => {
    if (!parentMachine)
      return;
    parentApi.setChild(machine);
    api.setParent(parentMachine);
  });
  useEffect(() => {
    if (isOpen && !api.isOpen) {
      api.open();
    }
  }, [isOpen, api]);
  const getTriggerItemProps = useCallback(
    () => parentApi.getTriggerItemProps(api),
    [api, parentApi]
  );
  return /* @__PURE__ */ jsx(MenuTriggerItemProvider, { value: getTriggerItemProps, children: /* @__PURE__ */ jsx(MenuMachineProvider, { value: machine, children: /* @__PURE__ */ jsx(MenuProvider, { value: api, children: view }) }) });
};

export { Menu };
