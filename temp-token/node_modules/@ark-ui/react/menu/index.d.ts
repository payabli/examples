import { ItemProps, GroupProps } from '@zag-js/menu';
import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, DetailedHTMLProps, HTMLAttributes, RefAttributes, ButtonHTMLAttributes, ReactNode } from 'react';
import { JSX } from 'react/jsx-runtime';
/// <reference types="react" />
import { type MenuProps } from './menu';
import { MenuArrow, type MenuArrowProps } from './menu-arrow';
import { MenuArrowTip, type MenuArrowTipProps } from './menu-arrow-tip';
import { MenuContent, type MenuContentProps } from './menu-content';
import { useMenuContext } from './menu-context';
import { MenuContextTrigger, type MenuContextTriggerProps } from './menu-context-trigger';
import { MenuItem, type MenuItemProps } from './menu-item';
import { MenuItemGroup, type MenuItemGroupProps } from './menu-item-group';
import { MenuItemGroupLabel, type MenuItemGroupLabelProps } from './menu-item-group-label';
import { MenuOptionItem, type MenuOptionItemProps, type MenuOptionItemState } from './menu-option-item';
import { MenuPositioner, type MenuPositionerProps } from './menu-positioner';
import { MenuSeparator, type MenuSeparatorProps } from './menu-separator';
import { MenuTrigger, type MenuTriggerProps } from './menu-trigger';
import { MenuTriggerItem, type MenuTriggerItemProps } from './menu-trigger-item';
import { menuAnatomy } from './menu.anatomy';
declare const Menu: ((props: MenuProps) => JSX.Element) & {
    Root: (props: MenuProps) => JSX.Element;
    Arrow: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    ArrowTip: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    ContextTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Item: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, keyof ItemProps> & ItemProps & RefAttributes<HTMLDivElement>>;
    ItemGroup: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "id"> & GroupProps & RefAttributes<HTMLDivElement>>;
    ItemGroupLabel: ForwardRefExoticComponent<Omit<HTMLArkProps<"label">, "htmlFor"> & {
        htmlFor: string;
    } & RefAttributes<HTMLLabelElement>>;
    OptionItem: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "name" | "value" | "children" | "type" | keyof ItemProps | "onCheckedChange"> & Partial<ItemProps> & {
        name: string;
        type: "checkbox" | "radio";
        value: string;
        onCheckedChange?: ((checked: boolean) => void) | undefined;
    } & {
        children?: ReactNode | ((state: MenuOptionItemState) => ReactNode);
    } & RefAttributes<HTMLDivElement>>;
    Positioner: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Separator: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLHRElement>, HTMLHRElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLHRElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    TriggerItem: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
};
export { Menu, MenuArrow, MenuArrowTip, MenuContent, MenuContextTrigger, MenuItem, MenuItemGroup, MenuItemGroupLabel, MenuOptionItem, MenuPositioner, MenuSeparator, MenuTrigger, MenuTriggerItem, menuAnatomy, useMenuContext, };
export type { MenuArrowProps, MenuArrowTipProps, MenuContentProps, MenuContextTriggerProps, MenuItemGroupLabelProps, MenuItemGroupProps, MenuItemProps, MenuOptionItemProps, MenuOptionItemState, MenuPositionerProps, MenuProps, MenuSeparatorProps, MenuTriggerItemProps, MenuTriggerProps, };
