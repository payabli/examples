import { ItemProps, ItemState } from '@zag-js/accordion';
import { UseAccordionProps } from './use-accordion';
import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, RefAttributes, ReactNode, DetailedHTMLProps, ButtonHTMLAttributes } from 'react';
/// <reference types="react" />
import { type AccordionProps } from './accordion';
import { AccordionContent, type AccordionContentProps } from './accordion-content';
import { useAccordionContext, type AccordionContext } from './accordion-context';
import { AccordionItem, type AccordionItemProps } from './accordion-item';
import { useAccordionItemContext, type AccordionItemContext } from './accordion-item-context';
import { AccordionTrigger, type AccordionTriggerProps } from './accordion-trigger';
import { accordionAnatomy } from './accordion.anatomy';
declare const Accordion: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, keyof UseAccordionProps> & UseAccordionProps & RefAttributes<HTMLDivElement>> & {
    Root: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, keyof UseAccordionProps> & UseAccordionProps & RefAttributes<HTMLDivElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    Item: ForwardRefExoticComponent<ItemProps & Omit<HTMLArkProps<"div">, "children"> & {
        children?: ReactNode | ((props: ItemState) => ReactNode);
    } & RefAttributes<HTMLDivElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Accordion, AccordionContent, AccordionItem, AccordionTrigger, accordionAnatomy, useAccordionContext, useAccordionItemContext, };
export type { AccordionContentProps, AccordionContext, AccordionItemContext, AccordionItemProps, AccordionProps, AccordionTriggerProps, };
