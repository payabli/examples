import { HTMLArkProps, PresenceProps } from '..';
import { ForwardRefExoticComponent, DetailedHTMLProps, HTMLAttributes, RefAttributes, ButtonHTMLAttributes } from 'react';
import { JSX } from 'react/jsx-runtime';
/// <reference types="react" />
import { type PopoverProps } from './popover';
import { PopoverAnchor, type PopoverAnchorProps } from './popover-anchor';
import { PopoverArrow, type PopoverArrowProps } from './popover-arrow';
import { PopoverArrowTip, type PopoverArrowTipProps } from './popover-arrow-tip';
import { PopoverCloseTrigger, type PopoverCloseTriggerProps } from './popover-close-trigger';
import { PopoverContent, type PopoverContentProps } from './popover-content';
import { usePopoverContext } from './popover-context';
import { PopoverDescription, type PopoverDescriptionProps } from './popover-description';
import { PopoverPositioner, type PopoverPositionerProps } from './popover-positioner';
import { PopoverTitle, type PopoverTitleProps } from './popover-title';
import { PopoverTrigger, type PopoverTriggerProps } from './popover-trigger';
import { popoverAnatomy } from './popover.anatomy';
declare const Popover: ((props: PopoverProps) => JSX.Element) & {
    Root: (props: PopoverProps) => JSX.Element;
    Anchor: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Arrow: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    ArrowTip: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    CloseTrigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
    Content: ForwardRefExoticComponent<Omit<HTMLArkProps<"div">, "present" | "onExitComplete" | "lazyMount" | "unmountOnExit"> & Omit<PresenceProps, "children"> & RefAttributes<HTMLDivElement>>;
    Description: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLParagraphElement>>;
    Positioner: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Title: ForwardRefExoticComponent<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLDivElement>>;
    Trigger: ForwardRefExoticComponent<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        asChild?: boolean | undefined;
    } & RefAttributes<HTMLButtonElement>>;
};
export { Popover, PopoverAnchor, PopoverArrow, PopoverArrowTip, PopoverCloseTrigger, PopoverContent, PopoverDescription, PopoverPositioner, PopoverTitle, PopoverTrigger, popoverAnatomy, usePopoverContext, };
export type { PopoverAnchorProps, PopoverArrowProps, PopoverArrowTipProps, PopoverCloseTriggerProps, PopoverContentProps, PopoverDescriptionProps, PopoverPositionerProps, PopoverProps, PopoverTitleProps, PopoverTriggerProps, };
