'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const factory = require('../factory.cjs');
const radioContext = require('./radio-context.cjs');
const radioGroupContext = require('./radio-group-context.cjs');

const Radio = react.forwardRef((props, ref) => {
  const [radioProps, localProps] = createSplitProps.createSplitProps()(props, [
    "value",
    "disabled",
    "invalid"
  ]);
  const api = radioGroupContext.useRadioGroupContext();
  const mergedProps = react$1.mergeProps(api.getRadioProps(radioProps), localProps);
  return /* @__PURE__ */ jsxRuntime.jsxs(radioContext.RadioProvider, { value: props, children: [
    /* @__PURE__ */ jsxRuntime.jsx(factory.ark.label, { ...mergedProps, ref }),
    /* @__PURE__ */ jsxRuntime.jsx("input", { ...api.getRadioHiddenInputProps(radioProps) })
  ] });
});
Radio.displayName = "Radio";

exports.Radio = Radio;
