"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  anatomy: () => anatomy,
  connect: () => connect,
  machine: () => machine
});
module.exports = __toCommonJS(src_exports);

// src/pin-input.anatomy.ts
var import_anatomy = require("@zag-js/anatomy");
var anatomy = (0, import_anatomy.createAnatomy)("pinInput").parts("root", "label", "input", "control");
var parts = anatomy.build();

// src/pin-input.connect.ts
var import_dom_event = require("@zag-js/dom-event");
var import_dom_query2 = require("@zag-js/dom-query");
var import_utils = require("@zag-js/utils");
var import_visually_hidden = require("@zag-js/visually-hidden");

// src/pin-input.dom.ts
var import_dom_query = require("@zag-js/dom-query");
var dom = (0, import_dom_query.createScope)({
  getRootId: (ctx) => ctx.ids?.root ?? `pin-input:${ctx.id}`,
  getInputId: (ctx, id) => ctx.ids?.input?.(id) ?? `pin-input:${ctx.id}:${id}`,
  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`,
  getLabelId: (ctx) => ctx.ids?.label ?? `pin-input:${ctx.id}:label`,
  getControlId: (ctx) => ctx.ids?.control ?? `pin-input:${ctx.id}:control`,
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getInputEls: (ctx) => {
    const ownerId = CSS.escape(dom.getRootId(ctx));
    const selector = `input[data-ownedby=${ownerId}]`;
    return (0, import_dom_query.queryAll)(dom.getRootEl(ctx), selector);
  },
  getInputEl: (ctx, id) => dom.getById(ctx, dom.getInputId(ctx, id)),
  getFocusedInputEl: (ctx) => dom.getInputEls(ctx)[ctx.focusedIndex],
  getFirstInputEl: (ctx) => dom.getInputEls(ctx)[0],
  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx))
});

// src/pin-input.connect.ts
function connect(state, send, normalize) {
  const isValueComplete = state.context.isValueComplete;
  const isInvalid = state.context.invalid;
  const focusedIndex = state.context.focusedIndex;
  const translations = state.context.translations;
  function focus() {
    dom.getFirstInputEl(state.context)?.focus();
  }
  return {
    value: state.context.value,
    valueAsString: state.context.valueAsString,
    isValueComplete,
    setValue(value) {
      if (!Array.isArray(value)) {
        (0, import_utils.invariant)("[pin-input/setValue] value must be an array");
      }
      send({ type: "SET_VALUE", value });
    },
    clearValue() {
      send({ type: "CLEAR_VALUE" });
    },
    setValueAtIndex(index, value) {
      send({ type: "SET_VALUE", value, index });
    },
    focus,
    rootProps: normalize.element({
      dir: state.context.dir,
      ...parts.root.attrs,
      id: dom.getRootId(state.context),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-disabled": (0, import_dom_query2.dataAttr)(state.context.disabled),
      "data-complete": (0, import_dom_query2.dataAttr)(isValueComplete)
    }),
    labelProps: normalize.label({
      ...parts.label.attrs,
      htmlFor: dom.getHiddenInputId(state.context),
      id: dom.getLabelId(state.context),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-disabled": (0, import_dom_query2.dataAttr)(state.context.disabled),
      "data-complete": (0, import_dom_query2.dataAttr)(isValueComplete),
      onClick: (event) => {
        event.preventDefault();
        focus();
      }
    }),
    hiddenInputProps: normalize.input({
      "aria-hidden": true,
      type: "text",
      tabIndex: -1,
      id: dom.getHiddenInputId(state.context),
      name: state.context.name,
      form: state.context.form,
      style: import_visually_hidden.visuallyHiddenStyle,
      maxLength: state.context.valueLength,
      defaultValue: state.context.valueAsString
    }),
    controlProps: normalize.element({
      ...parts.control.attrs,
      id: dom.getControlId(state.context)
    }),
    getInputProps({ index }) {
      const inputType = state.context.type === "numeric" ? "tel" : "text";
      return normalize.input({
        ...parts.input.attrs,
        disabled: state.context.disabled,
        "data-disabled": (0, import_dom_query2.dataAttr)(state.context.disabled),
        "data-complete": (0, import_dom_query2.dataAttr)(isValueComplete),
        id: dom.getInputId(state.context, index.toString()),
        "data-ownedby": dom.getRootId(state.context),
        "aria-label": translations.inputLabel(index, state.context.valueLength),
        inputMode: state.context.otp || state.context.type === "numeric" ? "numeric" : "text",
        "aria-invalid": (0, import_dom_query2.ariaAttr)(isInvalid),
        "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
        type: state.context.mask ? "password" : inputType,
        defaultValue: state.context.value[index] || "",
        autoCapitalize: "none",
        autoComplete: state.context.otp ? "one-time-code" : "off",
        placeholder: focusedIndex === index ? "" : state.context.placeholder,
        onChange(event) {
          const evt = (0, import_dom_event.getNativeEvent)(event);
          const { value } = event.currentTarget;
          if (evt.inputType === "insertFromPaste" || value.length > 2) {
            send({ type: "PASTE", value });
            event.preventDefault();
            return;
          }
          if (evt.inputType === "deleteContentBackward") {
            send("BACKSPACE");
            return;
          }
          send({ type: "INPUT", value, index });
        },
        onKeyDown(event) {
          const evt = (0, import_dom_event.getNativeEvent)(event);
          if (evt.isComposing || (0, import_dom_event.isModifiedEvent)(evt))
            return;
          const keyMap = {
            Backspace() {
              send("BACKSPACE");
            },
            Delete() {
              send("DELETE");
            },
            ArrowLeft() {
              send("ARROW_LEFT");
            },
            ArrowRight() {
              send("ARROW_RIGHT");
            },
            Enter() {
              send("ENTER");
            }
          };
          const key = (0, import_dom_event.getEventKey)(event, { dir: state.context.dir });
          const exec = keyMap[key];
          if (exec) {
            exec(event);
            event.preventDefault();
          } else {
            if (key === "Tab")
              return;
            send({ type: "KEY_DOWN", value: key, preventDefault: () => event.preventDefault() });
          }
        },
        onFocus() {
          send({ type: "FOCUS", index });
        },
        onBlur() {
          send({ type: "BLUR", index });
        }
      });
    }
  };
}

// src/pin-input.machine.ts
var import_core = require("@zag-js/core");
var import_dom_query3 = require("@zag-js/dom-query");
var import_form_utils = require("@zag-js/form-utils");
var import_utils2 = require("@zag-js/utils");
var { and, not } = import_core.guards;
function machine(userContext) {
  const ctx = (0, import_utils2.compact)(userContext);
  return (0, import_core.createMachine)(
    {
      id: "pin-input",
      initial: ctx.autoFocus ? "focused" : "idle",
      context: {
        value: [],
        focusedIndex: -1,
        placeholder: "\u25CB",
        otp: false,
        type: "numeric",
        ...ctx,
        translations: {
          inputLabel: (index, length) => `pin code ${index + 1} of ${length}`,
          ...ctx.translations
        }
      },
      computed: {
        valueLength: (ctx2) => ctx2.value.length,
        filledValueLength: (ctx2) => ctx2.value.filter((v) => v?.trim() !== "").length,
        isValueComplete: (ctx2) => ctx2.valueLength === ctx2.filledValueLength,
        valueAsString: (ctx2) => ctx2.value.join(""),
        focusedValue: (ctx2) => ctx2.value[ctx2.focusedIndex]
      },
      watch: {
        focusedIndex: ["focusInput", "selectInputIfNeeded"],
        value: ["syncInputElements"],
        isValueComplete: ["invokeOnComplete", "blurFocusedInputIfNeeded"]
      },
      entry: ctx.autoFocus ? ["setupValue", "setFocusIndexToFirst"] : ["setupValue"],
      on: {
        SET_VALUE: [
          {
            guard: "hasIndex",
            actions: ["setValueAtIndex"]
          },
          { actions: ["setValue"] }
        ],
        CLEAR_VALUE: [
          {
            guard: "isDisabled",
            actions: ["clearValue"]
          },
          {
            actions: ["clearValue", "setFocusIndexToFirst"]
          }
        ]
      },
      states: {
        idle: {
          on: {
            FOCUS: {
              target: "focused",
              actions: "setFocusedIndex"
            }
          }
        },
        focused: {
          on: {
            INPUT: [
              {
                guard: and("isFinalValue", "isValidValue"),
                actions: ["setFocusedValue", "syncInputValue"]
              },
              {
                guard: "isValidValue",
                actions: ["setFocusedValue", "setNextFocusedIndex", "syncInputValue"]
              }
            ],
            PASTE: [
              {
                guard: "isValidValue",
                actions: ["setPastedValue", "setLastValueFocusIndex"]
              },
              { actions: ["revertInputValue"] }
            ],
            BLUR: {
              target: "idle",
              actions: "clearFocusedIndex"
            },
            DELETE: {
              guard: "hasValue",
              actions: ["clearFocusedValue"]
            },
            ARROW_LEFT: {
              actions: "setPrevFocusedIndex"
            },
            ARROW_RIGHT: {
              actions: "setNextFocusedIndex"
            },
            BACKSPACE: [
              {
                guard: "hasValue",
                actions: ["clearFocusedValue"]
              },
              {
                actions: ["setPrevFocusedIndex", "clearFocusedValue"]
              }
            ],
            ENTER: {
              guard: "isValueComplete",
              actions: "requestFormSubmit"
            },
            KEY_DOWN: {
              guard: not("isValidValue"),
              actions: ["preventDefault", "invokeOnInvalid"]
            }
          }
        }
      }
    },
    {
      guards: {
        autoFocus: (ctx2) => !!ctx2.autoFocus,
        isValueEmpty: (_ctx, evt) => evt.value === "",
        hasValue: (ctx2) => ctx2.value[ctx2.focusedIndex] !== "",
        isValueComplete: (ctx2) => ctx2.isValueComplete,
        isValidValue(ctx2, evt) {
          if (!ctx2.pattern)
            return isValidType(evt.value, ctx2.type);
          const regex = new RegExp(ctx2.pattern, "g");
          return regex.test(evt.value);
        },
        isFinalValue(ctx2) {
          return ctx2.filledValueLength + 1 === ctx2.valueLength && ctx2.value.findIndex((v) => v.trim() === "") === ctx2.focusedIndex;
        },
        isLastInputFocused: (ctx2) => ctx2.focusedIndex === ctx2.valueLength - 1,
        hasIndex: (_ctx, evt) => evt.index !== void 0,
        isDisabled: (ctx2) => !!ctx2.disabled
      },
      actions: {
        setupValue(ctx2) {
          if (ctx2.value.length)
            return;
          const inputs = dom.getInputEls(ctx2);
          const emptyValues = Array.from({ length: inputs.length }).fill("");
          assignValue(ctx2, emptyValues);
        },
        focusInput(ctx2) {
          (0, import_dom_query3.raf)(() => {
            if (ctx2.focusedIndex === -1)
              return;
            dom.getFocusedInputEl(ctx2)?.focus();
          });
        },
        selectInputIfNeeded(ctx2) {
          (0, import_dom_query3.raf)(() => {
            if (ctx2.focusedIndex === -1)
              return;
            const input = dom.getFocusedInputEl(ctx2);
            const length = input.value.length;
            input.selectionStart = ctx2.selectOnFocus ? 0 : length;
            input.selectionEnd = length;
          });
        },
        invokeOnComplete(ctx2) {
          if (!ctx2.isValueComplete)
            return;
          ctx2.onValueComplete?.({
            value: Array.from(ctx2.value),
            valueAsString: ctx2.valueAsString
          });
        },
        invokeOnInvalid(ctx2, evt) {
          ctx2.onValueInvalid?.({
            value: evt.value,
            index: ctx2.focusedIndex
          });
        },
        clearFocusedIndex(ctx2) {
          ctx2.focusedIndex = -1;
        },
        setFocusedIndex(ctx2, evt) {
          ctx2.focusedIndex = evt.index;
        },
        setValue(ctx2, evt) {
          set.value(ctx2, evt.value);
        },
        setFocusedValue(ctx2, evt) {
          const nextValue = getNextValue(ctx2.focusedValue, evt.value);
          set.valueAtIndex(ctx2, ctx2.focusedIndex, nextValue);
        },
        revertInputValue(ctx2) {
          const inputEl = dom.getFocusedInputEl(ctx2);
          dom.setValue(inputEl, ctx2.focusedValue);
        },
        syncInputValue(ctx2, evt) {
          const inputEl = dom.getInputEl(ctx2, evt.index.toString());
          dom.setValue(inputEl, ctx2.value[evt.index]);
        },
        syncInputElements(ctx2) {
          const inputEls = dom.getInputEls(ctx2);
          inputEls.forEach((inputEl, index) => {
            dom.setValue(inputEl, ctx2.value[index]);
          });
        },
        setPastedValue(ctx2, evt) {
          (0, import_dom_query3.raf)(() => {
            const startIndex = ctx2.focusedValue ? 1 : 0;
            const value = evt.value.substring(startIndex, startIndex + ctx2.valueLength);
            set.value(ctx2, value);
          });
        },
        setValueAtIndex(ctx2, evt) {
          const nextValue = getNextValue(ctx2.focusedValue, evt.value);
          set.valueAtIndex(ctx2, evt.index, nextValue);
        },
        clearValue(ctx2) {
          const nextValue = Array.from({ length: ctx2.valueLength }).fill("");
          set.value(ctx2, nextValue);
        },
        clearFocusedValue(ctx2) {
          set.valueAtIndex(ctx2, ctx2.focusedIndex, "");
        },
        setFocusIndexToFirst(ctx2) {
          ctx2.focusedIndex = 0;
        },
        setNextFocusedIndex(ctx2) {
          ctx2.focusedIndex = Math.min(ctx2.focusedIndex + 1, ctx2.valueLength - 1);
        },
        setPrevFocusedIndex(ctx2) {
          ctx2.focusedIndex = Math.max(ctx2.focusedIndex - 1, 0);
        },
        setLastValueFocusIndex(ctx2) {
          (0, import_dom_query3.raf)(() => {
            ctx2.focusedIndex = Math.min(ctx2.filledValueLength, ctx2.valueLength - 1);
          });
        },
        preventDefault(_, evt) {
          evt.preventDefault();
        },
        blurFocusedInputIfNeeded(ctx2) {
          if (!ctx2.blurOnComplete)
            return;
          (0, import_dom_query3.raf)(() => {
            dom.getFocusedInputEl(ctx2)?.blur();
          });
        },
        requestFormSubmit(ctx2) {
          if (!ctx2.name || !ctx2.isValueComplete)
            return;
          const inputEl = dom.getHiddenInputEl(ctx2);
          inputEl?.form?.requestSubmit();
        }
      }
    }
  );
}
var REGEX = {
  numeric: /^[0-9]+$/,
  alphabetic: /^[A-Za-z]+$/,
  alphanumeric: /^[a-zA-Z0-9]+$/i
};
function isValidType(value, type) {
  if (!type)
    return true;
  return !!REGEX[type]?.test(value);
}
function assignValue(ctx, value) {
  const arr = Array.isArray(value) ? value : value.split("").filter(Boolean);
  arr.forEach((value2, index) => {
    ctx.value[index] = value2;
  });
}
function getNextValue(current, next) {
  let nextValue = next;
  if (current[0] === next[0])
    nextValue = next[1];
  else if (current[0] === next[1])
    nextValue = next[0];
  return nextValue;
}
var invoke = {
  change(ctx) {
    ctx.onValueChange?.({
      value: Array.from(ctx.value),
      valueAsString: ctx.valueAsString
    });
    const inputEl = dom.getHiddenInputEl(ctx);
    (0, import_form_utils.dispatchInputValueEvent)(inputEl, { value: ctx.valueAsString });
  }
};
var set = {
  value(ctx, value) {
    if ((0, import_utils2.isEqual)(ctx.value, value))
      return;
    assignValue(ctx, value);
    invoke.change(ctx);
  },
  valueAtIndex(ctx, index, value) {
    if ((0, import_utils2.isEqual)(ctx.value[index], value))
      return;
    ctx.value[index] = value;
    invoke.change(ctx);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  anatomy,
  connect,
  machine
});
//# sourceMappingURL=index.js.map