import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, Orientation, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

interface ValueChangeDetails {
    value: string[];
}
type ElementIds = Partial<{
    root: string;
    toggle(value: string): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the toggle. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Whether the toggle is disabled.
     */
    disabled?: boolean;
    /**
     * The values of the toggles in the group.
     */
    value: string[];
    /**
     * Function to call when the toggle is clicked.
     */
    onValueChange?: (details: ValueChangeDetails) => void;
    /**
     * Whether to loop focus inside the toggle group.
     */
    loop: boolean;
    /**
     *  Whether to use roving tab index to manage focus.
     */
    rovingFocus?: boolean;
    /**
     * The orientation of the toggle group.
     */
    orientation: Orientation;
    /**
     * Whether to allow multiple toggles to be selected.
     */
    multiple?: boolean;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    currentLoop: boolean;
}>;
type PrivateContext = Context<{}>;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "focused";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface ToggleProps {
    value: string;
    disabled?: boolean;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The value of the toggle group.
     */
    value: string[];
    /**
     * Function to set the value of the toggle group.
     */
    setValue: (values: string[]) => void;
    rootProps: T["element"];
    getToggleProps(props: ToggleProps): T["button"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, UserDefinedContext as Context, connect, machine };
