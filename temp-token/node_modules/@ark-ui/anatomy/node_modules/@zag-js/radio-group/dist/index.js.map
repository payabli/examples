{"version":3,"sources":["../src/index.ts","../src/radio-group.anatomy.ts","../src/radio-group.connect.ts","../src/radio-group.dom.ts","../src/radio-group.machine.ts"],"sourcesContent":["export { anatomy } from \"./radio-group.anatomy\"\nexport { connect } from \"./radio-group.connect\"\nexport { machine } from \"./radio-group.machine\"\nexport type { UserDefinedContext as Context, MachineApi as Api, RadioProps, RadioState } from \"./radio-group.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"radio-group\").parts(\n  \"root\",\n  \"label\",\n  \"radio\",\n  \"radioLabel\",\n  \"radioControl\",\n  \"indicator\",\n)\nexport const parts = anatomy.build()\n","import { dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { visuallyHiddenStyle } from \"@zag-js/visually-hidden\"\nimport { parts } from \"./radio-group.anatomy\"\nimport { dom } from \"./radio-group.dom\"\nimport type { MachineApi, RadioProps, Send, State } from \"./radio-group.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const isGroupDisabled = state.context.isDisabled\n\n  function getRadioState<T extends RadioProps>(props: T) {\n    const radioState = {\n      isInvalid: !!props.invalid,\n      isDisabled: !!props.disabled || isGroupDisabled,\n      isChecked: state.context.value === props.value,\n      isFocused: state.context.focusedId === props.value,\n      isHovered: state.context.hoveredId === props.value,\n      isActive: state.context.activeId === props.value,\n    }\n    return {\n      ...radioState,\n      isInteractive: !radioState.isDisabled,\n    }\n  }\n\n  function getRadioDataAttrs<T extends RadioProps>(props: T) {\n    const radioState = getRadioState(props)\n    return {\n      \"data-focus\": dataAttr(radioState.isFocused),\n      \"data-disabled\": dataAttr(radioState.isDisabled),\n      \"data-state\": radioState.isChecked ? \"checked\" : \"unchecked\",\n      \"data-hover\": dataAttr(radioState.isHovered),\n      \"data-invalid\": dataAttr(radioState.isInvalid),\n      \"data-orientation\": state.context.orientation,\n    }\n  }\n\n  const focus = () => {\n    const firstEnabledAndCheckedInput = dom.getFirstEnabledAndCheckedInputEl(state.context)\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    const firstEnabledInput = dom.getFirstEnabledInputEl(state.context)\n    firstEnabledInput?.focus()\n  }\n\n  return {\n    value: state.context.value,\n\n    setValue(value: string) {\n      send({ type: \"SET_VALUE\", value, isTrusted: false })\n    },\n\n    clearValue() {\n      send({ type: \"SET_VALUE\", value: null, isTrusted: false })\n    },\n\n    focus,\n\n    getRadioState,\n\n    rootProps: normalize.element({\n      ...parts.root.attrs,\n      role: \"radiogroup\",\n      id: dom.getRootId(state.context),\n      \"aria-labelledby\": dom.getLabelId(state.context),\n      \"data-orientation\": state.context.orientation,\n      \"data-disabled\": dataAttr(isGroupDisabled),\n      \"aria-orientation\": state.context.orientation,\n      dir: state.context.dir,\n    }),\n\n    labelProps: normalize.element({\n      ...parts.label.attrs,\n      \"data-orientation\": state.context.orientation,\n      \"data-disabled\": dataAttr(isGroupDisabled),\n      id: dom.getLabelId(state.context),\n      onClick: focus,\n    }),\n\n    getRadioProps(props: RadioProps) {\n      const rootState = getRadioState(props)\n\n      return normalize.label({\n        ...parts.radio.attrs,\n        id: dom.getRadioId(state.context, props.value),\n        htmlFor: dom.getRadioHiddenInputId(state.context, props.value),\n        ...getRadioDataAttrs(props),\n\n        onPointerMove() {\n          if (!rootState.isInteractive) return\n          send({ type: \"SET_HOVERED\", value: props.value, hovered: true })\n        },\n        onPointerLeave() {\n          if (!rootState.isInteractive) return\n          send({ type: \"SET_HOVERED\", value: null })\n        },\n        onPointerDown(event) {\n          if (!rootState.isInteractive) return\n          // On pointerdown, the input blurs and returns focus to the `body`,\n          // we need to prevent this.\n          if (rootState.isFocused && event.pointerType === \"mouse\") {\n            event.preventDefault()\n          }\n          send({ type: \"SET_ACTIVE\", value: props.value, active: true })\n        },\n        onPointerUp() {\n          if (!rootState.isInteractive) return\n          send({ type: \"SET_ACTIVE\", value: null })\n        },\n      })\n    },\n\n    getRadioLabelProps(props: RadioProps) {\n      return normalize.element({\n        ...parts.radioLabel.attrs,\n        id: dom.getRadioLabelId(state.context, props.value),\n        ...getRadioDataAttrs(props),\n      })\n    },\n\n    getRadioControlProps(props: RadioProps) {\n      const controlState = getRadioState(props)\n\n      return normalize.element({\n        ...parts.radioControl.attrs,\n        id: dom.getRadioControlId(state.context, props.value),\n        \"data-active\": dataAttr(controlState.isActive),\n        \"aria-hidden\": true,\n        ...getRadioDataAttrs(props),\n      })\n    },\n\n    getRadioHiddenInputProps(props: RadioProps) {\n      const inputState = getRadioState(props)\n\n      return normalize.input({\n        \"data-ownedby\": dom.getRootId(state.context),\n        id: dom.getRadioHiddenInputId(state.context, props.value),\n        type: \"radio\",\n        name: state.context.name || state.context.id,\n        form: state.context.form,\n        value: props.value,\n        onChange(event) {\n          if (inputState.isDisabled) return\n\n          if (event.target.checked) {\n            send({ type: \"SET_VALUE\", value: props.value, isTrusted: true })\n          }\n        },\n        onBlur() {\n          send({ type: \"SET_FOCUSED\", value: null })\n        },\n        onFocus() {\n          send({ type: \"SET_FOCUSED\", value: props.value, focused: true })\n        },\n        onKeyDown(event) {\n          if (event.key === \" \") {\n            send({ type: \"SET_ACTIVE\", value: props.value, active: true })\n          }\n        },\n        onKeyUp(event) {\n          if (event.key === \" \") {\n            send({ type: \"SET_ACTIVE\", value: null })\n          }\n        },\n        disabled: inputState.isDisabled,\n        defaultChecked: inputState.isChecked,\n        style: visuallyHiddenStyle,\n      })\n    },\n\n    indicatorProps: normalize.element({\n      id: dom.getIndicatorId(state.context),\n      ...parts.indicator.attrs,\n      \"data-disabled\": dataAttr(isGroupDisabled),\n      \"data-orientation\": state.context.orientation,\n      style: {\n        \"--transition-duration\": \"150ms\",\n        \"--transition-property\": \"left, top, width, height\",\n        position: \"absolute\",\n        willChange: \"var(--transition-property)\",\n        transitionProperty: \"var(--transition-property)\",\n        transitionDuration: state.context.canIndicatorTransition ? \"var(--transition-duration)\" : \"0ms\",\n        transitionTimingFunction: \"var(--transition-timing-function)\",\n        ...state.context.indicatorRect,\n      },\n    }),\n  }\n}\n","import { createScope, queryAll } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./radio-group.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => ctx.ids?.root ?? `radio-group:${ctx.id}`,\n  getLabelId: (ctx: Ctx) => ctx.ids?.label ?? `radio-group:${ctx.id}:label`,\n  getRadioId: (ctx: Ctx, value: string) => ctx.ids?.radio?.(value) ?? `radio-group:${ctx.id}:radio:${value}`,\n  getRadioHiddenInputId: (ctx: Ctx, value: string) =>\n    ctx.ids?.radioHiddenInput?.(value) ?? `radio-group:${ctx.id}:radio:input:${value}`,\n  getRadioControlId: (ctx: Ctx, value: string) =>\n    ctx.ids?.radioControl?.(value) ?? `radio-group:${ctx.id}:radio:control:${value}`,\n  getRadioLabelId: (ctx: Ctx, value: string) =>\n    ctx.ids?.radioLabel?.(value) ?? `radio-group:${ctx.id}:radio:label:${value}`,\n  getIndicatorId: (ctx: Ctx) => ctx.ids?.indicator ?? `radio-group:${ctx.id}:indicator`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getRadioHiddenInputEl: (ctx: Ctx, value: string) =>\n    dom.getById<HTMLInputElement>(ctx, dom.getRadioHiddenInputId(ctx, value)),\n  getIndicatorEl: (ctx: Ctx) => dom.getById(ctx, dom.getIndicatorId(ctx)),\n\n  getFirstEnabledInputEl: (ctx: Ctx) => dom.getRootEl(ctx)?.querySelector<HTMLInputElement>(\"input:not(:disabled)\"),\n  getFirstEnabledAndCheckedInputEl: (ctx: Ctx) =>\n    dom.getRootEl(ctx)?.querySelector<HTMLInputElement>(\"input:not(:disabled):checked\"),\n\n  getInputEls: (ctx: Ctx) => {\n    const ownerId = CSS.escape(dom.getRootId(ctx))\n    const selector = `input[type=radio][data-ownedby='${ownerId}']:not([disabled])`\n    return queryAll<HTMLInputElement>(dom.getRootEl(ctx), selector)\n  },\n\n  getActiveRadioEl: (ctx: Ctx) => {\n    if (!ctx.value) return\n    return dom.getById(ctx, dom.getRadioId(ctx, ctx.value))\n  },\n\n  getOffsetRect: (el: HTMLElement | undefined) => ({\n    left: el?.offsetLeft ?? 0,\n    top: el?.offsetTop ?? 0,\n    width: el?.offsetWidth ?? 0,\n    height: el?.offsetHeight ?? 0,\n  }),\n\n  getRectById: (ctx: Ctx, id: string) => {\n    const radioEl = dom.getById(ctx, dom.getRadioId(ctx, id))\n    if (!radioEl) return\n    return dom.resolveRect(dom.getOffsetRect(radioEl))\n  },\n\n  resolveRect: (rect: Record<\"width\" | \"height\" | \"left\" | \"top\", number>) => ({\n    width: `${rect.width}px`,\n    height: `${rect.height}px`,\n    left: `${rect.left}px`,\n    top: `${rect.top}px`,\n  }),\n})\n","import { createMachine, guards } from \"@zag-js/core\"\nimport { nextTick } from \"@zag-js/dom-query\"\nimport { trackElementRect } from \"@zag-js/element-rect\"\nimport { dispatchInputCheckedEvent, trackFormControl } from \"@zag-js/form-utils\"\nimport { compact, isEqual, isString } from \"@zag-js/utils\"\nimport { dom } from \"./radio-group.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./radio-group.types\"\n\nconst { not } = guards\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"radio\",\n      initial: \"idle\",\n      context: {\n        value: null,\n        activeId: null,\n        focusedId: null,\n        hoveredId: null,\n        disabled: false,\n        ...ctx,\n        indicatorRect: {},\n        canIndicatorTransition: false,\n        fieldsetDisabled: false,\n      },\n\n      computed: {\n        isDisabled: (ctx) => !!ctx.disabled || ctx.fieldsetDisabled,\n      },\n\n      entry: [\"syncIndicatorRect\"],\n\n      exit: [\"cleanupObserver\"],\n\n      activities: [\"trackFormControlState\"],\n\n      watch: {\n        value: [\"setIndicatorTransition\", \"syncIndicatorRect\", \"syncInputElements\"],\n      },\n\n      on: {\n        SET_VALUE: [\n          {\n            guard: not(\"isTrusted\"),\n            actions: [\"setValue\", \"dispatchChangeEvent\"],\n          },\n          {\n            actions: [\"setValue\"],\n          },\n        ],\n        SET_HOVERED: {\n          actions: \"setHovered\",\n        },\n        SET_ACTIVE: {\n          actions: \"setActive\",\n        },\n        SET_FOCUSED: {\n          actions: \"setFocused\",\n        },\n      },\n\n      states: {\n        idle: {},\n      },\n    },\n\n    {\n      guards: {\n        isTrusted: (_ctx, evt) => !!evt.isTrusted,\n      },\n      activities: {\n        trackFormControlState(ctx, _evt, { send, initialContext }) {\n          return trackFormControl(dom.getRootEl(ctx), {\n            onFieldsetDisabledChange(disabled) {\n              ctx.fieldsetDisabled = disabled\n            },\n            onFormReset() {\n              send({ type: \"SET_VALUE\", value: initialContext.value })\n            },\n          })\n        },\n      },\n\n      actions: {\n        setValue(ctx, evt) {\n          set.value(ctx, evt.value)\n        },\n        setHovered(ctx, evt) {\n          ctx.hoveredId = evt.value\n        },\n        setActive(ctx, evt) {\n          ctx.activeId = evt.value\n        },\n        setFocused(ctx, evt) {\n          ctx.focusedId = evt.value\n        },\n        syncInputElements(ctx) {\n          const inputs = dom.getInputEls(ctx)\n          inputs.forEach((input) => {\n            input.checked = input.value === ctx.value\n          })\n        },\n        setIndicatorTransition(ctx) {\n          ctx.canIndicatorTransition = isString(ctx.value)\n        },\n        cleanupObserver(ctx) {\n          ctx.indicatorCleanup?.()\n        },\n        syncIndicatorRect(ctx) {\n          ctx.indicatorCleanup?.()\n\n          if (!dom.getIndicatorEl(ctx)) return\n\n          const value = ctx.value\n\n          if (value == null) {\n            ctx.indicatorRect = {}\n            return\n          }\n\n          const radioEl = dom.getActiveRadioEl(ctx)\n          if (!radioEl) return\n\n          ctx.indicatorCleanup = trackElementRect(radioEl, {\n            getRect(el) {\n              return dom.getOffsetRect(el)\n            },\n            onChange(rect) {\n              ctx.indicatorRect = dom.resolveRect(rect)\n              nextTick(() => {\n                ctx.canIndicatorTransition = false\n              })\n            },\n          })\n        },\n        dispatchChangeEvent(ctx) {\n          const inputEls = dom.getInputEls(ctx)\n          inputEls.forEach((inputEl) => {\n            const checked = inputEl.value === ctx.value\n            if (checked === inputEl.checked) return\n            dispatchInputCheckedEvent(inputEl, { checked })\n          })\n        },\n      },\n    },\n  )\n}\n\nconst invoke = {\n  change: (ctx: MachineContext) => {\n    if (ctx.value == null) return\n    ctx.onValueChange?.({ value: ctx.value })\n  },\n}\n\nconst set = {\n  value: (ctx: MachineContext, value: string) => {\n    if (isEqual(ctx.value, value)) return\n    ctx.value = value\n    invoke.change(ctx)\n  },\n}\n"],"mappings":"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","names":["import_dom_query","import_dom_query","ctx"]}