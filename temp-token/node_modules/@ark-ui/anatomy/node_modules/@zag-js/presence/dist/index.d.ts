import { PropTypes, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

interface PublicContext {
    present: boolean;
    onExitComplete?: () => void;
}
interface PrivateContext {
    node: HTMLElement | null;
    styles: CSSStyleDeclaration | null;
    prevPresent?: boolean;
    prevAnimationName: string;
}
type UserDefinedContext = PublicContext;
interface MachineContext extends PublicContext, PrivateContext {
}
interface MachineState {
    value: "mounted" | "unmountSuspended" | "unmounted";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface MachineApi {
    /**
     * Whether the node is present in the DOM.
     */
    isPresent: boolean;
    /**
     * Function to set the node (as early as possible)
     */
    setNode(node: HTMLElement | null): void;
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi;

declare function machine(ctx: Partial<UserDefinedContext>): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { MachineApi as Api, UserDefinedContext as Context, connect, machine };
