{"version":3,"sources":["../src/pressable.connect.ts","../src/pressable.utils.ts","../src/pressable.machine.ts","../src/pressable.dom.ts"],"sourcesContent":["import { getNativeEvent, isVirtualClick, isVirtualPointerEvent } from \"@zag-js/dom-event\"\nimport { contains, dataAttr } from \"@zag-js/dom-query\"\nimport type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport type { MachineApi, Send, State } from \"./pressable.types\"\nimport { isValidKeyboardEvent, shouldPreventDefault, shouldPreventDefaultKeyboard } from \"./pressable.utils\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const isPressed = state.hasTag(\"pressed\")\n  const isDisabled = state.context.disabled\n  return {\n    isPressed,\n    pressableProps: normalize.element({\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-pressed\": dataAttr(isPressed),\n      onKeyDown(event) {\n        const evt = getNativeEvent(event)\n\n        if (!isValidKeyboardEvent(evt)) return\n        if (!contains(event.currentTarget, event.target)) return\n\n        if (!event.repeat) {\n          const currentTarget = event.currentTarget\n          send({ type: \"KEY_DOWN\", currentTarget, pointerType: \"keyboard\" })\n        }\n\n        if (shouldPreventDefaultKeyboard(event.target)) {\n          event.preventDefault()\n        }\n      },\n      onClick(event) {\n        const evt = getNativeEvent(event)\n        if (!contains(event.currentTarget, event.target) || event.button !== 0) return\n\n        const ctx = state.context\n\n        if (ctx.disabled) {\n          event.preventDefault()\n        }\n\n        const isVirtual = ctx.pointerType === \"virtual\" || isVirtualClick(evt)\n\n        if (!ctx.ignoreClickAfterPress && isVirtual) {\n          const currentTarget = event.currentTarget\n          send({ type: \"CLICK\", currentTarget, pointerType: \"virtual\" })\n        }\n      },\n      onPointerDown(event) {\n        if (isDisabled) return\n\n        if (event.button !== 0 || !contains(event.currentTarget, event.target)) {\n          return\n        }\n\n        if (shouldPreventDefault(event.currentTarget)) {\n          event.preventDefault()\n        }\n\n        const evt = getNativeEvent(event)\n\n        const pointerType = isVirtualPointerEvent(evt) ? \"virtual\" : event.pointerType\n        const pointerId = evt.pointerId\n        const currentTarget = event.currentTarget\n\n        send({ type: \"POINTER_DOWN\", currentTarget, pointerType, pointerId })\n      },\n      onMouseDown(event) {\n        if (event.button !== 0) return\n        if (shouldPreventDefault(event.currentTarget)) {\n          event.preventDefault()\n        }\n      },\n      onDragStart(event) {\n        const currentTarget = event.currentTarget\n        send({ type: \"DRAG_START\", currentTarget })\n      },\n    }),\n  }\n}\n","import { isHTMLElement } from \"@zag-js/dom-query\"\nimport type { EventPoint, Rect } from \"./pressable.types\"\n\nexport function isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const { key, target } = event\n\n  const element = target as HTMLElement\n\n  const { tagName, isContentEditable } = element\n  const role = element.getAttribute(\"role\")\n\n  if (tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable) return false\n\n  return (\n    (key === \"Enter\" || key === \" \") &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === \"button\" && key !== \"Enter\")) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === \"link\" && key !== \"Enter\")\n  )\n}\n\nexport function isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\")\n}\n\nexport function shouldPreventDefaultKeyboard(target: any) {\n  return !(\n    (target.tagName === \"INPUT\" || target.tagName === \"BUTTON\") &&\n    (target as HTMLButtonElement | HTMLInputElement).type === \"submit\"\n  )\n}\n\nexport function shouldPreventDefault(target: Element) {\n  return !isHTMLElement(target) || !target.draggable\n}\n\nexport function isOverTarget(point: EventPoint, target: Element | null) {\n  if (!target) return\n  let rect = target.getBoundingClientRect()\n  let pointRect = getPointClientRect(point)\n  return areRectanglesOverlapping(rect, pointRect)\n}\n\nexport function getPointClientRect(point: EventPoint): Rect {\n  let offsetX = point.width ? point.width / 2 : point.radiusX || 0\n  let offsetY = point.height ? point.height / 2 : point.radiusY || 0\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX,\n  }\n}\n\nexport function areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false\n  }\n  return true\n}\n","import { createMachine, ref } from \"@zag-js/core\"\nimport { addDomEvent } from \"@zag-js/dom-event\"\nimport { isHTMLElement } from \"@zag-js/dom-query\"\nimport { disableTextSelection, restoreTextSelection } from \"@zag-js/text-selection\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./pressable.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./pressable.types\"\nimport { isHTMLAnchorLink, isOverTarget, isValidKeyboardEvent, shouldPreventDefaultKeyboard } from \"./pressable.utils\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"pressable\",\n      initial: \"idle\",\n      context: {\n        longPressDelay: 500,\n        ...ctx,\n        wasPressedDown: false,\n        ignoreClickAfterPress: false,\n        target: null,\n        pointerId: null,\n        pointerType: null,\n        cleanups: ref([]),\n      },\n\n      exit: [\"restoreTextSelection\", \"removeDocumentListeners\"],\n\n      states: {\n        idle: {\n          entry: [\"resetPointerContext\", \"restoreTextSelection\", \"removeDocumentListeners\"],\n          on: {\n            POINTER_DOWN: [\n              {\n                guard: \"isVirtualPointer\",\n                actions: \"setPointerType\",\n              },\n              {\n                target: \"pressed:in\",\n                actions: [\n                  \"setPressedDown\",\n                  \"setPointerType\",\n                  \"setPointerId\",\n                  \"setTarget\",\n                  \"focusIfNeeded\",\n                  \"disableTextSelection\",\n                  \"invokeOnPressStart\",\n                  \"trackDocumentPointerEvents\",\n                ],\n              },\n            ],\n            KEY_DOWN: {\n              target: \"pressed:in\",\n              actions: [\"setTarget\", \"setPointerType\", \"invokeOnPressStart\", \"trackDocumentKeyup\"],\n            },\n            CLICK: {\n              actions: [\n                \"focusIfNeeded\",\n                \"invokeOnPressStart\",\n                \"enableClickAfterPress\",\n                \"invokeOnPressEnd\",\n                \"invokeOnPress\",\n              ],\n            },\n          },\n        },\n\n        \"pressed:in\": {\n          tags: \"pressed\",\n          entry: \"preventContextMenu\",\n          after: {\n            LONG_PRESS_DELAY: {\n              guard: \"wasPressedDown\",\n              actions: [\"clearPressedDown\", \"invokeOnLongPress\"],\n            },\n          },\n          on: {\n            POINTER_LEAVE: [\n              {\n                guard: \"cancelOnPointerExit\",\n                target: \"idle\",\n                actions: [\"clearPressedDown\", \"invokeOnPressEnd\"],\n              },\n              {\n                target: \"pressed:out\",\n                actions: [\"invokeOnPressEnd\"],\n              },\n            ],\n            DOC_POINTER_UP: [\n              {\n                guard: \"wasPressedDown\",\n                target: \"idle\",\n                actions: [\n                  \"clearPressedDown\",\n                  \"invokeOnPressUp\",\n                  \"enableClickAfterPress\",\n                  \"invokeOnPressEnd\",\n                  \"invokeOnPress\",\n                ],\n              },\n              {\n                target: \"idle\",\n                actions: [\"clearPressedDown\", \"invokeOnPressUp\", \"enableClickAfterPress\", \"invokeOnPressEnd\"],\n              },\n            ],\n            DOC_KEY_UP: {\n              target: \"idle\",\n              actions: [\n                \"clearPressedDown\",\n                \"invokeOnPressUp\",\n                \"disableClickAfterPress\",\n                \"invokeOnPressEnd\",\n                \"invokeOnPress\",\n                \"triggerClickIfAnchor\",\n              ],\n            },\n            DOC_POINTER_CANCEL: {\n              target: \"idle\",\n              actions: \"clearPressedDown\",\n            },\n            DRAG_START: {\n              target: \"idle\",\n              actions: \"clearPressedDown\",\n            },\n          },\n        },\n\n        \"pressed:out\": {\n          on: {\n            POINTER_ENTER: {\n              target: \"pressed:in\",\n              actions: \"invokeOnPressStart\",\n            },\n            DOC_POINTER_UP: {\n              target: \"idle\",\n            },\n            DOC_POINTER_CANCEL: \"idle\",\n            DRAG_START: \"idle\",\n          },\n        },\n      },\n    },\n\n    {\n      delays: {\n        LONG_PRESS_DELAY: (ctx) => ctx.longPressDelay,\n      },\n      guards: {\n        isVirtualPointer: (_ctx, evt) => evt.pointerType === \"virtual\",\n        cancelOnPointerExit: (ctx) => !!ctx.cancelOnPointerExit,\n        wasPressedDown: (ctx) => ctx.wasPressedDown,\n      },\n      actions: {\n        trackDocumentPointerEvents(ctx, _evt, { send }) {\n          const doc = dom.getDoc(ctx)\n\n          const onPointerMove = (event: PointerEvent) => {\n            if (event.pointerId !== ctx.pointerId) return\n            const isOver = isOverTarget(event, ctx.target)\n            send({\n              type: isOver ? \"POINTER_ENTER\" : \"POINTER_LEAVE\",\n              currentTarget: event.currentTarget,\n              pointerType: event.pointerType,\n            })\n          }\n\n          const onPointerUp = (event: PointerEvent) => {\n            if (event.pointerId !== ctx.pointerId || event.button !== 0) return\n            send({\n              type: \"DOC_POINTER_UP\",\n              currentTarget: event.currentTarget,\n              pointerType: event.pointerType,\n            })\n          }\n\n          const onPointerCancel = (event: PointerEvent | MouseEvent) => {\n            send({\n              type: \"DOC_POINTER_CANCEL\",\n              currentTarget: event.currentTarget,\n            })\n          }\n\n          const cleanup = [\n            addDomEvent(doc, \"pointermove\", onPointerMove, false),\n            addDomEvent(doc, \"pointerup\", onPointerUp, false),\n            addDomEvent(doc, \"pointercancel\", onPointerCancel, false),\n          ]\n\n          // When user presses the left button and quickly presses the context menu button\n          if (ctx.pointerType !== \"touch\") {\n            cleanup.push(addDomEvent(doc, \"contextmenu\", onPointerCancel, false))\n          }\n\n          ctx.cleanups.push(...cleanup)\n        },\n        trackDocumentKeyup(ctx, evt, { send }) {\n          const doc = dom.getDoc(ctx)\n\n          const onKeyup = (event: KeyboardEvent) => {\n            if (!isValidKeyboardEvent(event)) return\n\n            if (shouldPreventDefaultKeyboard(event.target as Element)) {\n              event.preventDefault()\n            }\n\n            send({\n              type: \"DOC_KEY_UP\",\n              // forward the previously store keyboard type\n              pointerType: evt.pointerType,\n            })\n          }\n\n          const cleanup = addDomEvent(doc, \"keyup\", onKeyup, false)\n          ctx.cleanups.push(cleanup)\n        },\n        removeDocumentListeners(ctx) {\n          ctx.cleanups.forEach((fn) => fn?.())\n          ctx.cleanups = ref([])\n        },\n        resetPointerContext(ctx) {\n          ctx.pointerId = null\n          ctx.pointerType = null\n        },\n        disableTextSelection(ctx) {\n          if (!ctx.target || ctx.allowTextSelectionOnPress) return\n          disableTextSelection({ target: ctx.target, doc: dom.getDoc(ctx) })\n        },\n        restoreTextSelection(ctx) {\n          if (ctx.allowTextSelectionOnPress || !ctx.target) return\n          restoreTextSelection({ target: ctx.target, doc: dom.getDoc(ctx) })\n        },\n        setPointerToVirtual(ctx) {\n          ctx.pointerType = \"virtual\"\n        },\n        setPointerType(ctx, evt) {\n          ctx.pointerType = evt.pointerType\n        },\n        setPointerId(ctx, evt) {\n          ctx.pointerId = evt.pointerId\n        },\n        setTarget(ctx, evt) {\n          ctx.target = ref(evt.currentTarget)\n        },\n        focusIfNeeded(ctx, evt) {\n          if (ctx.disabled || ctx.preventFocusOnPress) return\n          evt.currentTarget.focus({ preventScroll: true })\n        },\n        invokeOnPressStart(ctx, evt) {\n          if (ctx.disabled) return\n          ctx.onPressStart?.({\n            type: \"pressstart\",\n            pointerType: evt.pointerType || ctx.pointerType,\n            target: evt.currentTarget,\n          })\n        },\n        invokeOnPressUp(ctx, evt) {\n          if (ctx.disabled) return\n          ctx.onPressUp?.({\n            type: \"pressup\",\n            pointerType: evt.pointerType || ctx.pointerType,\n            target: evt.currentTarget,\n          })\n        },\n        invokeOnPressEnd(ctx, evt) {\n          if (ctx.disabled) return\n          ctx.onPressEnd?.({\n            type: \"pressend\",\n            pointerType: evt.pointerType || ctx.pointerType,\n            target: evt.currentTarget,\n          })\n        },\n        invokeOnPress(ctx, evt) {\n          if (ctx.disabled) return\n          ctx.onPress?.({\n            type: \"press\",\n            pointerType: evt.pointerType || ctx.pointerType,\n            target: evt.currentTarget,\n          })\n        },\n        triggerClickIfAnchor(ctx, evt) {\n          let target = evt.currentTarget as Element\n          if (!isHTMLElement(ctx.target)) return\n\n          const isAnchor = isHTMLAnchorLink(ctx.target) || ctx.target.getAttribute(\"role\") === \"link\"\n\n          if (ctx.target.contains(target) && isAnchor) {\n            ctx.target.click()\n          }\n        },\n        invokeOnLongPress(ctx, evt) {\n          if (!ctx.target) return\n          ctx.onLongPress?.({\n            type: \"longpress\",\n            pointerType: evt.pointerType || ctx.pointerType,\n            target: ctx.target,\n          })\n        },\n        disableClickAfterPress(ctx) {\n          ctx.ignoreClickAfterPress = true\n        },\n        enableClickAfterPress(ctx) {\n          ctx.ignoreClickAfterPress = false\n        },\n        setPressedDown(ctx) {\n          ctx.wasPressedDown = true\n        },\n        clearPressedDown(ctx) {\n          ctx.wasPressedDown = false\n        },\n        preventContextMenu(ctx) {\n          // Prevent context menu, which may be opened on long press on touch devices\n          if (ctx.pointerType !== \"touch\" || !ctx.onLongPress) return\n\n          const onContextMenu = (event: MouseEvent) => event.preventDefault()\n          const cleanup = addDomEvent(ctx.target, \"contextmenu\", onContextMenu, { once: true })\n\n          // If no contextmenu event is fired quickly after pointerup, remove the handler\n          // so future context menu events outside a long press are not prevented.\n          const onPointerUp = () => void setTimeout(cleanup, 30)\n          addDomEvent(dom.getWin(ctx), \"pointerup\", onPointerUp, { once: true })\n        },\n      },\n    },\n  )\n}\n","import { createScope } from \"@zag-js/dom-query\"\n\nexport const dom = createScope({})\n"],"mappings":"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","names":["isHTMLElement","ctx","isHTMLElement"]}