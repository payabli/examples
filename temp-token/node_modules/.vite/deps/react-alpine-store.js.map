{
  "version": 3,
  "sources": ["../../react-alpine-store/main.js"],
  "sourcesContent": ["import { useState, useEffect, useCallback, useRef } from \"react\"\n\nconst initializeAlpine = () => {\n  return new Promise((resolve) => {\n    if (window.Alpine) {\n      resolve(window.Alpine)\n    } else {\n      document.addEventListener(\"alpine:init\", () => {\n        resolve(window.Alpine)\n      })\n    }\n  })\n}\n\nconst getStoreValue = (Alpine, path) => {\n  const parts = path.split(\".\")\n  if (parts.length === 1) {\n    return Alpine.store(parts[0])\n  }\n\n  let value = Alpine.store(parts[0])\n  for (let i = 1; i < parts.length; i++) {\n    if (value === undefined) break\n    value = value[parts[i]]\n  }\n\n  return value\n}\n\nconst setStoreValue = (Alpine, path, newValue) => {\n  const parts = path.split(\".\")\n  if (parts.length === 1) {\n    Alpine.store(parts[0], newValue)\n    return\n  }\n\n  let target = Alpine.store(parts[0])\n  for (let i = 1; i < parts.length - 1; i++) {\n    if (!(parts[i] in target)) {\n      target[parts[i]] = {}\n    }\n    target = target[parts[i]]\n  }\n\n  target[parts[parts.length - 1]] = newValue\n}\n\nexport function useAlpineStore(path) {\n  const [value, setValue] = useState(undefined)\n  const alpineRef = useRef(null)\n  const pathRef = useRef(path)\n\n  useEffect(() => {\n    initializeAlpine().then((Alpine) => {\n      alpineRef.current = Alpine\n      const initialValue = getStoreValue(Alpine, pathRef.current)\n      setValue(initialValue)\n\n      const cleanup = Alpine.effect(() => {\n        const currentValue = getStoreValue(Alpine, pathRef.current)\n        if (currentValue !== value) {\n          setValue(currentValue)\n        }\n      })\n\n      return cleanup\n    })\n  }, [])\n\n  const updateValue = useCallback((newValue) => {\n    if (!alpineRef.current) return\n\n    const updatedValue =\n      typeof newValue === \"function\" ? newValue(getStoreValue(alpineRef.current, pathRef.current)) : newValue\n\n    setStoreValue(alpineRef.current, pathRef.current, updatedValue)\n    setValue(updatedValue)\n  }, [])\n\n  return [value, updateValue]\n}\n\n"],
  "mappings": ";;;;;;;;AAAA,mBAAyD;AAEzD,IAAM,mBAAmB,MAAM;AAC7B,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,QAAI,OAAO,QAAQ;AACjB,cAAQ,OAAO,MAAM;AAAA,IACvB,OAAO;AACL,eAAS,iBAAiB,eAAe,MAAM;AAC7C,gBAAQ,OAAO,MAAM;AAAA,MACvB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;AAEA,IAAM,gBAAgB,CAAC,QAAQ,SAAS;AACtC,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,OAAO,MAAM,MAAM,CAAC,CAAC;AAAA,EAC9B;AAEA,MAAI,QAAQ,OAAO,MAAM,MAAM,CAAC,CAAC;AACjC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,UAAU,OAAW;AACzB,YAAQ,MAAM,MAAM,CAAC,CAAC;AAAA,EACxB;AAEA,SAAO;AACT;AAEA,IAAM,gBAAgB,CAAC,QAAQ,MAAM,aAAa;AAChD,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,MAAM,MAAM,CAAC,GAAG,QAAQ;AAC/B;AAAA,EACF;AAEA,MAAI,SAAS,OAAO,MAAM,MAAM,CAAC,CAAC;AAClC,WAAS,IAAI,GAAG,IAAI,MAAM,SAAS,GAAG,KAAK;AACzC,QAAI,EAAE,MAAM,CAAC,KAAK,SAAS;AACzB,aAAO,MAAM,CAAC,CAAC,IAAI,CAAC;AAAA,IACtB;AACA,aAAS,OAAO,MAAM,CAAC,CAAC;AAAA,EAC1B;AAEA,SAAO,MAAM,MAAM,SAAS,CAAC,CAAC,IAAI;AACpC;AAEO,SAAS,eAAe,MAAM;AACnC,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,MAAS;AAC5C,QAAM,gBAAY,qBAAO,IAAI;AAC7B,QAAM,cAAU,qBAAO,IAAI;AAE3B,8BAAU,MAAM;AACd,qBAAiB,EAAE,KAAK,CAAC,WAAW;AAClC,gBAAU,UAAU;AACpB,YAAM,eAAe,cAAc,QAAQ,QAAQ,OAAO;AAC1D,eAAS,YAAY;AAErB,YAAM,UAAU,OAAO,OAAO,MAAM;AAClC,cAAM,eAAe,cAAc,QAAQ,QAAQ,OAAO;AAC1D,YAAI,iBAAiB,OAAO;AAC1B,mBAAS,YAAY;AAAA,QACvB;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT,CAAC;AAAA,EACH,GAAG,CAAC,CAAC;AAEL,QAAM,kBAAc,0BAAY,CAAC,aAAa;AAC5C,QAAI,CAAC,UAAU,QAAS;AAExB,UAAM,eACJ,OAAO,aAAa,aAAa,SAAS,cAAc,UAAU,SAAS,QAAQ,OAAO,CAAC,IAAI;AAEjG,kBAAc,UAAU,SAAS,QAAQ,SAAS,YAAY;AAC9D,aAAS,YAAY;AAAA,EACvB,GAAG,CAAC,CAAC;AAEL,SAAO,CAAC,OAAO,WAAW;AAC5B;",
  "names": []
}
