import {
  require_react
} from "./chunk-D2P3IO6H.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-alpine-store/main.js
var import_react = __toESM(require_react());
var initializeAlpine = () => {
  return new Promise((resolve) => {
    if (window.Alpine) {
      resolve(window.Alpine);
    } else {
      document.addEventListener("alpine:init", () => {
        resolve(window.Alpine);
      });
    }
  });
};
var getStoreValue = (Alpine, path) => {
  const parts = path.split(".");
  if (parts.length === 1) {
    return Alpine.store(parts[0]);
  }
  let value = Alpine.store(parts[0]);
  for (let i = 1; i < parts.length; i++) {
    if (value === void 0) break;
    value = value[parts[i]];
  }
  return value;
};
var setStoreValue = (Alpine, path, newValue) => {
  const parts = path.split(".");
  if (parts.length === 1) {
    Alpine.store(parts[0], newValue);
    return;
  }
  let target = Alpine.store(parts[0]);
  for (let i = 1; i < parts.length - 1; i++) {
    if (!(parts[i] in target)) {
      target[parts[i]] = {};
    }
    target = target[parts[i]];
  }
  target[parts[parts.length - 1]] = newValue;
};
function useAlpineStore(path) {
  const [value, setValue] = (0, import_react.useState)(void 0);
  const alpineRef = (0, import_react.useRef)(null);
  const pathRef = (0, import_react.useRef)(path);
  (0, import_react.useEffect)(() => {
    initializeAlpine().then((Alpine) => {
      alpineRef.current = Alpine;
      const initialValue = getStoreValue(Alpine, pathRef.current);
      setValue(initialValue);
      const cleanup = Alpine.effect(() => {
        const currentValue = getStoreValue(Alpine, pathRef.current);
        if (currentValue !== value) {
          setValue(currentValue);
        }
      });
      return cleanup;
    });
  }, []);
  const updateValue = (0, import_react.useCallback)((newValue) => {
    if (!alpineRef.current) return;
    const updatedValue = typeof newValue === "function" ? newValue(getStoreValue(alpineRef.current, pathRef.current)) : newValue;
    setStoreValue(alpineRef.current, pathRef.current, updatedValue);
    setValue(updatedValue);
  }, []);
  return [value, updateValue];
}
export {
  useAlpineStore
};
//# sourceMappingURL=react-alpine-store.js.map
